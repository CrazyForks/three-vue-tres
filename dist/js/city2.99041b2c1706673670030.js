import{aS as M,bC as r,al as s,bo as z,au as B,b5 as j,Z as S,aP as O,a3 as k,ai as P,aj as A,k as T,o as d,c as U,v as p,C as h,V as u,J as y,ah as w,a as _,D as N,b9 as V,a7 as W,aa as E}from"./vendor.45c6b8731706673670030.js";import{v as D,f as F,L,a as I,b as G}from"./LineSegments2.20303ddf1706673670030.js";import{C as q}from"./vanilla-307d3a93.esm.cf32401a1706673670030.js";import{r as v,i as R,s as $}from"./utils.fcfe44b61706673670030.js";import{_ as H}from"./roadLight.vue_vue_type_script_setup_true_lang.f15ba2ad1706673670030.js";import"./_commonjsHelpers.725317a41706673670030.js";import"./Water2.01bfba431706673670030.js";import"./Reflector.4535952d1706673670030.js";class J extends M{constructor(e={}){super(),this.vertexShader="\n      #define STANDARD\n      varying vec3 vViewPosition;\n      #ifdef USE_TRANSMISSION\n      varying vec3 vWorldPosition;\n      #endif\n    \n      varying vec2 vUv;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      varying vec3 vPositionW;\n\n      #include <common>\n      #include <uv_pars_vertex>\n      #include <envmap_pars_vertex>\n      #include <color_pars_vertex>\n      #include <fog_pars_vertex>\n      #include <morphtarget_pars_vertex>\n      #include <skinning_pars_vertex>\n      #include <logdepthbuf_pars_vertex>\n      #include <clipping_planes_pars_vertex>\n\n      void main() {\n        \n        #include <uv_vertex>\n        #include <color_vertex>\n        #include <morphcolor_vertex>\n      \n        #if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n      \n          #include <beginnormal_vertex>\n          #include <morphnormal_vertex>\n          #include <skinbase_vertex>\n          #include <skinnormal_vertex>\n          #include <defaultnormal_vertex>\n      \n        #endif\n      \n        #include <begin_vertex>\n        #include <morphtarget_vertex>\n        #include <skinning_vertex>\n        #include <project_vertex>\n        #include <logdepthbuf_vertex>\n        #include <clipping_planes_vertex>\n      \n        #include <worldpos_vertex>\n        #include <envmap_vertex>\n        #include <fog_vertex>\n\n        mat4 modelViewProjectionMatrix = projectionMatrix * modelViewMatrix;\n\n        vUv = uv;\n        vPos = projectionMatrix * modelViewMatrix * vec4( transformed, 1.0 );\n        vPositionW = vec3( vec4( transformed, 1.0 ) * modelMatrix);\n        vNormalW = normalize( vec3( vec4( normal, 0.0 ) * modelMatrix ) );\n        \n        gl_Position = modelViewProjectionMatrix * vec4( transformed, 1.0 );\n\n      }",this.fragmentShader=" \n      varying vec2 vUv;\n      varying vec3 vPositionW;\n      varying vec4 vPos;\n      varying vec3 vNormalW;\n      \n      uniform float time;\n      uniform float fresnelOpacity;\n      uniform float scanlineSize;\n      uniform float fresnelAmount;\n      uniform float signalSpeed;\n      uniform float hologramBrightness;\n      uniform float hologramOpacity;\n      uniform bool blinkFresnelOnly;\n      uniform bool enableBlinking;\n      uniform vec3 hologramColor;\n\n      float flicker( float amt, float time ) {return clamp( fract( cos( time ) * 43758.5453123 ), amt, 1.0 );}\n      float random(in float a, in float b) { return fract((cos(dot(vec2(a,b) ,vec2(12.9898,78.233))) * 43758.5453)); }\n\n      void main() {\n        vec2 vCoords = vPos.xy;\n        vCoords /= vPos.w;\n        vCoords = vCoords * 0.5 + 0.5;\n        vec2 myUV = fract( vCoords );\n\n        // Defines hologram main color\n        vec4 hologramColor = vec4(hologramColor, mix(hologramBrightness, vUv.y, 0.5));\n\n        // Add scanlines\n        float scanlines = 10.;\n        scanlines += 20. * sin(time *signalSpeed * 20.8 - myUV.y * 60. * scanlineSize);\n        scanlines *= smoothstep(1.3 * cos(time *signalSpeed + myUV.y * scanlineSize), 0.78, 0.9);\n        scanlines *= max(0.25, sin(time *signalSpeed) * 1.0);        \n        \n        // Scanlines offsets\n        float r = random(vUv.x, vUv.y);\n        float g = random(vUv.y * 20.2, 	vUv.y * .2);\n        float b = random(vUv.y * .9, 	vUv.y * .2);\n\n        // Scanline composition\n        hologramColor += vec4(r*scanlines, b*scanlines, r, 1.0) / 84.;\n        vec4 scanlineMix = mix(vec4(0.0), hologramColor, hologramColor.a);\n\n        // Calculates fresnel\n        vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n        float fresnelEffect = dot(viewDirectionW, vNormalW) * (1.6 - fresnelOpacity/2.);\n        fresnelEffect = clamp(fresnelAmount - fresnelEffect, 0., fresnelOpacity);\n\n        // Blinkin effect\n        //Suggested by Octano - https://x.com/OtanoDesign?s=20\n        float blinkValue = enableBlinking ? 0.6 - signalSpeed : 1.0;\n        float blink = flicker(blinkValue, time * signalSpeed * .02);\n    \n        // Final shader composition\n        vec3 finalColor;\n\n        if(blinkFresnelOnly){\n          // finalColor = vec3(1.0,1.0,0);\n          finalColor = scanlineMix.rgb + fresnelEffect * blink;\n        }else{\n          finalColor = scanlineMix.rgb * blink + fresnelEffect;\n        }\n\n        gl_FragColor = vec4( finalColor, hologramOpacity);\n\n      }",this.uniforms={time:new r(0),fresnelOpacity:new r(e.fresnelOpacity!==void 0?e.fresnelOpacity:1),fresnelAmount:new r(e.fresnelAmount!==void 0?e.fresnelAmount:.45),scanlineSize:new r(e.scanlineSize!==void 0?e.scanlineSize:8),hologramBrightness:new r(e.hologramBrightness!==void 0?e.hologramBrightness:1),signalSpeed:new r(e.signalSpeed!==void 0?e.signalSpeed:1),hologramColor:new r(e.hologramColor!==void 0?new s(e.hologramColor):new s("#00d5ff")),enableBlinking:new r(e.enableBlinking!==void 0?e.enableBlinking:!0),blinkFresnelOnly:new r(e.blinkFresnelOnly!==void 0?e.blinkFresnelOnly:!0),hologramOpacity:new r(e.hologramOpacity!==void 0?e.hologramOpacity:1)},this.clock=new z,this.setValues(e),this.depthTest=e.depthTest!==void 0?e.depthTest:!1,this.blending=e.blendMode!==void 0?e.blendMode:B,this.transparent=!0,this.side=e.side!==void 0?e.side:j}update(){this.uniforms.time.value=this.clock.getElapsedTime()}}const K=S({__name:"importantBuildings",props:{group:{}},setup(m){const e=m,c={fresnelAmount:0,fresnelOpacity:0,scanlineSize:15,signalSpeed:1.3,hologramColor:"#e05b0f"},o=new J({blendMode:B,hologramBrightness:2.5,side:O});o.uniforms.fresnelAmount.value=c.fresnelAmount,o.uniforms.scanlineSize.value=c.scanlineSize,o.uniforms.signalSpeed.value=c.signalSpeed,o.uniforms.fresnelOpacity.value=c.fresnelOpacity,o.uniforms.hologramColor.value=new s(c.hologramColor),o.uniforms.enableBlinking.value=!1,o.depthTest=!0;let i,a,l=null;(()=>{const n=e.group.getObjectByName("02-huanqiujinrongzhongxin_huanqiujinrongzhongxin_0");n.name="环球金融中心",n.material.dispose(),v(n.geometry),n.material=o,i=e.group.getObjectByName("01-shanghaizhongxindasha_shanghaizhongxindasha_0"),i.name="上海中心",i.material.dispose(),v(i.geometry),i.material=o.clone(),i.material.uniforms.hologramColor.value=new s("#006cf9"),i.material.uniforms.fresnelAmount.value=1,i.material.uniforms.scanlineSize.value=2.1,i.material.uniforms.signalSpeed.value=.4,a=e.group.getObjectByName("03-jinmaodasha_jjinmaodasha_0"),a.name="金茂大厦",a.material.dispose(),v(a.geometry),a.material=o.clone(),a.material.uniforms.hologramColor.value=new s("#5e0fe0"),a.material.uniforms.scanlineSize.value=15,a.material.uniforms.signalSpeed.value=.18,l=e.group.getObjectByName("04-dongfangmingzhu_dongfangmingzhu_0"),l.name="东方明珠塔",l.material.dispose(),v(l.geometry),l.material=o.clone(),l.material.uniforms.scanlineSize.value=5,l.material.uniforms.signalSpeed.value=1.3,l.material.uniforms.hologramColor.value=new s("#e00f0f"),l.material.uniforms.fresnelOpacity.value=.1})();const{onLoop:x}=k();return x(()=>{o.update(),i.material.update(),a.material.update(),l.material.update()}),(n,t)=>null}}),Y=["object"],Z=S({__name:"buildingsMode",async setup(m){let e,c;R();const{scene:o}=([e,c]=P(()=>A("https://opensource-1314935952.cos.ap-nanjing.myqcloud.com/model/digitalCity/shanghaiDraco.gltf",{draco:!0,decoderPath:"./draco/"})),e=await e,c(),e),i=o.clone(),a=T(0),l=n=>{const{geometry:t}=n;t.computeBoundingBox(),t.computeBoundingSphere(),t.computeBoundsTree();const{max:C,min:f}=t.boundingBox,g=new q({baseMaterial:n.material,vertexShader:D,fragmentShader:F,silent:!0,uniforms:{uMax:{value:C},uMin:{value:f},uBorderWidth:{value:.006},uCircleTime:{value:3},uColor:{value:new s("#005c58")},uOpacity:{value:.8},uLightColor:{value:new s("#990")},uTopColor:{value:new s("#888800")},uTime:a,uGradient:{value:!0}},depthWrite:!0,depthTest:!0,transparent:!0,side:O});n.material.dispose(),n.material=g},b=n=>{const t=new V(n.geometry,1e3);let f=new L().fromEdgesGeometry(t);f.computeBoundsTree();let g=new I({color:new s("#000"),linewidth:.8,opacity:.6,transparent:!0,depthWrite:!0,depthTest:!0});g.resolution.set(window.innerWidth,window.innerHeight),n.add(new G(f,g))};i.traverse(async n=>{if(n.isMesh&&(n.name.indexOf("Shanghai")!==-1||n.name.indexOf("Object")!==-1)&&n.name.indexOf("Floor")===-1)if(n.name.indexOf("River")!==-1){const t=await $(n);t.position.set(0,0,1800),n.add(t)}else l(n),b(n)});const{onLoop:x}=k();return x(({delta:n})=>{a.value+=n}),(n,t)=>(d(),U(N,null,[(d(),p(w,null,{default:h(()=>[u("primitive",{object:y(i),position:[1,0,1],"cast-shadow":"","receive-shadow":""},null,8,Y)]),_:1})),_(K,{group:y(i)},null,8,["group"])],64))}}),Q=u("TresPerspectiveCamera",{position:[.5,2,1.5],fov:45,near:.1,far:1e5},null,-1),X=u("TresAmbientLight",{color:"#ffffff"},null,-1),ee=u("TresDirectionalLight",{position:[0,3,3],intensity:2,color:"#ffffff","cast-shadow":"","shadow-mapSize-width":1024,"shadow-mapSize-height":1024},null,-1),ne=u("TresGridHelper",{args:[6,10],position:[0,0,0]},null,-1),de=S({__name:"city2",setup(m){return(e,c)=>(d(),p(y(W),{shadows:"","window-size":"",clearColor:"#333"},{default:h(()=>[Q,_(y(E)),X,ee,(d(),p(w,null,{default:h(()=>[_(Z)]),_:1})),(d(),p(w,null,{default:h(()=>[_(H,{color:"#ffffff",radius:1,speed:1,geoJson:"plugins/digitalCity/geojson/secondarySmall.geojson",rotationY:1.3826597599330712,scale:.001025905404044292,position:[-1.877460474821603,.01,-1.5464791950519081]})]),_:1})),ne]),_:1}))}});export{de as default};
