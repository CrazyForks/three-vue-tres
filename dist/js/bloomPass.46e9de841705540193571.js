import{aL as S,aM as y,Z as _,aR as U,aS as C,a3 as E,o as P,v as w,J as m,aE as M,aT as T,aV as D,aW as F,aX as R,C as V,a7 as B,a as p,aa as Q,V as u}from"./vendor.7f17ebb61705540193571.js";import{P as L,F as N,R as g,E as k}from"./EffectComposer.3f7d0d6c1705540193571.js";import{U as z}from"./UnrealBloomPass.c72be45f1705540193571.js";const G={name:"FilmShader",uniforms:{tDiffuse:{value:null},time:{value:0},intensity:{value:.5},grayscale:{value:!1}},vertexShader:"\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vUv = uv;\n			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n		}",fragmentShader:"\n\n		#include <common>\n\n		uniform float intensity;\n		uniform bool grayscale;\n		uniform float time;\n\n		uniform sampler2D tDiffuse;\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vec4 base = texture2D( tDiffuse, vUv );\n\n			float noise = rand( fract( vUv + time ) );\n\n			vec3 color = base.rgb + base.rgb * clamp( 0.1 + noise, 0.0, 1.0 );\n\n			color = mix( base.rgb, color, intensity );\n\n			if ( grayscale ) {\n\n				color = vec3( luminance( color ) ); // assuming linear-srgb\n\n			}\n\n			gl_FragColor = vec4( color, base.a );\n\n		}"};class H extends L{constructor(e=.5,a=!1){super();const s=G;this.uniforms=S.clone(s.uniforms),this.material=new y({name:s.name,uniforms:this.uniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader}),this.uniforms.intensity.value=e,this.uniforms.grayscale.value=a,this.fsQuad=new N(this.material)}render(e,a,s,r){this.uniforms.tDiffuse.value=s.texture,this.uniforms.time.value+=r,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(a),this.clear&&e.clear(),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}const j=_({__name:"bloomPass",setup(f){const{camera:e,renderer:a,scene:s,sizes:r}=U(),c={threshold:0,strength:.972,radius:.21};let t=null;((o,i,d,h,v)=>{const n=new g(o,i),l=new z(new T(h,v),c.strength,c.radius,c.threshold);t=new k(d),t.addPass(n),t.addPass(l)})(s.value,e.value,a.value,r.width.value,r.height.value),((o,i,d,h,v)=>{let n=new D(new F(1,1,1),new R);n.position.set(0,2,-4),o.add(n);var l=new g(o,i);l.clear=!1,t.addPass(l);const x=new H;t.addPass(x)})(new C,e.value,a.value,r.width.value,r.height.value);const{onLoop:b}=E();return b(()=>{t&&t.render()}),(o,i)=>(P(),w(m(M),{args:[1,1,1],color:"orange",position:[3,2,1]}))}}),A=u("TresPerspectiveCamera",{position:[10,10,10]},null,-1),I=u("TresAmbientLight",{intensity:1},null,-1),J=u("TresGridHelper",{args:[10,10]},null,-1),K=_({__name:"bloomPass",setup(f){return(e,a)=>(P(),w(m(B),{disableRender:"","window-size":""},{default:V(()=>[A,I,p(m(Q)),J,p(j)]),_:1}))}});export{K as default};
