import{aR as k,a_ as T,a$ as y,b0 as P,aS as C,b1 as R,Z as b,k as f,a4 as U,ar as Q,a3 as G,o as B,c as V,V as s,D as z,aX as I,v as $,C as A,J as S,a7 as H,a as F,aa as L}from"./vendor.45c6b8731706673670030.js";import{P as W,F as M,R as j,E as p,S as J}from"./EffectComposer.f13db3b11706673670030.js";import{U as X}from"./UnrealBloomPass.84da3c6f1706673670030.js";import{F as Z}from"./FilmPass.078d57251706673670030.js";const q={name:"AfterimageShader",uniforms:{damp:{value:.96},tOld:{value:null},tNew:{value:null}},vertexShader:"\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vUv = uv;\n			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n		}",fragmentShader:"\n\n		uniform float damp;\n\n		uniform sampler2D tOld;\n		uniform sampler2D tNew;\n\n		varying vec2 vUv;\n\n		vec4 when_gt( vec4 x, float y ) {\n\n			return max( sign( x - y ), 0.0 );\n\n		}\n\n		void main() {\n\n			vec4 texelOld = texture2D( tOld, vUv );\n			vec4 texelNew = texture2D( tNew, vUv );\n\n			texelOld *= damp * when_gt( texelOld, 0.1 );\n\n			gl_FragColor = max(texelNew, texelOld);\n\n		}"};class K extends W{constructor(e=.96){super(),this.shader=q,this.uniforms=k.clone(this.shader.uniforms),this.uniforms.damp.value=e,this.textureComp=new T(window.innerWidth,window.innerHeight,{magFilter:y,type:P}),this.textureOld=new T(window.innerWidth,window.innerHeight,{magFilter:y,type:P}),this.compFsMaterial=new C({uniforms:this.uniforms,vertexShader:this.shader.vertexShader,fragmentShader:this.shader.fragmentShader}),this.compFsQuad=new M(this.compFsMaterial),this.copyFsMaterial=new R,this.copyFsQuad=new M(this.copyFsMaterial)}render(e,t,i){this.uniforms.tOld.value=this.textureOld.texture,this.uniforms.tNew.value=i.texture,e.setRenderTarget(this.textureComp),this.compFsQuad.render(e),this.copyFsQuad.material.map=this.textureComp.texture,this.renderToScreen?(e.setRenderTarget(null),this.copyFsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(),this.copyFsQuad.render(e));const c=this.textureOld;this.textureOld=this.textureComp,this.textureComp=c}setSize(e,t){this.textureComp.setSize(e,t),this.textureOld.setSize(e,t)}dispose(){this.textureComp.dispose(),this.textureOld.dispose(),this.compFsMaterial.dispose(),this.copyFsMaterial.dispose(),this.compFsQuad.dispose(),this.copyFsQuad.dispose()}}const Y=s("TresBoxGeometry",{args:[1,1,1]},null,-1),ee=s("TresMeshNormalMaterial",null,null,-1),se=[Y,ee],te=s("TresBoxGeometry",{args:[1,1,1]},null,-1),ae=s("TresMeshNormalMaterial",null,null,-1),re=[te,ae],oe=s("TresBoxGeometry",{args:[1,1,1]},null,-1),le=s("TresMeshNormalMaterial",null,null,-1),ie=[oe,le],ne=s("TresSphereGeometry",{args:[.8,32,16]},null,-1),ue=s("TresMeshNormalMaterial",null,null,-1),de=[ne,ue],ce=b({__name:"ecLayerMultiple",setup(_){const e=f(),t=f(),i=f(),c=f();U(()=>{e.value&&e.value.layers.set(0),t.value&&t.value.layers.set(1),i.value&&i.value.layers.set(2),c.value&&c.value.layers.set(3)});const{camera:o,renderer:n,scene:g,sizes:w}=Q(),x={strength:.572,radius:.51,threshold:0};let m=null,l=null;((a,r,v,O,E)=>{m=new j(a,r),l=new p(v),l.renderToScreen=!1,l.addPass(m);const N=new X(new I(O,E),x.strength,x.radius,x.threshold);l.addPass(N)})(g.value,o.value,n.value,w.width.value,w.height.value);let u=null;(a=>{u=new p(a),u.renderToScreen=!1,u.addPass(m);const r=new Z;u.addPass(r)})(n.value);let d=null;(a=>{d=new p(a),d.renderToScreen=!1,d.addPass(m);const r=new K;d.addPass(r)})(n.value);let h=null;(a=>{h=new p(a),h.addPass(m);const r=new C({uniforms:{baseTexture:{value:null},bloomTexture:{value:l.renderTarget2.texture},filmTexture:{value:u.renderTarget2.texture},glitchTexture:{value:d.renderTarget2.texture}},vertexShader:"\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }\n        ",fragmentShader:"\n            uniform sampler2D baseTexture;\n            uniform sampler2D bloomTexture;\n						uniform sampler2D filmTexture;\n						uniform sampler2D glitchTexture;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = ( \n									vec4( 1.0 ) * texture2D( baseTexture, vUv )  + \n									vec4( 1.0 ) * texture2D( bloomTexture, vUv ) + \n									vec4( 1.0 ) * texture2D( filmTexture, vUv ) + \n									vec4( 1.0 ) * texture2D( glitchTexture, vUv ) \n								);\n            }\n        ",defines:{}}),v=new J(r,"baseTexture");v.needsSwap=!0,h.addPass(v)})(n.value);const{onLoop:D}=G();return D(()=>{l&&h&&o.value&&(n.value.clear(),o.value.layers.set(1),l.render(),o.value.layers.set(2),u.render(),o.value.layers.set(3),d.render(),n.value.clearDepth(),o.value.layers.set(0),h.render(g.value,o.value))}),(a,r)=>(B(),V(z,null,[s("TresMesh",{ref_key:"normalBox",ref:e,position:[3,2,1]},se,512),s("TresMesh",{ref_key:"shineBox",ref:t,position:[0,2,-4]},re,512),s("TresMesh",{ref_key:"filmBox",ref:i,position:[1,2,3]},ie,512),s("TresMesh",{ref_key:"glitchSphere",ref:c,position:[-3,2,0]},de,512)],64))}}),me=s("TresPerspectiveCamera",{position:[10,10,10]},null,-1),he=s("TresAmbientLight",{intensity:1},null,-1),fe=s("TresGridHelper",{args:[10,10]},null,-1),Pe=b({__name:"effectComposerMultiple",setup(_){const e=f();return U(()=>{if(e.value){let t=e.value.context.renderer.value;t.autoClear=!1}}),(t,i)=>(B(),$(S(H),{disableRender:"","window-size":"",ref_key:"tcRef",ref:e},{default:A(()=>[me,he,F(S(L)),fe,F(ce)]),_:1},512))}});export{Pe as default};
