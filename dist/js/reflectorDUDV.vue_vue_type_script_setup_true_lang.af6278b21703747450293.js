import{bj as p,bk as x,bl as M,a_ as g,bm as w,Z as b,bn as y,aB as h,aQ as R,b6 as v,aX as _,b8 as C,a4 as T,w as B,o as U,c as E,V as m,J as f,D as P}from"./vendor.bb7c097e1703747450293.js";import{d as j}from"./dither.glsl.1a24d3091703747450293.js";import{R as D}from"./OimoPhysicsBuffer.c5bd5d1c1703747450293.js";const F="\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat3 uMapTransform;\nuniform mat4 uMatrix;\n\nout vec2 vUv;\nout vec4 vCoord;\nout vec3 vNormal;\nout vec3 vToEye;\n\nvoid main() {\n    vUv = (uMapTransform * vec3(uv, 1.0)).xy;\n    vCoord = uMatrix * vec4(position, 1.0);\n    vNormal = normalMatrix * normal;\n\n    vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n    vToEye = cameraPosition - worldPosition.xyz;\n\n    vec4 mvPosition = viewMatrix * worldPosition;\n    gl_Position = projectionMatrix * mvPosition;\n}\n",G="\nprecision highp float;\n\nuniform sampler2D tMap;\nuniform sampler2D tReflect;\nuniform sampler2D tReflectBlur;\nuniform float uReflectivity;\n\nin vec2 vUv;\nin vec4 vCoord;\nin vec3 vNormal;\nin vec3 vToEye;\n\nout vec4 FragColor;\n\n".concat(j,"\n\nvoid main() {\n    vec2 reflectionUv = vCoord.xy / vCoord.w;\n\n    vec4 dudv = texture(tMap, vUv);\n    vec4 color = texture(tReflect, reflectionUv);\n\n    vec4 blur;\n\n    blur = texture(tReflectBlur, reflectionUv + dudv.rg / 256.0);\n    color = mix(color, blur, smoothstep(1.0, 0.1, dudv.g));\n\n    blur = texture(tReflectBlur, reflectionUv);\n    color = mix(color, blur, smoothstep(0.5, 1.0, dudv.r));\n\n    FragColor = color * mix(0.6, 0.75, dudv.g);\n\n    // Fresnel term\n    vec3 toEye = normalize(vToEye);\n    float theta = max(dot(toEye, vNormal), 0.0);\n    float reflectance = uReflectivity + (1.0 - uReflectivity) * pow((1.0 - theta), 5.0);\n\n    FragColor = mix(vec4(0), FragColor, reflectance);\n\n    #ifdef DITHERING\n        FragColor.rgb = dither(FragColor.rgb);\n    #endif\n\n    FragColor.a = 1.0;\n}\n");class N extends p{constructor({map:e=null,reflectivity:a=0,dithering:t=!1}={}){const r={glslVersion:x,defines:{DITHERING:t},uniforms:{tMap:{value:null},tReflect:{value:null},tReflectBlur:{value:null},uMapTransform:{value:new M},uMatrix:{value:new g},uReflectivity:{value:a}},vertexShader:F,fragmentShader:G,blending:w};e&&(e.updateMatrix(),r.uniforms=Object.assign(r.uniforms,{tMap:{value:e},uMapTransform:{value:e.matrix}})),super(r)}}const H=["object"],I=["object"],z=b({__name:"reflectorDUDV",props:{reflectivity:{default:.8},showGridHelper:{type:Boolean,default:!0}},async setup(s){let e,a;const t=s,r=new D,c=new y(9.5,10);c.visible=t.showGridHelper;const{map:l}=([e,a]=h(()=>R({map:"./plugins/floor/image/waterdudv.jpg"})),e=await e,a(),e);l.wrapS=v,l.wrapT=v,l.repeat.set(6,3);const i=new N({map:l,reflectivity:t.reflectivity});i.uniforms.tReflect={value:r.renderTarget.texture},i.uniforms.tReflectBlur=r.renderTargetUniform,i.uniforms.uMatrix=r.textureMatrixUniform;const o=new _(new C(10,10),i);return o.rotation.x=-Math.PI/2,o.add(r),o.onBeforeRender=(n,u,d)=>{o.visible=!1,r.update(n,u,d),o.visible=!0},T(()=>{t.reflectivity&&(i.uniforms.uReflectivity.value=t.reflectivity)}),B(()=>t.showGridHelper,n=>{c.visible=n}),(n,u)=>(U(),E(P,null,[m("primitive",{object:f(o),"position-y":-.01},null,8,H),m("primitive",{object:f(c)},null,8,I)],64))}});export{z as _};
