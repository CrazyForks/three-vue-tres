import{$ as w,bu as k,k as d,aD as B,bd as R,bk as x,az as h,aH as D,a5 as z,w as E,o as g,c as j,W as o,a7 as H,K as c,E as P,a0 as G,aq as N,v as C,D as M,a8 as U,a as v,ab as $,I,cq as V,a$ as F,ag as q,a9 as A,aa as L}from"./vendor.TqTi2h0x1710902596316.js";import{R as O}from"./OimoPhysicsBuffer.eIIi-lIM1710902596316.js";const W=e=>{e.vertexShader=e.vertexShader.replace("void main() {","\n		uniform mat4 textureMatrix;\n		out vec4 vCoord;\n		out vec3 vToEye;\n\n		void main() {\n		"),e.vertexShader=e.vertexShader.replace("#include <project_vertex>","\n		#include <project_vertex>\n\n		vCoord = textureMatrix * vec4(transformed, 1.0);\n		vToEye = cameraPosition - (modelMatrix * vec4(transformed, 1.0)).xyz;\n		")},K=e=>{e.fragmentShader=e.fragmentShader.replace("void main() {","\n		uniform sampler2D reflectMap;\n		uniform float mirror;\n		uniform float mixStrength;\n		in vec4 vCoord;\n		in vec3 vToEye;\n\n		void main() {\n		"),e.fragmentShader=e.fragmentShader.replace("#include <emissivemap_fragment>","\n		#include <emissivemap_fragment>\n\n		vec4 normalColor = texture2D(normalMap, vNormalMapUv * normalScale);\n		vec3 reflectNormal = normalize(vec3(normalColor.r * 2.0 - 1.0, normalColor.b, normalColor.g * 2.0 - 1.0));\n		vec3 reflectCoord = vCoord.xyz / vCoord.w;\n		vec2 reflectUv = reflectCoord.xy + reflectCoord.z * reflectNormal.xz * 0.05;\n		vec4 reflectColor = texture2D(reflectMap, reflectUv);\n\n		// Fresnel term\n		vec3 toEye = normalize(vToEye);\n		float theta = max(dot(toEye, normal), 0.0);\n		float reflectance = pow((1.0 - theta), 5.0);\n\n		reflectColor = mix(vec4(0), reflectColor, reflectance);\n\n		diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + reflectColor.rgb * mixStrength);\n		")},J=["rotation-x"],Q=["object"],X=w({__name:"reflectorDiffuse",props:{mirror:{default:1},mixStrength:{default:10},showGridHelper:{type:Boolean,default:!0},color:{default:"#ffffff"}},async setup(e){let t,i;const n=e,u=new k(9.5,10),m=d(),f=d(),l=d(),p=new O,y={mirror:{value:n.mirror},mixStrength:{value:n.mixStrength}},a=([t,i]=B(()=>R(["./plugins/floor/image/polished_concrete_basecolor.jpg","./plugins/floor/image/polished_concrete_normal.jpg","./plugins/floor/image/polished_concrete_orm.jpg"])),t=await t,i(),t);for(var s=0;s<3;s++)a[s].wrapS=x,a[s].wrapT=x,a[s].repeat.set(16,16);const S={color:new h("#444"),metalness:1,roughness:1,map:a[0],metalnessMap:a[2],roughnessMap:a[2],aoMap:a[2],aoMapIntensity:1,normalMap:a[1],normalScale:new D(3,3)},b=r=>{r.uniforms.reflectMap=p.renderTargetUniform,r.uniforms.textureMatrix=p.textureMatrixUniform,r.uniforms=Object.assign(r.uniforms,y),W(r),K(r)};return z(()=>{m.value&&(m.value.attributes.uv1=m.value.attributes.uv),l.value&&(l.value.aoMap.channel=1,l.value.onBeforeCompile=b),f.value&&(f.value.add(p),f.value.onBeforeRender=(r,_,T)=>{p.update(r,_,T)}),n.color&&l.value&&(l.value.color=new h(n.color))}),E(()=>n.showGridHelper,r=>{u.visible=r}),(r,_)=>(g(),j(P,null,[o("TresMesh",{ref_key:"tmRef",ref:f,"rotation-x":-Math.PI/2,"position-y":-.1},[o("TresPlaneGeometry",{ref_key:"tpgRef",ref:m,args:[10,10]},null,512),o("TresMeshStandardMaterial",H({ref_key:"tmsmRef",ref:l},S),null,16)],8,J),o("primitive",{object:c(u)},null,8,Q)],64))}}),Y=o("TresPerspectiveCamera",{position:[-15,15,-15],fov:45,near:.1,far:1e4,"look-at":[0,0,0]},null,-1),Z=o("TresAmbientLight",{intensity:10},null,-1),ee={position:[0,8,0],intensity:10,color:"#fff"},re=o("TresMesh",{position:[0,2,4]},[o("TresBoxGeometry",{args:[1,1,1]}),o("TresMeshNormalMaterial")],-1),ae=w({__name:"reflectorDiffuse",setup(e){const t=G({mirror:.9,mixStrength:9,showGridHelper:!0,color:"#69a5c2"}),i=new N({title:"镜面参数",expanded:!0});return i.addBinding(t,"color",{label:"镜面颜色"}),i.addBinding(t,"showGridHelper",{label:"显示网格"}),(n,u)=>(g(),C(c(U),{clearColor:"#201919","window-size":""},{default:M(()=>[Y,v(c($),{enableDamping:""}),Z,I(o("TresDirectionalLight",ee,null,512),[[c(V)]]),v(c(F),{args:[1,1,1],color:"orange",position:[3,1,0]}),re,(g(),C(q,null,{default:M(()=>[v(X,A(L(t)),null,16)]),_:1}))]),_:1}))}});export{ae as default};
