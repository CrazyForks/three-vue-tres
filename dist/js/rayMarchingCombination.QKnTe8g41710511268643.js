import{$ as p,a4 as u,b1 as y,aE as s,a5 as q,o as d,c as g,W as n,a9 as v,aa as x,a6 as z,v as w,D as b,a7 as M,K as m,a8 as D,a as f,ab as L}from"./vendor.St8dZPm41710511268643.js";const P="varying vec2 vUv;\nvoid main(){\n	gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n	vUv=uv;\n}",T="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec3 u_mouse;\nuniform float u_time;\nvarying vec2 vUv;\nfloat sphere(vec3 p,float d){\n  return(length(p*2.)-d)/2.;\n}\n\nfloat sdPyramid(vec3 p,float h)\n{\n  float m2=h*h+.25;\n  \n  p.xz=abs(p.xz);\n  p.xz=(p.z>p.x)?p.zx:p.xz;\n  p.xz-=.5;\n  \n  vec3 q=vec3(p.z,h*p.y-.5*p.x,h*p.x+.5*p.y);\n  \n  float s=max(-q.x,0.);\n  float t=clamp((q.y-.5*p.z)/(m2+.25),0.,1.);\n  \n  float a=m2*(q.x+s)*(q.x+s)+q.y*q.y;\n  float b=m2*(q.x+.5*t)*(q.x+.5*t)+(q.y-m2*t)*(q.y-m2*t);\n  \n  float d2=min(q.y,-q.x*m2-q.y*.5)>0.?0.:min(a,b);\n  \n  return sqrt((d2+q.z*q.z)/m2)*sign(max(q.z,-p.y));\n}\nfloat sdBoxFrame(vec3 p,vec3 b,float e)\n{\n  p=abs(p)-b;\n  vec3 q=abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.))+min(max(p.x,max(q.y,q.z)),0.),\n      length(max(vec3(q.x,p.y,q.z),0.))+min(max(q.x,max(p.y,q.z)),0.)),\n      length(max(vec3(q.x,q.y,p.z),0.))+min(max(q.x,max(q.y,p.z)),0.));\n    }\n    mat2 rot2D(float angle){\n      float s=sin(angle);\n      float c=cos(angle);\n      return mat2(c,-s,s,c);\n    }\n    float map(vec3 p){\n      // p.xy*=rot2D(u_time);\n      vec3 pos=vec3(sin(u_time*10.),0.,0.);\n      float spheresdf=sphere(p,.5);\n      float BoxFramesdf=sdBoxFrame(p,vec3(.5,.3,.5),.025);\n      float entity=min(BoxFramesdf,spheresdf);\n      entity=min(sdPyramid(-p-vec3(1.,0.,0.),1.5),entity);\n      return entity;\n    }\n    \n    void main(){\n      vec3 ro=vec3(0.,0.,-4.);//起始位置\n      vec3 rd=normalize(vec3(vUv-.5,1.));//方向\n      // horizontal camera rotation\n      \n      ro.xz*=rot2D(-u_mouse.x*.001);\n      rd.xz*=rot2D(-u_mouse.x*.001);\n      ro.xy*=rot2D(-u_mouse.y*.001);\n      rd.xy*=rot2D(-u_mouse.y*.001);\n      float t=0.;\n      vec3 color=vec3(0.);\n      for(int i=0;i<80;i++){\n        vec3 p=ro+rd*t;\n        float d=map(p);\n        t+=d;\n        //优化效率\n        if(t>100.||d<.001){\n          break;\n        }\n        \n      }\n      color=vec3(t)*.2;\n      gl_FragColor=vec4(color,1.);\n      \n    }",B=["rotation"],C={ref:"TresTubeGeometryRef",args:[1e3,1e3]},F=p({__name:"rayMarchingMaterialCombination",setup(_){const{onLoop:o,onAfterLoop:a}=u(),e={transparent:!0,depthWrite:!0,depthTest:!0,side:y,vertexShader:P,fragmentShader:T,uniforms:{u_resolution:{value:new s(window.innerWidth,window.innerHeight)},u_mouse:{value:new s(0,0)},u_time:{value:0}}},r=window.innerWidth/2,i=window.innerHeight/2;let c=0,l=0;function h(t){c=t.clientX-r,l=t.clientY-i}return document.addEventListener("mousemove",h,!1),q(()=>{}),o(({elapsed:t})=>{e.uniforms.u_time.value+=.001,e.uniforms.u_mouse.value=new s(c,l)}),a(()=>{}),(t,V)=>(d(),g("TresMesh",{ref:"MeshRef",rotation:[Math.PI/2,0,0]},[n("TresPlaneGeometry",C,null,512),n("TresShaderMaterial",v(x(e)),null,16)],8,B))}}),S={ref:"perspectiveCameraRef",position:[0,1500,0],fov:45,near:1,far:1e4},E=n("TresAmbientLight",{color:"#ffffff"},null,-1),R=n("TresDirectionalLight",{position:[100,100,0],intensity:.5,color:"#ffffff"},null,-1),H=p({__name:"rayMarchingCombination",setup(_){const o={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0},a={autoRotate:!1,enableDamping:!0},{onLoop:e}=u();return e(({delta:r})=>{}),z(()=>{}),(r,i)=>(d(),w(m(D),M(o,{"window-size":""}),{default:b(()=>[n("TresPerspectiveCamera",S,null,512),f(m(L),v(x(a)),null,16),E,R,f(F)]),_:1},16))}});export{H as default};
