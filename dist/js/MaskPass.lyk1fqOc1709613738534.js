import{aT as U,aU as k,aV as B,aD as t,aW as L,aX as R,aY as E,$ as y,ak as G,a5 as I,a4 as W,o as w,v as P,K as h,aM as Q,au as V,aZ as X,a_ as H,at as N,ar as $,a$ as A,D as j,a8 as K,a as _,ab as Y,W as c}from"./vendor.briXmWCi1709613738534.js";import{P as Z,F as q,C as J,E as O,R as x,M as z,S as ee,a as se}from"./EffectComposer.fCfeNZhv1709613738534.js";import{U as ae}from"./UnrealBloomPass.tywpNhIw1709613738534.js";const te={uniforms:{tDiffuse:{value:null},tDisp:{value:null},byp:{value:0},amount:{value:.08},angle:{value:.02},seed:{value:.02},seed_x:{value:.02},seed_y:{value:.02},distortion_x:{value:.5},distortion_y:{value:.6},col_s:{value:.05}},vertexShader:"\n\n		varying vec2 vUv;\n		void main() {\n			vUv = uv;\n			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n		}",fragmentShader:"\n\n		uniform int byp; //should we apply the glitch ?\n\n		uniform sampler2D tDiffuse;\n		uniform sampler2D tDisp;\n\n		uniform float amount;\n		uniform float angle;\n		uniform float seed;\n		uniform float seed_x;\n		uniform float seed_y;\n		uniform float distortion_x;\n		uniform float distortion_y;\n		uniform float col_s;\n\n		varying vec2 vUv;\n\n\n		float rand(vec2 co){\n			return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n		}\n\n		void main() {\n			if(byp<1) {\n				vec2 p = vUv;\n				float xs = floor(gl_FragCoord.x / 0.5);\n				float ys = floor(gl_FragCoord.y / 0.5);\n				//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n				float disp = texture2D(tDisp, p*seed*seed).r;\n				if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n					if(seed_x>0.){\n						p.y = 1. - (p.y + distortion_y);\n					}\n					else {\n						p.y = distortion_y;\n					}\n				}\n				if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n					if(seed_y>0.){\n						p.x=distortion_x;\n					}\n					else {\n						p.x = 1. - (p.x + distortion_x);\n					}\n				}\n				p.x+=disp*seed_x*(seed/5.);\n				p.y+=disp*seed_y*(seed/5.);\n				//base from RGB shift shader\n				vec2 offset = amount * vec2( cos(angle), sin(angle));\n				vec4 cr = texture2D(tDiffuse, p + offset);\n				vec4 cga = texture2D(tDiffuse, p);\n				vec4 cb = texture2D(tDiffuse, p - offset);\n				gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n				//add noise\n				vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\n				gl_FragColor = gl_FragColor+ snow;\n			}\n			else {\n				gl_FragColor=texture2D (tDiffuse, vUv);\n			}\n		}"};class re extends Z{constructor(e=64){super();const a=te;this.uniforms=U.clone(a.uniforms),this.heightMap=this.generateHeightmap(e),this.uniforms.tDisp.value=this.heightMap,this.material=new k({uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader}),this.fsQuad=new q(this.material),this.goWild=!1,this.curF=0,this.generateTrigger()}render(e,a,i){e.capabilities.isWebGL2===!1&&(this.uniforms.tDisp.value.format=B),this.uniforms.tDiffuse.value=i.texture,this.uniforms.seed.value=Math.random(),this.uniforms.byp.value=0,this.curF%this.randX==0||this.goWild==!0?(this.uniforms.amount.value=Math.random()/30,this.uniforms.angle.value=t.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=t.randFloat(-1,1),this.uniforms.seed_y.value=t.randFloat(-1,1),this.uniforms.distortion_x.value=t.randFloat(0,1),this.uniforms.distortion_y.value=t.randFloat(0,1),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5?(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=t.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=t.randFloat(0,1),this.uniforms.distortion_y.value=t.randFloat(0,1),this.uniforms.seed_x.value=t.randFloat(-.3,.3),this.uniforms.seed_y.value=t.randFloat(-.3,.3)):this.goWild==!1&&(this.uniforms.byp.value=1),this.curF++,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(a),this.clear&&e.clear(),this.fsQuad.render(e))}generateTrigger(){this.randX=t.randInt(120,240)}generateHeightmap(e){const a=new Float32Array(e*e),i=e*e;for(let o=0;o<i;o++){const s=t.randFloat(0,1);a[o]=s}const d=new L(a,e,e,R,E);return d.needsUpdate=!0,d}dispose(){this.material.dispose(),this.heightMap.dispose(),this.fsQuad.dispose()}}const oe=y({__name:"MaskPass",setup(m){const e=new J,{camera:a,renderer:i,scene:d,sizes:o}=G();let s=null;const f={threshold:0,strength:.972,radius:.21},F=(r,n,C,v,p)=>{const l=new x(r,n);s.addPass(l);const u=new ae(new X(v,p),f.strength,f.radius,f.threshold);s.addPass(u)},D=(r,n,C,v,p)=>{const l=new H(16777215);l.position.set(550,100,550),l.intensity=1.6,r.add(l);let u=new N(new $(1,1,1),new A);u.position.set(1,2,4),r.add(u);var g=new x(r,n);g.clear=!1,s.addPass(g);const S=new z(r,n);s.addPass(S);const T=new re;s.addPass(T),s.addPass(e)},M=()=>{const r=new ee(se);r.renderToScreen=!0,s.addPass(r)};I(()=>{o.width.value&&!s&&(s=new O(i.value),s.renderTarget1.stencilBuffer=!0,s.renderTarget2.stencilBuffer=!0,F(d.value,a.value,i.value,o.width.value,o.height.value),D(new V,a.value,i.value,o.width.value,o.height.value),M())});const{onLoop:b}=W();return b(()=>{s&&(i.value.autoClear=!1,s.render())}),(r,n)=>(w(),P(h(Q),{args:[1,1,1],color:"orange",position:[3,2,1]}))}}),ie=c("TresPerspectiveCamera",{position:[10,10,10]},null,-1),ne=c("TresAmbientLight",{intensity:1},null,-1),le=c("TresGridHelper",{args:[10,10]},null,-1),he=y({__name:"MaskPass",setup(m){return(e,a)=>(w(),P(h(K),{disableRender:"","window-size":""},{default:j(()=>[ie,ne,_(h(Y)),le,_(oe)]),_:1}))}});export{he as default};
