import{aD as z,bd as K,k as q,a5 as Q,o as r,c as i,E as x,G as U,v as B,D as b,X as o,t as W,a7 as j,K as w,al as Z,Y as f,bO as ee,ap as te,au as D,aw as oe,az as se,bp as ne,b3 as re,c5 as ae,a0 as ie,a1 as G,r as pe,a as O,a9 as ce,aa as le,ab as de,ag as ue}from"./vendor.Vvui1c2y1711593224078.js";import{l as he}from"./utils.Xf09ub3r1711593224078.js";import{c as _e,d as fe,a as me}from"./ExtensionUtilities.jYZ0LRaQ1711593224078.js";import{m as ye}from"./mercator.ciCk-WjI1711593224078.js";import"./Water2.xE9pWeoC1711593224078.js";import"./Reflector.cT6L98An1711593224078.js";const ge=["position"],Te=["blending","map"],ve=["name","renderOrder"],Me=["args"],xe=["color","side"],Be=["renderOrder","position-z"],be=["position"],we=o("TresLineBasicMaterial",{color:16777215,linewidth:.5},null,-1),Se=["renderOrder"],Ce=["position"],Le=o("TresLineBasicMaterial",{color:0,linewidth:.5},null,-1),ke={__name:"jiangSuMapMesh",async setup(A){let s,a;(()=>{D.prototype.computeBoundsTree=_e,D.prototype.disposeBoundsTree=fe,oe.prototype.raycast=me})();const m=([s,a]=z(()=>he("./plugins/simpleGIS/json/320000_full.json","features")),s=await s,a(),s),{map:y}=([s,a]=z(()=>K({map:"./plugins/simpleGIS/image/icon.png"})),s=await s,a(),s),I=m[0].properties.centroid,p=ye();p.center(I).translate([0,0]);const c=[];(()=>{m.forEach(t=>{const g=new se("hsl( 16, ".concat(Math.random()*30+55,"%, ").concat(Math.random()*30+55,"%)")).getHex(),e=Math.random()*.3+.3,{centroid:n,oneCenter:X,center:Y,name:S}=t.properties,{coordinates:J,type:C}=t.geometry,L=n||X||Y||[0,0],d=p(L);d[1]=-d[1],d[2]=e,c.push({type:"Html",position:d,name:S});const u=p(L);u[1]=-u[1]+.2,u[2]=e+.22,c.push({type:"Sprite",position:u}),J.forEach(k=>{function E(h){const T=new ae;h.forEach((v,M)=>{const[_,$]=p(v);M===0?T.moveTo(_,-$):T.lineTo(_,-$)}),c.push({type:"Shape",shape:T,name:S,color:g,depth:e});const P=[];h.forEach(v=>{const[M,_]=p(v);P.push(M,-_,0)}),c.push({type:"Line",points:new Float32Array(P),depth:e})}C==="MultiPolygon"&&k.forEach(h=>E(h)),C==="Polygon"&&E(k)})})})();const N=t=>{t.rotation.x=-Math.PI/2;const e=new ne().setFromObject(t).getCenter(new re),n=[0,0];t.position.x=t.position.x-e.x-n[0],t.position.z=t.position.z-e.z-n[1]},l=q();Q(()=>{l.value&&(N(l.value),l.value.children.forEach(t=>{t.type==="Mesh"&&t.geometry.computeBoundsTree()}))});const R=t=>{t.object.material.opacity=.4},V=t=>{t.material.opacity=1},H={wrapperClass:"wrapper",as:"div",center:!0,sprite:!0,prepend:!0,transform:!0};return(t,g)=>(r(),i("TresGroup",{ref_key:"tgRef",ref:l},[(r(),i(x,null,U(c,(e,n)=>(r(),i(x,{key:"".concat(n)},[e.type==="Html"?(r(),B(w(Z),j({key:0},H,{position:e.position}),{default:b(()=>[o("span",null,W(e.name),1)]),_:2},1040,["position"])):f("",!0),e.type==="Sprite"?(r(),i("TresSprite",{key:1,position:e.position,scale:.3,renderOrder:1e3},[o("TresSpriteMaterial",{color:16711680,blending:ee,map:w(y)},null,8,Te)],8,ge)):f("",!0),e.type==="Shape"?(r(),i("TresMesh",{key:2,name:e.name,renderOrder:n,onPointerEnter:R,onPointerLeave:V},[o("TresExtrudeGeometry",{args:[e.shape,{depth:e.depth,bevelEnabled:!1}]},null,8,Me),o("TresMeshStandardMaterial",{color:e.color,emissive:0,roughness:.45,metalness:.8,transparent:!0,side:te},null,8,xe)],40,ve)):f("",!0),e.type==="Line"?(r(),i(x,{key:3},[o("TresLine",{renderOrder:n,"position-z":e.depth+1e-4},[o("TresBufferGeometry",{position:[e.points,3]},null,8,be),we],8,Be),o("TresLine",{renderOrder:n,"position-z":-1e-4},[o("TresBufferGeometry",{position:[e.points,3]},null,8,Ce),Le],8,Se)],64)):f("",!0)],64))),64))],512))}},Ee=o("TresPerspectiveCamera",{position:[0,12,0],fov:75,near:.1,far:1e3},null,-1),Pe=o("TresAmbientLight",{intensity:8.8},null,-1),$e=o("TresDirectionalLight",{position:[0,10,5],intensity:.2},null,-1),ze=o("TresDirectionalLight",{position:[0,10,-5],intensity:.2},null,-1),De=o("TresDirectionalLight",{position:[5,10,0],intensity:.2},null,-1),Ge=o("TresDirectionalLight",{position:[-5,10,0],intensity:.2},null,-1),Ve=ie({__name:"jiangSuMap",setup(A){const s=G({clearColor:"#ffdbd1",alpha:!0,antialias:!0}),a=G({enableDamping:!0,dampingFactor:.05});return(F,m)=>{const y=pe("TresCanvas");return r(),B(y,j(s,{"window-size":""}),{default:b(()=>[Ee,O(w(de),ce(le(a)),null,16),Pe,$e,ze,De,Ge,(r(),B(ue,null,{default:b(()=>[O(ke)]),_:1}))]),_:1},16)}}});export{Ve as default};
