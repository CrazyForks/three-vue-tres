import{Z as D,ar as N,ai as M,b8 as b,a3 as F,a_ as A,aX as B,o as n,c as U,V as e,J as r,aP as d,D as k,b_ as m,ck as L,v as p,C as h,a6 as G,a7 as V,a as _,aa as z,ah as $}from"./vendor.45c6b8731706673670030.js";import{E as I,R as j,S as g}from"./EffectComposer.f13db3b11706673670030.js";const W=["side","rotation-x"],X=e("TresBoxGeometry",{args:[400,400,400]},null,-1),H=e("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1),J=[X,H],Z=["side"],q=e("TresSphereGeometry",{args:[50,32,32]},null,-1),K=e("TresMeshPhongMaterial",{color:"#ffffff",shininess:0},null,-1),O=[q,K],x="\n    varying vec2 vUv;\n    void main() {\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vUv = uv;\n    }\n",Q="\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tShadow;\n    uniform vec2 iResolution;\n\n    varying vec2 vUv;\n    #define Sensitivity (vec2(0.3, 1.5) * iResolution.y / 400.0)\n    float checkSame(vec4 center, vec4 samplef)\n    {\n        vec2 centerNormal = center.xy;\n        float centerDepth = center.z;\n        vec2 sampleNormal = samplef.xy;\n        float sampleDepth = samplef.z;\n\n        vec2 diffNormal = abs(centerNormal - sampleNormal) * Sensitivity.x;\n        bool isSameNormal = (diffNormal.x + diffNormal.y) < 0.1;\n        float diffDepth = abs(centerDepth - sampleDepth) * Sensitivity.y;\n        bool isSameDepth = diffDepth < 0.1;\n\n        return (isSameNormal && isSameDepth) ? 1.0 : 0.0;\n    }\n\n    void main( )\n    {\n        vec4 sample0 = texture2D(tDiffuse, vUv);\n        vec4 sample1 = texture2D(tDiffuse, vUv + (vec2(1.0, 1.0) / iResolution.xy));\n        vec4 sample2 = texture2D(tDiffuse, vUv + (vec2(-1.0, -1.0) / iResolution.xy));\n        vec4 sample3 = texture2D(tDiffuse, vUv + (vec2(-1.0, 1.0) / iResolution.xy));\n        vec4 sample4 = texture2D(tDiffuse, vUv + (vec2(1.0, -1.0) / iResolution.xy));\n\n        float edge = checkSame(sample1, sample2) * checkSame(sample3, sample4);\n\n        // gl_FragColor = vec4(edge, sample0.w, 1.0, 1.0);\n        float shadow = texture2D(tShadow, vUv).x;\n        gl_FragColor = vec4(edge, shadow, 1.0, 1.0);\n\n    }\n",Y="\nuniform sampler2D tDiffuse;\nuniform sampler2D tNoise;\nuniform float iTime;\n\nvarying vec2 vUv;\n\n#define EdgeColor vec4(0.2, 0.2, 0.15, 1.0)\n#define BackgroundColor vec4(1,0.95,0.85,1)\n#define NoiseAmount 0.01\n#define ErrorPeriod 30.0\n#define ErrorRange 0.003\n\n// Reference: https://www.shadertoy.com/view/MsSGD1\nfloat triangle(float x)\n{\n    return abs(1.0 - mod(abs(x), 2.0)) * 2.0 - 1.0;\n}\n\nfloat rand(float x)\n{\n    return fract(sin(x) * 43758.5453);\n}\n\nvoid main()\n{\n    float time = floor(iTime * 16.0) / 16.0;\n    vec2 uv = vUv;\n    uv += vec2(triangle(uv.y * rand(time) * 1.0) * rand(time * 1.9) * 0.005,\n            triangle(uv.x * rand(time * 3.4) * 1.0) * rand(time * 2.1) * 0.005);\n\n    float noise = (texture2D(tNoise, uv * 0.5).r - 0.5) * NoiseAmount;\n    vec2 uvs[3];\n    uvs[0] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 0.0) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 0.0) + noise);\n    uvs[1] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 1.047) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 3.142) + noise);\n    uvs[2] = uv + vec2(ErrorRange * sin(ErrorPeriod * uv.y + 2.094) + noise, ErrorRange * sin(ErrorPeriod * uv.x + 1.571) + noise);\n\n    float edge = texture2D(tDiffuse, uvs[0]).r * texture2D(tDiffuse, uvs[1]).r * texture2D(tDiffuse, uvs[2]).r;\n    float diffuse = texture2D(tDiffuse, uv).g;\n\n    float w = fwidth(diffuse) * 2.0;\n    vec4 mCol = mix(BackgroundColor * 0.5, BackgroundColor, mix(0.0, 1.0, smoothstep(-w, w, diffuse - 0.3)));\n    gl_FragColor = mix(EdgeColor, mCol, edge);\n}\n",ee=D({__name:"noiseContour",async setup(w){let o,a;const{camera:i,renderer:l,scene:f,sizes:re}=N(),y=([o,a]=M(()=>b({map:"./plugins/shadertoyToThreejs/image/noise.png"})),o=await o,a(),o),{onLoop:S,onAfterLoop:R}=F(),E={minFilter:m,magFilter:m,format:L,stencilBuffer:!1},u=new A(1,1,E),P=new B(window.innerWidth,window.innerHeight),C={uniforms:{tDiffuse:{type:"t",value:null},tShadow:{type:"t",value:null},iResolution:{type:"v2",value:P}},vertexShader:x,fragmentShader:Q},s=new I(l.value);s.addPass(new j(f.value,i.value));const c=new g(C);s.addPass(c);const T={uniforms:{tDiffuse:{type:"t",value:null},iTime:{type:"f",value:0},tNoise:{type:"t",value:y}},vertexShader:x,fragmentShader:Y},t=new g(T);return t.renderToScreen=!0,t.material.extensions.derivatives=!0,s.addPass(t),S(({elapsed:v})=>{l.value.render(f.value,i.value,u),c.uniforms.tShadow.value=u.texture,t.uniforms.iTime.value=v}),R(()=>{s.render()}),(v,ae)=>(n(),U(k,null,[e("TresMesh",{ref:"noiseContourMeshRef2",side:r(d),position:[400,100,0],"rotation-x":2*Math.PI/360*90,"cast-shadow":""},J,8,W),e("TresMesh",{ref:"noiseContourMeshRef1",side:r(d),position:[0,150,0],"cast-shadow":""},O,8,Z)],64))}}),oe={ref:"perspectiveCameraRef",position:[600,750,-1221],fov:45,near:1,far:1e4},se=e("TresAmbientLight",{color:"#ffffff"},null,-1),te=e("TresDirectionalLight",{position:[400,400,400],intensity:1,color:"red"},null,-1),le=D({__name:"noiseContourPage",setup(w){const o={clearColor:"#000000",shadows:!0,alpha:!1,useLegacyLights:!0};return(a,i)=>(n(),p(r(V),G(o,{"window-size":""}),{default:h(()=>[e("TresPerspectiveCamera",oe,null,512),_(r(z)),se,te,(n(),p($,null,{default:h(()=>[_(ee)]),_:1}))]),_:1},16))}});export{le as default};
