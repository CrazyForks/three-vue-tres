import{aJ as y,aK as S,Z as _,aP as U,aQ as C,a3 as T,o as P,v as w,J as m,ay as D,aR as E,aT as F,aU as M,aV as Q,C as R,a7 as V,a as p,aa as B,V as u}from"./vendor.6862d6441704936894284.js";import{P as N,F as k,R as g,E as z}from"./EffectComposer.74653dd11704936894284.js";import{U as G}from"./UnrealBloomPass.e6c685d91704936894284.js";const H={name:"FilmShader",uniforms:{tDiffuse:{value:null},time:{value:0},intensity:{value:.5},grayscale:{value:!1}},vertexShader:"\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vUv = uv;\n			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n		}",fragmentShader:"\n\n		#include <common>\n\n		uniform float intensity;\n		uniform bool grayscale;\n		uniform float time;\n\n		uniform sampler2D tDiffuse;\n\n		varying vec2 vUv;\n\n		void main() {\n\n			vec4 base = texture2D( tDiffuse, vUv );\n\n			float noise = rand( fract( vUv + time ) );\n\n			vec3 color = base.rgb + base.rgb * clamp( 0.1 + noise, 0.0, 1.0 );\n\n			color = mix( base.rgb, color, intensity );\n\n			if ( grayscale ) {\n\n				color = vec3( luminance( color ) ); // assuming linear-srgb\n\n			}\n\n			gl_FragColor = vec4( color, base.a );\n\n		}"};class J extends N{constructor(e=.5,a=!1){super();const s=H;this.uniforms=y.clone(s.uniforms),this.material=new S({name:s.name,uniforms:this.uniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader}),this.uniforms.intensity.value=e,this.uniforms.grayscale.value=a,this.fsQuad=new k(this.material)}render(e,a,s,r){this.uniforms.tDiffuse.value=s.texture,this.uniforms.time.value+=r,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(a),this.clear&&e.clear(),this.fsQuad.render(e))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}const L=_({__name:"bloomPass",setup(f){const{camera:e,renderer:a,scene:s,sizes:r}=U(),c={threshold:0,strength:.972,radius:.21};let t=null;((o,i,d,h,v)=>{const n=new g(o,i),l=new G(new E(h,v),c.strength,c.radius,c.threshold);t=new z(d),t.addPass(n),t.addPass(l)})(s.value,e.value,a.value,r.width.value,r.height.value),((o,i,d,h,v)=>{let n=new F(new M(1,1,1),new Q);n.position.set(0,2,-4),o.add(n);var l=new g(o,i);l.clear=!1,t.addPass(l);const x=new J;t.addPass(x)})(new C,e.value,a.value,r.width.value,r.height.value);const{onLoop:b}=T();return b(()=>{t&&t.render()}),(o,i)=>(P(),w(m(D),{args:[1,1,1],color:"orange",position:[3,2,1]}))}}),j=u("TresPerspectiveCamera",{position:[10,10,10]},null,-1),A=u("TresAmbientLight",{intensity:1},null,-1),I=u("TresGridHelper",{args:[10,10]},null,-1),W=_({__name:"bloomPass",setup(f){return(e,a)=>(P(),w(m(V),{disableRender:"","window-size":""},{default:R(()=>[j,A,p(m(B)),I,p(L)]),_:1}))}});export{W as default};
