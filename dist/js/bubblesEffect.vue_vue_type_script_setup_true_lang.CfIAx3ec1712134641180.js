import{a0 as P,k as z,aw as T,aD as V,bc as j,az as m,ap as S,aA as C,ak as E,a5 as M,o as B,c as F,X as v,a9 as U,aa as D,a8 as R,ax as N,K as Y,aT as p,bA as c}from"./vendor.FpHYsbG41712134641180.js";import{m as A}from"./BufferGeometryUtils.w2Umlcq71712134641180.js";const I="uniform float c;\nuniform float p;\nuniform float uTime;\nvarying float intensity;\nvarying vec2 vUv;\nvoid main(){\n    vUv=uv;\n    vec3 vNormal=normalize(normalMatrix*normal);\n    intensity=pow(c-abs(dot(vNormal,vec3(0,0,1))),p);\n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}",L="uniform vec3 glowColor;\nuniform sampler2D lightningTexture;\nvarying float intensity;\nvarying vec2 vUv;\nuniform float offsetY;\nuniform float uTime;\nuniform float uOpacity;\n\nvoid main(){\n  vec2 uv=vUv;\n  uv.y+=offsetY;\n  vec3 glow=glowColor*intensity;\n  vec3 color=vec3(step(.1,uv.y)-step(.2,uv.y))-vec3(texture2D(lightningTexture,uv));\n  float alpha=clamp(cos(uTime*3.),.5,1.);\n  gl_FragColor=vec4(glow+color,alpha*uOpacity);\n}",X=v("TresBufferGeometry",null,null,-1),Q=P({__name:"xRayEffect",props:{model:{},color:{default:"#84ccff"},opacity:{default:1}},async setup(b){let n,l;const e=b,o=z(),f=[];e.model.traverse(t=>{t instanceof T&&(t.geometry.verticesNeedUpdate=!0,f.push(t.geometry))});const s=([n,l]=V(()=>j({map:"./plugins/medical/image/brainXRayLight.png"})),n=await n,l(),n),a={uniforms:{c:{type:"f",value:1.11},p:{type:"f",value:1},glowColor:{type:"c",value:new m(e.color)},lightningTexture:{type:"t",value:s.map},offsetY:{type:"f",value:.1},uTime:{type:"f",value:0},uOpacity:{type:"f",value:e.opacity}},vertexShader:I,fragmentShader:L,side:S,blending:C,depthWrite:!1};a.uniforms.offsetY.value=Math.sin(5);const{camera:g}=E(),{onLoop:i}=R();return i(({delta:t})=>{g.value.position&&o.value&&(a.uniforms.uTime.value+=t)}),M(()=>{o.value&&(o.value.geometry.dispose(),o.value.geometry=A(f)),e.color&&(a.uniforms.glowColor.value=new m(e.color)),e.opacity&&(a.uniforms.uOpacity.value=e.opacity)}),(t,u)=>(B(),F("TresMesh",{ref_key:"TresMeshRef",ref:o},[X,v("TresShaderMaterial",U(D(a)),null,16)],512))}}),K="uniform float p;\nuniform float uTime;\nuniform float uSlowTime;\nuniform float uBubblesUp;\nvarying float intensity;\nattribute vec2 aDelayDuration;\nattribute float size;\nattribute vec4 bubbles;\nvarying float alpha;\n\nfloat easeExpoInOut(float p){\n    return((p*=2.)<1.)?.5*pow(2.,10.*(p-1.)):.5*(2.-pow(2.,-10.*(p-1.)));\n}\n\nvoid main()\n{\n    intensity=.9;\n    vec4 mvPosition=modelViewMatrix*vec4(position,1.);\n    gl_PointSize=size*(300./-mvPosition.z);\n    float m=mod(size,sin(uSlowTime*.12+size));\n    \n    alpha=step(.5,abs(m));\n    if(m>.5&&m<.7){\n        gl_PointSize=.9*size;\n    }\n    if(m>.8){\n        gl_PointSize=.9*size;\n    }\n    \n    gl_Position=projectionMatrix*mvPosition;\n    \n    if(bubbles.w>0.&&bubbles.w<2.&&bubbles.x!=0.&&bubbles.y!=0.){\n        gl_PointSize=size+15.;\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        \n        float tProgress=smoothstep(0.,aDelayDuration.x,uBubblesUp);\n        vec3 tranlated=mix(position,bubbles.xyz,tProgress);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        gl_Position+=projectionMatrix*bPosition;\n        alpha=5.;\n    }\n    \n    if(bubbles.w==2.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,.6);\n        gl_PointSize=size+60.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n    if(bubbles.w==3.){\n        alpha=clamp(abs(sin(uTime-bubbles.y)),.3,1.);\n        gl_PointSize=size+90.;\n        \n        gl_PointSize=uBubblesUp*gl_PointSize;\n        float normalized=clamp(uBubblesUp,0.,2.)*2.;\n        vec3 tranlated=mix(position,bubbles.xyz,normalized);\n        vec4 bPosition=modelViewMatrix*vec4(tranlated,1.);\n        gl_Position+=projectionMatrix*bPosition;\n    }\n}",W="precision mediump float;\nuniform vec3 glowColor;\nvarying float intensity;\nvarying float alpha;\nuniform float uOpacity;\nvoid main() {\n  float distanceToCenter = distance(gl_PointCoord, vec2(.5));\n  float pct = 1. - smoothstep(0., .5, distanceToCenter);\n  vec3 color = vec3(1.) * gl_FragColor.rgb;\n  vec3 glow = glowColor * intensity;\n  gl_FragColor = vec4(glow, clamp(alpha, 0., 1.));\n  gl_FragColor = vec4(glow, pct * gl_FragColor.a);\n  gl_FragColor = vec4(gl_FragColor.rgb, gl_FragColor.a * uOpacity);\n  // gl_FragColor=vec4(1.,1.,0.,1.);\n}",Z=P({__name:"bubblesEffect",props:{model:{},color:{default:"#FFF"},opacity:{default:1}},setup(b){const n=b,l=["afective","semantic","episodic","process","amigdala","brainstem","bridge","cerebellum","analitic"],e={};n.model.traverse(i=>{i instanceof T&&l.map(t=>{if(i.name.includes(t)){if(e[t]){const u=[e[t],i.geometry];return e[t]=A(u),e}return e[t]=i.geometry}return[]})});const o=z(),f=()=>{const t=[],u=[],O=[],y=[],d=[];for(let r=0;r<2e4-l.length*3;r+=1){const k=p.randInt(0,l.length-1),_=l[k],w=e[_].attributes.position.array[r*3+0]||0,x=e[_].attributes.position.array[r*3+1]||0,h=e[_].attributes.position.array[r*3+2]||0;if(u.push(w,x,h),t[r]=p.randFloat(10,20),r%100===0){const G=p.randInt(100,250)+x;d.push(w,G,h,1)}else d.push(w,x,h,0);y[r*2+0]=p.randFloat(.5,1.5),y[r*2+1]=2.5}o.value.setAttribute("aDelayDuration",new c(y,2)),o.value.setAttribute("bubbles",new c(d,4)),o.value.setAttribute("position",new c(u,3)),o.value.setAttribute("color",new c(O,3)),o.value.setAttribute("size",new c(t,1)),o.value.computeBoundingSphere()},s=new N({uniforms:{glowColor:{type:"c",value:new m(n.color)},uTime:{type:"f",value:0},uSlowTime:{type:"f",value:0},uBubblesUp:{type:"f",value:1},uOpacity:{type:"f",value:n.opacity}},vertexShader:K,fragmentShader:W,blending:C,side:S,depthTest:!1,vertexColors:!1,transparent:!0});M(()=>{o.value&&f()});const a=z(),{onLoop:g}=R();return g(({delta:i})=>{a.value&&(a.value.material.uniforms.uTime.value+=1/20,a.value.material.uniforms.uSlowTime.value+=1/400),n.color&&(s.uniforms.glowColor.value=new m(n.color)),n.opacity&&(s.uniforms.uOpacity.value=n.opacity)}),(i,t)=>(B(),F("TresPoints",{ref_key:"TresMeshRef",ref:a},[v("TresBufferGeometry",{ref_key:"BufferGeometryRef",ref:o},null,512),v("TresShaderMaterial",U(D(Y(s))),null,16)],512))}});export{Q as _,Z as a};
