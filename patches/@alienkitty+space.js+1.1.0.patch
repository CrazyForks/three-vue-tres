diff --git a/node_modules/@alienkitty/space.js/.eslintrc.json b/node_modules/@alienkitty/space.js/.eslintrc.json
new file mode 100644
index 0000000..100a8d8
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/.eslintrc.json
@@ -0,0 +1,45 @@
+{
+  "env": {
+    "browser": true,
+    "es2022": true
+  },
+  "extends": "eslint:recommended",
+  "parserOptions": {
+    "ecmaVersion": 13,
+    "sourceType": "module"
+  },
+  "plugins": [
+    "html"
+  ],
+  "rules": {
+    "arrow-parens": ["error", "as-needed"],
+    "arrow-spacing": ["error", { "before": true, "after": true }],
+    "comma-dangle": ["warn", "never"],
+    "comma-spacing": ["error", { "before": false, "after": true }],
+    "curly": ["error", "multi-line"],
+    "eqeqeq": ["error", "always"],
+    "indent": ["error", 4, { "SwitchCase": 1 }],
+    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
+    "keyword-spacing": ["error", { "before": true, "after": true }],
+    "linebreak-style": ["error", "unix"],
+    "lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
+    "new-parens": "error",
+    "no-inner-declarations": "off",
+    "no-return-await": "error",
+    "object-curly-spacing": ["error", "always"],
+    "object-shorthand":  ["error", "always"],
+    "one-var": ["error", { "initialized": "never" }],
+    "padded-blocks": ["error", "never"],
+    "prefer-arrow-callback": "error",
+    "prefer-const": ["error", { "destructuring": "any" }],
+    "quotes": ["error", "single"],
+    "semi-spacing": ["error", { "before": false, "after": true }],
+    "semi": ["error", "always"],
+    "sort-imports": ["warn", { "ignoreDeclarationSort": true }],
+    "space-before-blocks": ["error", "always"],
+    "space-before-function-paren": ["error", { "anonymous": "always", "named": "never", "asyncArrow": "always" }],
+    "space-in-parens": ["error", "never"],
+    "space-infix-ops": "error",
+    "space-unary-ops": ["error", { "words": true, "nonwords": false }]
+  }
+}
diff --git a/node_modules/@alienkitty/space.js/.gitignore b/node_modules/@alienkitty/space.js/.gitignore
new file mode 100755
index 0000000..a7ff744
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/.gitignore
@@ -0,0 +1,4 @@
+.DS_Store
+node_modules
+package-lock.json
+**/public/assets/js/*.js
diff --git a/node_modules/@alienkitty/space.js/.npmignore b/node_modules/@alienkitty/space.js/.npmignore
new file mode 100644
index 0000000..c62eb00
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/.npmignore
@@ -0,0 +1,3 @@
+.eslintrc.json
+examples
+space.js.png
diff --git a/node_modules/@alienkitty/space.js/README.md b/node_modules/@alienkitty/space.js/README.md
index 3310ee6..2ff37d8 100755
--- a/node_modules/@alienkitty/space.js/README.md
+++ b/node_modules/@alienkitty/space.js/README.md
@@ -119,6 +119,8 @@ environmentLoader.load('assets/textures/env/jewelry_black_contrast.jpg', texture
 #### 3d
 
 [materials](https://space.js.org/examples/three/3d_materials.html)  
+[materials instancing](https://space.js.org/examples/three/3d_materials_instancing.html) ([debug](https://space.js.org/examples/three/3d_materials_instancing.html?3&debug))  
+[materials instancing](https://space.js.org/examples/three/3d_materials_instancing_modified.html) (custom, [debug](https://space.js.org/examples/three/3d_materials_instancing_modified.html?3&debug))  
 [lights](https://space.js.org/examples/three/3d_lights.html)  
 
 #### audio
@@ -161,9 +163,11 @@ npx eslint examples/*.html
 
 * [x] Three.js material UI
 * [x] Three.js light UI
+* [x] Three.js UI keyboard support
 
 #### v1.2
 
+* [x] Three.js UI multiple select
 * [ ] Material texture drag and drop
 * [ ] Material texture thumbnails
 
diff --git a/node_modules/@alienkitty/space.js/examples/about/package.json b/node_modules/@alienkitty/space.js/examples/about/package.json
new file mode 100755
index 0000000..33d3c86
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/package.json
@@ -0,0 +1,22 @@
+{
+  "private": true,
+  "type": "module",
+  "scripts": {
+    "build": "rollup -c",
+    "dev": "concurrently --names \"ROLLUP,HTTP\" -c \"bgBlue.bold,bgGreen.bold\" \"rollup -c -w -m inline\" \"servez public\"",
+    "start": "servez public"
+  },
+  "dependencies": {
+    "@alienkitty/alien.js": "alienkitty/alien.js#dev",
+    "@alienkitty/space.js": "alienkitty/space.js#dev",
+    "oimophysics": "saharan/OimoPhysics#v1.2.3",
+    "three": "latest"
+  },
+  "devDependencies": {
+    "@rollup/plugin-node-resolve": "latest",
+    "concurrently": "latest",
+    "rollup": "latest",
+    "rollup-plugin-bundleutils": "latest",
+    "servez": "latest"
+  }
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/css/style.css b/node_modules/@alienkitty/space.js/examples/about/public/assets/css/style.css
new file mode 100755
index 0000000..3d3a7dc
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/public/assets/css/style.css
@@ -0,0 +1,104 @@
+@font-face {
+    font-family: 'D-DIN';
+    font-style: normal;
+    font-weight: 400;
+    src: url(../fonts/D-DIN.woff2) format('woff2');
+}
+
+@font-face {
+    font-family: 'Gothic A1';
+    font-style: normal;
+    font-weight: 500;
+    src: url(../fonts/GothicA1-Medium.woff2) format('woff2');
+}
+
+@font-face {
+    font-family: 'Gothic A1';
+    font-style: normal;
+    font-weight: 700;
+    src: url(../fonts/GothicA1-Bold.woff2) format('woff2');
+}
+
+@font-face {
+    font-family: 'Roboto Mono';
+    font-style: normal;
+    font-weight: 500;
+    src: url(../fonts/RobotoMono-Medium.woff2) format('woff2');
+}
+
+:root {
+    --bg-color: #000;
+    --ui-font-family: 'Roboto Mono', monospace;
+    --ui-font-weight: 400;
+    --ui-font-size: 11px;
+    --ui-line-height: 15px;
+    --ui-letter-spacing: 0.02em;
+    --ui-number-letter-spacing: 0.5px;
+    --ui-secondary-font-size: 10px;
+    --ui-secondary-letter-spacing: 0.5px;
+    --ui-color: rgba(255, 255, 255, 0.94);
+    --ui-color-triplet: 255, 255, 255;
+    --ui-color-line: rgba(255, 255, 255, 0.5);
+    --ui-invert-light-color: #000;
+    --ui-invert-light-color-triplet: 0, 0, 0;
+    --ui-invert-light-color-line: rgba(0, 0, 0, 0.5);
+    --ui-invert-dark-color: rgba(255, 255, 255, 0.94);
+    --ui-invert-dark-color-triplet: 255, 255, 255;
+    --ui-invert-dark-color-line: rgba(255, 255, 255, 0.5);
+}
+
+*, :after, :before {
+    box-sizing: border-box;
+    margin: 0;
+    padding: 0;
+    border: 0;
+    touch-action: none;
+    -webkit-touch-callout: none;
+    -webkit-user-drag: none;
+    -webkit-text-size-adjust: none;
+    text-size-adjust: none;
+}
+
+*:focus {
+    outline: 0;
+    box-shadow: none;
+}
+
+html, body {
+    width: 100%;
+    height: 100%;
+}
+
+body {
+    position: fixed;
+    font-family: 'Gothic A1', sans-serif;
+    font-weight: 500;
+    font-size: 13px;
+    line-height: 1.5;
+    background-color: var(--bg-color);
+    color: var(--ui-color);
+    -moz-osx-font-smoothing: grayscale;
+    -webkit-font-smoothing: antialiased;
+    -webkit-tap-highlight-color: transparent;
+}
+
+a {
+    color: var(--ui-color);
+    text-decoration: none;
+    text-underline-offset: 3px;
+}
+
+a:hover, a:focus {
+    color: var(--ui-color);
+    text-decoration: underline;
+}
+
+::selection {
+    background-color: var(--ui-color);
+    color: var(--bg-color);
+}
+
+.ui .info, .ui .target {
+    -moz-osx-font-smoothing: auto;
+    -webkit-font-smoothing: auto;
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/D-DIN.woff2 b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/D-DIN.woff2
new file mode 100644
index 0000000..67ad269
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/D-DIN.woff2 differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/GothicA1-Bold.woff2 b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/GothicA1-Bold.woff2
new file mode 100644
index 0000000..ff40f0b
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/GothicA1-Bold.woff2 differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/GothicA1-Medium.woff2 b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/GothicA1-Medium.woff2
new file mode 100644
index 0000000..0ba277c
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/GothicA1-Medium.woff2 differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/RobotoMono-Medium.woff2 b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/RobotoMono-Medium.woff2
new file mode 100644
index 0000000..01b58ed
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/fonts/RobotoMono-Medium.woff2 differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/images/fallback.png b/node_modules/@alienkitty/space.js/examples/about/public/assets/images/fallback.png
new file mode 100644
index 0000000..97e0c31
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/images/fallback.png differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/meta/favicon.svg b/node_modules/@alienkitty/space.js/examples/about/public/assets/meta/favicon.svg
new file mode 100644
index 0000000..3623254
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/public/assets/meta/favicon.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="90" height="86" viewBox="0 0 88 88"><defs><linearGradient id="lightA" gradientUnits="userSpaceOnUse" x1="59.167" y1="42.175" x2="45.501" y2="36.342"><stop offset="0" stop-color="#000"/><stop offset=".22" stop-color="#fff"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="lightB" gradientUnits="userSpaceOnUse" x1="65.39" y1="42.27" x2="76.057" y2="34.103"><stop offset="0" stop-color="#000"/><stop offset=".22" stop-color="#fff"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="darkA" gradientUnits="userSpaceOnUse" x1="59.167" y1="42.175" x2="45.501" y2="36.342"><stop offset="0" stop-color="#fff"/><stop offset=".22" stop-color="#000"/><stop offset="1" stop-color="#000"/></linearGradient><linearGradient id="darkB" gradientUnits="userSpaceOnUse" x1="65.39" y1="42.27" x2="76.057" y2="34.103"><stop offset="0" stop-color="#fff"/><stop offset=".22" stop-color="#000"/><stop offset="1" stop-color="#000"/></linearGradient><style>@media (prefers-color-scheme: dark){.cls-1{fill:url(#darkA);}.cls-2{fill:url(#darkB);}.cls-3{fill:#fff;}}</style></defs><path d="M48.891 34.6c.529.634 1.342 1.367 2.439 2.2l2.666 1.95 2.666 1.65 2.326 1.9c-2.912.833-6.277 1-10.098.5-3.518-.5-6.715-1.467-9.589-2.9-.983-.5-1.929-1.283-2.837-2.35-.907-1.133-1.456-2.15-1.646-3.05-.377-1.7-.151-3.133.681-4.3.87-1.267 2.25-1.9 4.142-1.9 1.967-.033 3.782.667 5.448 2.1l1.984 2.05 1.818 2.15" fill="url(#lightA)" class="cls-1"/><path d="M76.918 28.95c1.436.467 2.383 1.55 2.836 3.25.492 1.867.246 3.467-.736 4.8-.719.966-1.703 1.933-2.951 2.9-1.324 1.033-2.553 1.7-3.688 2-2.988.767-5.221.9-6.695.4l3.461-3.5c.832-1.1 1.57-2.483 2.213-4.15.529-1.434 1.172-2.667 1.93-3.7.982-1.466 1.93-2.183 2.836-2.15l.794.15" fill="url(#lightB)" class="cls-2"/><path d="M83.102 11.1c-1.814 2.467-3.084 4.55-3.801 6.25-1.098 2.567-1.191 4.784-.283 6.65l1.588 2.65 2.043 3.3c1.854 3.5 2.23 7.333 1.135 11.5-1.061 3.8-3.084 7.117-6.072 9.95-2.533 2.301-5.314 3.867-8.34 4.7-1.398.366-1.984 1.534-1.758 3.5.037.634.207 1.45.51 2.45l.625 2.2c.453 1.833.699 4.884.736 9.149-.037 1.5.02 2.351.172 2.551.227.333 1.059.533 2.496.6 1.777.033 3.311.666 4.596 1.9 1.361 1.333 1.605 2.766.738 4.3-.871 1.466-2.725 2.333-5.561 2.6l-3.633.101-39.657-.101c-1.249-.1-2.307-.566-3.178-1.399-1.059-1-1.853-1.584-2.382-1.75-3.178-.934-6.374-2.684-9.588-5.25A37.243 37.243 0 0 1 5.261 68.1C2.84 64.567 1.327 61.117.722 57.75c-.681-3.8-.17-7.116 1.532-9.95 1.286-2.267 3.196-3.883 5.73-4.85 2.799-1.1 5.257-.816 7.375.85 1.476 1.2 2.307 2.7 2.497 4.5.114 1.733-.378 3.367-1.476 4.9l-1.588 2-1.475 2.149c-.681 1.467-.946 3.184-.794 5.15.114 2.033.644 3.683 1.588 4.95 2.875 3.699 5.031 5.434 6.468 5.199.87-.166 1.362-.866 1.475-2.1l.057-3.1c.605-3.801 1.532-7.033 2.779-9.7.606-1.267 1.57-2.733 2.894-4.4l3.291-4.2c.794-1.133.983-2.1.567-2.899L29.6 43.5a20.754 20.754 0 0 1-1.815-3.55c-.341-.833-.567-1.833-.681-3l-.34-2.4c-.189-.767-.606-1.35-1.249-1.75-.719-.5-1.815-.867-3.291-1.1l1.021-.65c.492-.233.719-.467.681-.7-.038-.2-.511-.533-1.418-1l-1.646-.8c1.097-.5 1.305-1.2.624-2.1l-2.212-2.2-3.518-4.7-3.971-4.95c-1.172-1.167-2.062-2.366-2.667-3.6.87-.133 2.042.033 3.518.5l3.348 1.1 12.368 3.05 4.255 1.15c2.647.833 5.522 1.45 8.624 1.85l8.795.2c.68-.1 1.625-.366 2.836-.8l2.838-.7 4.65-.3c1.363-.167 2.838-.617 4.426-1.35 3.404-1.667 7.604-4.117 12.596-7.35L89.571.55c-.455.267-.891.967-1.305 2.1l-.965 2.4-4.199 6.05M47.074 32.45 45.09 30.4c-1.666-1.434-3.48-2.133-5.448-2.1-1.891 0-3.272.633-4.142 1.9-.832 1.167-1.059 2.6-.681 4.3.189.9.738 1.917 1.646 3.05.908 1.067 1.854 1.85 2.837 2.35 2.874 1.433 6.071 2.4 9.589 2.9 3.82.5 7.186.333 10.098-.5l-2.326-1.9-2.666-1.65-2.667-1.95c-1.098-.833-1.91-1.566-2.439-2.2l-1.817-2.15m29.049-3.65c-.906-.033-1.854.684-2.836 2.15-.758 1.034-1.4 2.267-1.93 3.7-.643 1.667-1.381 3.05-2.213 4.15l-3.461 3.5c1.475.5 3.707.367 6.695-.4 1.135-.3 2.363-.967 3.688-2 1.248-.967 2.232-1.934 2.951-2.9.982-1.333 1.229-2.934.736-4.8-.453-1.7-1.4-2.783-2.836-3.25l-.794-.15" fill="#000" class="cls-3"/></svg>
\ No newline at end of file
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/meta/share.png b/node_modules/@alienkitty/space.js/examples/about/public/assets/meta/share.png
new file mode 100644
index 0000000..f175ad0
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/meta/share.png differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/env/jewelry_black_contrast.jpg b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/env/jewelry_black_contrast.jpg
new file mode 100644
index 0000000..30d4331
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/env/jewelry_black_contrast.jpg differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/env/jewelry_black_contrast.txt b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/env/jewelry_black_contrast.txt
new file mode 100644
index 0000000..3e59fd1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/env/jewelry_black_contrast.txt
@@ -0,0 +1,2 @@
+Free Jewelry HDRI Environment Map Black Contrast
+https://3djewels.pro/materials/hdri/jewelry-hdri-environment-map-black-contrast/
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/smaa/area.png b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/smaa/area.png
new file mode 100644
index 0000000..ecd3e03
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/smaa/area.png differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/smaa/search.png b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/smaa/search.png
new file mode 100644
index 0000000..db3c553
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/smaa/search.png differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/uv.jpg b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/uv.jpg
new file mode 100644
index 0000000..ab5b441
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/uv.jpg differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/uv.txt b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/uv.txt
new file mode 100755
index 0000000..b24adf0
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/uv.txt
@@ -0,0 +1,2 @@
+UV Texture Grids
+http://www.pixelcg.com/blog/?p=146
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/waterdudv.jpg b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/waterdudv.jpg
new file mode 100644
index 0000000..1429747
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/assets/textures/waterdudv.jpg differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/favicon.ico b/node_modules/@alienkitty/space.js/examples/about/public/favicon.ico
new file mode 100644
index 0000000..8813c0a
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/about/public/favicon.ico differ
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/index.html b/node_modules/@alienkitty/space.js/examples/about/public/index.html
new file mode 100755
index 0000000..c613361
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/public/index.html
@@ -0,0 +1,38 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+    <meta name="description" content="Future web UI.">
+    <meta name="keywords" content="space, spacejs, javascript, 3d, animation, interaction, gui, ui, panel, tween, web audio, loaders, utilities, svg, canvas, threejs, webgl, webgl2, web workers, creative coding">
+
+    <title>Space.js</title>
+
+    <meta property="og:type" content="website">
+    <meta property="og:url" content="https://space.js.org/">
+    <meta property="og:site_name" content="Space.js">
+    <meta property="og:title" content="Space.js">
+    <meta property="og:description" content="Future web UI.">
+    <meta property="og:image" content="https://space.js.org/assets/meta/share.png">
+
+    <meta name="twitter:card" content="summary_large_image">
+    <meta name="twitter:site" content="@pschroen">
+    <meta name="twitter:creator" content="@pschroen">
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+    <link rel="icon" type="image/svg+xml" href="assets/meta/favicon.svg">
+
+    <script type="module">
+        import { Preloader } from './assets/js/loader.js';
+
+        Preloader.init();
+    </script>
+    <script nomodule>
+        location.href = 'unsupported.html';
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/about/public/unsupported.html b/node_modules/@alienkitty/space.js/examples/about/public/unsupported.html
new file mode 100644
index 0000000..bba1837
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/public/unsupported.html
@@ -0,0 +1,70 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+    <meta name="robots" content="noindex, nofollow, noarchive">
+
+    <title>Sorry, your browser is out of date</title>
+
+    <style>
+        @font-face {
+            font-family: 'Roboto Mono';
+            font-style: normal;
+            font-weight: 500;
+            src: url(assets/fonts/RobotoMono-Medium.woff2) format('woff2');
+        }
+
+        *, :after, :before {
+            box-sizing: border-box;
+            margin: 0;
+            padding: 0;
+            border: 0;
+            touch-action: none;
+            -webkit-touch-callout: none;
+            -webkit-user-drag: none;
+            -webkit-text-size-adjust: none;
+            text-size-adjust: none;
+        }
+
+        *:focus {
+            outline: 0;
+            box-shadow: none;
+        }
+
+        html, body {
+            width: 100%;
+            height: 100%;
+        }
+
+        body {
+            position: fixed;
+            font-family: 'Roboto Mono', monospace;
+            font-weight: 400;
+            font-size: 11px;
+            line-height: 1.7;
+            letter-spacing: 0.03em;
+            background-color: #000;
+            color: rgba(255, 255, 255, 0.94);
+            -moz-osx-font-smoothing: grayscale;
+            -webkit-font-smoothing: antialiased;
+            -webkit-tap-highlight-color: transparent;
+        }
+
+        a, a:hover, a:focus {
+            color: rgba(255, 255, 255, 0.94);
+        }
+
+        ::selection {
+            background-color: rgba(255, 255, 255, 0.94);
+            color: #000;
+        }
+    </style>
+
+    <link rel="icon" type="image/svg+xml" href="assets/meta/favicon.svg">
+</head>
+<body>
+    <div style="position: absolute; width: 90px; height: 86px; background-size: 90px 86px; left: 50%; top: 50%; margin-left: -45px; margin-top: -108px; background-image: url(assets/images/fallback.png);"></div>
+    <div style="position: absolute; width: 300px; left: 50%; top: 50%; margin-left: -150px; text-align: center; white-space: nowrap;"><span style="opacity: 0.75;">Sorry, your browser is out of date</span><br><a href="https://www.google.com/chrome/">Upgrade your browser</a></div>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/about/rollup.config.js b/node_modules/@alienkitty/space.js/examples/about/rollup.config.js
new file mode 100755
index 0000000..8c40130
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/rollup.config.js
@@ -0,0 +1,28 @@
+import resolve from '@rollup/plugin-node-resolve';
+import { terser, timestamp } from 'rollup-plugin-bundleutils';
+
+const production = !process.env.ROLLUP_WATCH;
+
+export default {
+  input: 'src/main.js',
+  preserveEntrySignatures: 'allow-extension',
+  output: {
+    dir: 'public/assets/js',
+    entryFileNames: 'loader.js',
+    chunkFileNames: ({ name }) => `${name.toLowerCase()}.js`,
+    format: 'es',
+    minifyInternalExports: false
+  },
+  plugins: [
+    resolve({
+      browser: true
+    }),
+    production && terser({
+      output: {
+        preamble: `// ${timestamp()}`
+      },
+      keep_classnames: true,
+      keep_fnames: true
+    })
+  ]
+};
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/config/Config.js b/node_modules/@alienkitty/space.js/examples/about/src/config/Config.js
new file mode 100755
index 0000000..b8fed50
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/config/Config.js
@@ -0,0 +1,5 @@
+export class Config {
+    static BREAKPOINT = 1000;
+
+    static DEBUG = /[?&]debug/.test(location.search);
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/config/Layer.js b/node_modules/@alienkitty/space.js/examples/about/src/config/Layer.js
new file mode 100644
index 0000000..71b2758
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/config/Layer.js
@@ -0,0 +1,4 @@
+export class Layer {
+    static DEFAULT = 0;
+    static PICKING = 1;
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/App.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/App.js
new file mode 100755
index 0000000..181db51
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/App.js
@@ -0,0 +1,115 @@
+import { ImageBitmapLoaderThread, Stage, Thread, ticker, wait } from '@alienkitty/space.js/three';
+
+import { WorldController } from './world/WorldController.js';
+import { CameraController } from './world/CameraController.js';
+import { SceneController } from './world/SceneController.js';
+import { PhysicsController } from './world/PhysicsController.js';
+import { InputManager } from './world/InputManager.js';
+import { RenderManager } from './world/RenderManager.js';
+import { PanelController } from './panels/PanelController.js';
+import { SceneView } from '../views/SceneView.js';
+import { UI } from '../views/UI.js';
+
+export class App {
+    static async init() {
+        if (!/firefox/i.test(navigator.userAgent)) {
+            this.initThread();
+        }
+
+        this.initWorld();
+        this.initViews();
+        this.initControllers();
+
+        this.addListeners();
+        this.onResize();
+
+        await Promise.all([
+            document.fonts.ready,
+            SceneController.ready(),
+            WorldController.textureLoader.ready(),
+            WorldController.environmentLoader.ready()
+        ]);
+
+        this.initPanel();
+    }
+
+    static initThread() {
+        ImageBitmapLoaderThread.init();
+
+        Thread.shared();
+    }
+
+    static initWorld() {
+        WorldController.init();
+        Stage.add(WorldController.element);
+    }
+
+    static initViews() {
+        this.view = new SceneView();
+        WorldController.scene.add(this.view);
+
+        this.ui = new UI();
+        Stage.add(this.ui);
+    }
+
+    static initControllers() {
+        const { renderer, scene, camera, controls, physics } = WorldController;
+
+        CameraController.init(camera, controls);
+        SceneController.init(this.view);
+        PhysicsController.init(physics);
+        InputManager.init(scene, camera, controls);
+        RenderManager.init(renderer, scene, camera, this.ui);
+    }
+
+    static initPanel() {
+        const { renderer, scene, camera, physics } = WorldController;
+
+        PanelController.init(renderer, scene, camera, physics, this.view, this.ui);
+    }
+
+    static addListeners() {
+        Stage.events.on('invert', this.onInvert);
+        window.addEventListener('resize', this.onResize);
+        ticker.add(this.onUpdate);
+    }
+
+    // Event handlers
+
+    static onInvert = ({ invert }) => {
+        this.view.invert(invert);
+        RenderManager.invert(invert);
+    };
+
+    static onResize = () => {
+        const width = document.documentElement.clientWidth;
+        const height = document.documentElement.clientHeight;
+        const dpr = window.devicePixelRatio;
+
+        WorldController.resize(width, height, dpr);
+        CameraController.resize(width, height);
+        RenderManager.resize(width, height, dpr);
+    };
+
+    static onUpdate = (time, delta, frame) => {
+        WorldController.update(time, delta, frame);
+        CameraController.update();
+        SceneController.update(time);
+        PhysicsController.update();
+        InputManager.update(time);
+        RenderManager.update(time, delta, frame);
+        PanelController.update(time);
+    };
+
+    // Public methods
+
+    static start = async () => {
+        WorldController.animateIn();
+        SceneController.animateIn();
+
+        await wait(1000);
+
+        this.ui.animateIn();
+        PanelController.animateIn();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/Preloader.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/Preloader.js
new file mode 100755
index 0000000..d24823c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/Preloader.js
@@ -0,0 +1,60 @@
+import { MultiLoader, Stage } from '@alienkitty/space.js/three';
+
+import { PreloaderView } from '../views/PreloaderView.js';
+
+export class Preloader {
+    static init() {
+        this.initStage();
+        this.initView();
+        this.initLoader();
+
+        this.addListeners();
+    }
+
+    static initStage() {
+        Stage.init();
+    }
+
+    static initView() {
+        this.view = new PreloaderView();
+        Stage.add(this.view);
+    }
+
+    static async initLoader() {
+        this.view.animateIn();
+
+        this.loader = new MultiLoader();
+        this.loader.add(2);
+
+        const { App } = await import('./App.js');
+        this.loader.trigger(1);
+
+        this.app = App;
+
+        await this.app.init();
+        this.loader.trigger(1);
+    }
+
+    static addListeners() {
+        this.loader.events.on('progress', this.view.onProgress);
+        this.view.events.on('complete', this.onComplete);
+    }
+
+    static removeListeners() {
+        this.loader.events.off('progress', this.view.onProgress);
+        this.view.events.off('complete', this.onComplete);
+    }
+
+    // Event handlers
+
+    static onComplete = async () => {
+        this.removeListeners();
+
+        this.loader = this.loader.destroy();
+
+        await this.view.animateOut();
+        this.view = this.view.destroy();
+
+        this.app.start();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/EnvPanel.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/EnvPanel.js
new file mode 100644
index 0000000..c553e9b
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/EnvPanel.js
@@ -0,0 +1,24 @@
+import { Panel, PanelItem } from '@alienkitty/space.js/three';
+
+export class EnvPanel extends Panel {
+    constructor(scene) {
+        super();
+
+        this.scene = scene;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const items = [
+            {
+                type: 'divider'
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/GridPanel.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/GridPanel.js
new file mode 100644
index 0000000..dc9de0e
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/GridPanel.js
@@ -0,0 +1,38 @@
+import { Panel, PanelItem, getKeyByValue } from '@alienkitty/space.js/three';
+
+export class GridPanel extends Panel {
+    constructor(helper) {
+        super();
+
+        this.helper = helper;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const helper = this.helper;
+
+        const gridOptions = {
+            Off: false,
+            On: true
+        };
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                list: gridOptions,
+                value: getKeyByValue(gridOptions, helper.visible),
+                callback: value => {
+                    helper.visible = gridOptions[value];
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/PanelController.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/PanelController.js
new file mode 100644
index 0000000..21f2082
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/PanelController.js
@@ -0,0 +1,203 @@
+import { Vector3 } from 'three';
+
+import { LightOptions, LightPanelController, PanelItem, Point3D, Stage, brightness, getKeyByLight, getKeyByValue } from '@alienkitty/space.js/three';
+
+import { WorldController } from '../world/WorldController.js';
+import { PhysicsController } from '../world/PhysicsController.js';
+import { ScenePanelController } from './ScenePanelController.js';
+import { PostPanel } from './PostPanel.js';
+import { EnvPanel } from './EnvPanel.js';
+import { GridPanel } from './GridPanel.js';
+
+export class PanelController {
+    static init(renderer, scene, camera, physics, view, ui) {
+        this.renderer = renderer;
+        this.scene = scene;
+        this.camera = camera;
+        this.physics = physics;
+        this.view = view;
+        this.ui = ui;
+
+        this.lastInvert = null;
+        this.lights = [];
+
+        this.initControllers();
+        this.initPanel();
+        this.setInvert(this.scene.background);
+    }
+
+    static initControllers() {
+        const { textureLoader } = WorldController;
+
+        Point3D.init(this.scene, this.camera, {
+            root: Stage,
+            container: this.ui,
+            physics: this.physics,
+            loader: textureLoader,
+            uvHelper: true
+        });
+        Point3D.enabled = false;
+
+        ScenePanelController.init(this.view);
+        LightPanelController.init(this.scene);
+    }
+
+    static initPanel() {
+        const scene = this.scene;
+        const physics = this.physics;
+
+        const physicsOptions = {
+            Off: false,
+            Physics: true
+        };
+
+        const vector3 = new Vector3();
+        const gravity = physics.world.getGravity();
+
+        const sceneOptions = {
+            Post: PostPanel,
+            Env: EnvPanel
+        };
+
+        scene.traverse(object => {
+            if (object.isLight) {
+                const key = getKeyByLight(LightOptions, object);
+
+                sceneOptions[key] = [object, LightOptions[key][1]];
+
+                this.lights.push(object);
+            }
+        });
+
+        sceneOptions.Grid = GridPanel;
+
+        const items = [
+            {
+                label: 'FPS'
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                list: physicsOptions,
+                value: getKeyByValue(physicsOptions, PhysicsController.enabled),
+                callback: value => {
+                    PhysicsController.enabled = physicsOptions[value];
+
+                    // Reset
+                    vector3.set(0, 0, 0);
+
+                    physics.objects.forEach(object => {
+                        const { position, quaternion } = object;
+
+                        physics.setPosition(object, position);
+                        physics.setOrientation(object, quaternion);
+                        physics.setLinearVelocity(object, vector3);
+                        physics.setAngularVelocity(object, vector3);
+                    });
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Gravity',
+                min: -10,
+                max: 10,
+                step: 0.1,
+                value: -gravity.y,
+                callback: value => {
+                    gravity.y = -value;
+                    physics.world.setGravity(gravity);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                value: scene.background,
+                callback: value => {
+                    scene.background.copy(value);
+
+                    this.setInvert(value);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                list: sceneOptions,
+                value: 'Post',
+                callback: (value, panel) => {
+                    switch (value) {
+                        case 'Post':
+                        case 'Env': {
+                            const ScenePanel = sceneOptions[value];
+
+                            const scenePanel = new ScenePanel(scene);
+                            scenePanel.animateIn(true);
+
+                            panel.setContent(scenePanel);
+                            break;
+                        }
+                        case 'Grid': {
+                            const ScenePanel = sceneOptions[value];
+
+                            const scenePanel = new ScenePanel(this.view.floor.gridHelper);
+                            scenePanel.animateIn(true);
+
+                            panel.setContent(scenePanel);
+                            break;
+                        }
+                        default: {
+                            const [light, LightPanel] = sceneOptions[value];
+
+                            const lightPanel = new LightPanel(LightPanelController, light);
+                            lightPanel.animateIn(true);
+
+                            panel.setContent(lightPanel);
+                            break;
+                        }
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.ui.addPanel(new PanelItem(data));
+        });
+    }
+
+    // Public methods
+
+    static setInvert = value => {
+        const invert = brightness(value) > 0.6; // Light colour is inverted
+
+        if (invert !== this.lastInvert) {
+            this.lastInvert = invert;
+
+            this.ui.invert(invert);
+        }
+    };
+
+    static update = time => {
+        if (!this.ui) {
+            return;
+        }
+
+        Point3D.update(time);
+
+        this.lights.forEach(light => {
+            if (light.helper) {
+                light.helper.update();
+            }
+        });
+
+        this.ui.update();
+    };
+
+    static animateIn = () => {
+        Point3D.enabled = true;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/PostPanel.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/PostPanel.js
new file mode 100644
index 0000000..cfe4456
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/PostPanel.js
@@ -0,0 +1,163 @@
+import { Panel, PanelItem, getKeyByValue } from '@alienkitty/space.js/three';
+
+import { RenderManager } from '../world/RenderManager.js';
+
+export class PostPanel extends Panel {
+    constructor() {
+        super();
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const { luminosityMaterial, bloomCompositeMaterial, compositeMaterial } = RenderManager;
+
+        const postOptions = {
+            Off: false,
+            On: true
+        };
+
+        const toneMappingOptions = {
+            Off: false,
+            Tone: true
+        };
+
+        const gammaOptions = {
+            Off: false,
+            Gamma: true
+        };
+
+        const postItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Thresh',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: luminosityMaterial.uniforms.uThreshold.value,
+                callback: value => {
+                    luminosityMaterial.uniforms.uThreshold.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Smooth',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: luminosityMaterial.uniforms.uSmoothing.value,
+                callback: value => {
+                    luminosityMaterial.uniforms.uSmoothing.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Strength',
+                min: 0,
+                max: 2,
+                step: 0.01,
+                value: RenderManager.bloomStrength,
+                callback: value => {
+                    RenderManager.bloomStrength = value;
+                    bloomCompositeMaterial.uniforms.uBloomFactors.value = RenderManager.bloomFactors();
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Radius',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: RenderManager.bloomRadius,
+                callback: value => {
+                    RenderManager.bloomRadius = value;
+                    bloomCompositeMaterial.uniforms.uBloomFactors.value = RenderManager.bloomFactors();
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Chroma',
+                min: 0,
+                max: 2,
+                step: 0.01,
+                value: compositeMaterial.uniforms.uBloomDistortion.value,
+                callback: value => {
+                    compositeMaterial.uniforms.uBloomDistortion.value = value;
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: toneMappingOptions,
+                value: getKeyByValue(toneMappingOptions, compositeMaterial.uniforms.uToneMapping.value),
+                callback: value => {
+                    compositeMaterial.uniforms.uToneMapping.value = toneMappingOptions[value];
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Exp',
+                min: 0,
+                max: 2,
+                step: 0.01,
+                value: compositeMaterial.uniforms.uExposure.value,
+                callback: value => {
+                    compositeMaterial.uniforms.uExposure.value = value;
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Gamma',
+                list: gammaOptions,
+                value: getKeyByValue(gammaOptions, compositeMaterial.uniforms.uGamma.value),
+                callback: value => {
+                    compositeMaterial.uniforms.uGamma.value = gammaOptions[value];
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                list: postOptions,
+                value: getKeyByValue(postOptions, RenderManager.enabled),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const postPanel = new Panel();
+                        postPanel.animateIn(true);
+
+                        postItems.forEach(data => {
+                            postPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(postPanel);
+                    }
+
+                    RenderManager.enabled = postOptions[value];
+
+                    if (RenderManager.enabled) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/ScenePanelController.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/ScenePanelController.js
new file mode 100644
index 0000000..831201b
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/panels/ScenePanelController.js
@@ -0,0 +1,49 @@
+import { Vector3 } from 'three';
+
+import { MaterialPanelController, Point3D } from '@alienkitty/space.js/three';
+
+import { CameraController } from '../world/CameraController.js';
+
+export class ScenePanelController {
+    static init(view) {
+        this.view = view;
+
+        this.initPanel();
+
+        this.addListeners();
+    }
+
+    static initPanel() {
+        const { darkPlanet, floatingCrystal, abstractCube } = this.view;
+
+        const objects = [darkPlanet, floatingCrystal, abstractCube];
+
+        objects.forEach(object => {
+            const { geometry, material } = object.mesh;
+
+            object.point = new Point3D(object.mesh, {
+                name: material.name,
+                type: geometry.type
+            });
+            object.add(object.point);
+
+            MaterialPanelController.init(object.mesh, object.point);
+        });
+
+        // Shrink tracker meshes a little bit
+        floatingCrystal.point.mesh.scale.multiply(new Vector3(1, 0.9, 1));
+        abstractCube.point.mesh.scale.multiplyScalar(0.9);
+    }
+
+    static addListeners() {
+        Point3D.events.on('click', this.onClick);
+    }
+
+    // Event handlers
+
+    static onClick = () => {
+        if (CameraController.isAnimatingOut) {
+            CameraController.isAnimatingOut = false;
+        }
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/CameraController.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/CameraController.js
new file mode 100644
index 0000000..a0e686e
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/CameraController.js
@@ -0,0 +1,67 @@
+import { Point3D, clearTween, delayedCall } from '@alienkitty/space.js/three';
+
+export class CameraController {
+    static init(camera, controls) {
+        this.camera = camera;
+        this.controls = controls;
+
+        this.isDown = false;
+        this.isTransforming = false;
+        this.isAnimatingOut = false;
+
+        this.addListeners();
+    }
+
+    static addListeners() {
+        this.controls.addEventListener('change', this.onChange);
+        this.controls.addEventListener('start', this.onInteraction);
+        this.controls.addEventListener('end', this.onInteraction);
+    }
+
+    // Event handlers
+
+    static onChange = () => {
+        if (this.isDown) {
+            if (this.isTransforming) {
+                return;
+            }
+
+            this.isTransforming = true;
+            Point3D.enabled = false;
+
+            clearTween(this.timeout);
+
+            this.timeout = delayedCall(300, () => {
+                if (!this.isAnimatingOut) {
+                    return;
+                }
+
+                this.isAnimatingOut = false;
+                Point3D.animateOut();
+            });
+
+            this.isAnimatingOut = true;
+        }
+    };
+
+    static onInteraction = ({ type }) => {
+        if (type === 'start') {
+            this.isDown = true;
+        } else {
+            this.isDown = false;
+            this.isTransforming = false;
+            Point3D.enabled = true;
+        }
+    };
+
+    // Public methods
+
+    static resize = (width, height) => {
+        this.camera.aspect = width / height;
+        this.camera.updateProjectionMatrix();
+    };
+
+    static update = () => {
+        this.controls.update();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/InputManager.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/InputManager.js
new file mode 100755
index 0000000..3411c8f
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/InputManager.js
@@ -0,0 +1,246 @@
+import { Mesh, MeshBasicMaterial, Raycaster, Vector2 } from 'three';
+
+import { Stage } from '@alienkitty/space.js/three';
+import { RigidBodyConfig, RigidBodyType, SphericalJointConfig } from '@alienkitty/alien.js/three/oimophysics';
+
+import { Config } from '../../config/Config.js';
+import { Layer } from '../../config/Layer.js';
+import { WorldController } from './WorldController.js';
+import { CameraController } from './CameraController.js';
+import { PhysicsController } from './PhysicsController.js';
+
+export class InputManager {
+    static init(scene, camera, controls) {
+        this.scene = scene;
+        this.camera = camera;
+        this.controls = controls;
+
+        this.raycaster = new Raycaster();
+        this.raycaster.layers.enable(Layer.PICKING);
+
+        this.objects = [];
+        this.mouse = new Vector2(-1, -1);
+        this.delta = new Vector2();
+        this.coords = new Vector2();
+        this.hover = null;
+        this.selected = null;
+        this.click = null;
+        this.lastTime = null;
+        this.lastMouse = new Vector2();
+        this.raycastInterval = 1 / 10; // 10 frames per second
+        this.lastRaycast = 0;
+        this.body = null;
+        this.joint = null;
+        this.enabled = true;
+
+        this.initMesh();
+
+        this.addListeners();
+    }
+
+    static initMesh() {
+        const { quad } = WorldController;
+
+        let material;
+
+        if (Config.DEBUG) {
+            material = new MeshBasicMaterial({
+                color: 0xff0000,
+                wireframe: true
+            });
+        } else {
+            material = new MeshBasicMaterial({ visible: false });
+        }
+
+        this.dragPlane = new Mesh(quad, material);
+        this.dragPlane.scale.multiplyScalar(200);
+        this.dragPlane.layers.enable(Layer.PICKING);
+    }
+
+    static addListeners() {
+        window.addEventListener('pointerdown', this.onPointerDown);
+        window.addEventListener('pointermove', this.onPointerMove);
+        window.addEventListener('pointerup', this.onPointerUp);
+    }
+
+    static removeListeners() {
+        window.removeEventListener('pointerdown', this.onPointerDown);
+        window.removeEventListener('pointermove', this.onPointerMove);
+        window.removeEventListener('pointerup', this.onPointerUp);
+    }
+
+    // Event handlers
+
+    static onPointerDown = e => {
+        if (!this.enabled) {
+            return;
+        }
+
+        this.lastTime = performance.now();
+        this.lastMouse.set(e.clientX, e.clientY);
+
+        this.onPointerMove(e);
+
+        if (this.hover) {
+            this.click = this.hover;
+        }
+    };
+
+    static onPointerMove = e => {
+        if (!this.enabled) {
+            return;
+        }
+
+        if (e) {
+            this.mouse.x = e.clientX;
+            this.mouse.y = e.clientY;
+            this.coords.x = (this.mouse.x / document.documentElement.clientWidth) * 2 - 1;
+            this.coords.y = 1 - (this.mouse.y / document.documentElement.clientHeight) * 2;
+        }
+
+        if (this.selected) {
+            this.raycaster.setFromCamera(this.coords, this.camera);
+
+            const intersection = this.raycaster.intersectObject(this.dragPlane);
+
+            if (intersection.length) {
+                const point = intersection[0].point;
+
+                PhysicsController.physics.setPosition(this.body, point);
+            }
+
+            return;
+        }
+
+        if (document.elementFromPoint(this.mouse.x, this.mouse.y) instanceof HTMLCanvasElement) {
+            this.raycaster.setFromCamera(this.coords, this.camera);
+
+            const intersection = this.raycaster.intersectObjects(this.objects);
+
+            if (intersection.length) {
+                let object = intersection[0].object;
+
+                if (object.parent.isGroup) {
+                    object = object.parent;
+                }
+
+                if (
+                    PhysicsController.enabled &&
+                    CameraController.isDown &&
+                    !CameraController.isTransforming &&
+                    this.selected !== object
+                ) {
+                    const point = intersection[0].point;
+
+                    const body = new RigidBodyConfig();
+                    body.type = RigidBodyType.STATIC;
+                    body.position.copyFrom(point);
+                    PhysicsController.physics.add(body);
+
+                    const joint = new SphericalJointConfig();
+                    joint.rigidBody1 = PhysicsController.physics.get(object);
+                    joint.rigidBody2 = PhysicsController.physics.get(body);
+                    joint.rigidBody1.getLocalPointTo(point, joint.localAnchor1);
+                    joint.rigidBody2.getLocalPointTo(point, joint.localAnchor2);
+                    joint.springDamper.setSpring(4, 1); // frequency, dampingRatio
+                    PhysicsController.physics.add(joint);
+
+                    this.selected = object;
+                    this.body = body;
+                    this.joint = joint;
+
+                    this.dragPlane.position.copy(point);
+                    this.dragPlane.quaternion.copy(this.camera.quaternion);
+
+                    this.scene.add(this.dragPlane);
+
+                    this.controls.enabled = false;
+
+                    Stage.css({ cursor: 'move' });
+                } else if (!this.hover) {
+                    this.hover = object;
+                    this.hover.onHover({ type: 'over' });
+                    Stage.css({ cursor: 'pointer' });
+                } else if (this.hover !== object) {
+                    this.hover.onHover({ type: 'out' });
+                    this.hover = object;
+                    this.hover.onHover({ type: 'over' });
+                    Stage.css({ cursor: 'pointer' });
+                }
+            } else if (this.hover) {
+                this.hover.onHover({ type: 'out' });
+                this.hover = null;
+                Stage.css({ cursor: '' });
+            }
+        } else if (this.hover) {
+            this.hover.onHover({ type: 'out' });
+            this.hover = null;
+            Stage.css({ cursor: '' });
+        }
+
+        this.delta.subVectors(this.mouse, this.lastMouse);
+    };
+
+    static onPointerUp = e => {
+        if (!this.enabled) {
+            return;
+        }
+
+        if (this.selected) {
+            this.scene.remove(this.dragPlane);
+
+            PhysicsController.physics.remove(this.joint);
+            PhysicsController.physics.remove(this.body);
+
+            this.selected = null;
+
+            this.controls.enabled = true;
+        }
+
+        this.onPointerMove(e);
+
+        if (performance.now() - this.lastTime > 250 || this.delta.length() > 50) {
+            this.click = null;
+            return;
+        }
+
+        if (this.click && this.click === this.hover) {
+            this.click.onClick();
+        }
+
+        this.click = null;
+    };
+
+    // Public methods
+
+    static update = time => {
+        if (!navigator.maxTouchPoints && time - this.lastRaycast > this.raycastInterval) {
+            this.onPointerMove();
+            this.lastRaycast = time;
+        }
+    };
+
+    static add = (...objects) => {
+        this.objects.push(...objects);
+    };
+
+    static remove = (...objects) => {
+        objects.forEach(object => {
+            const index = this.objects.indexOf(object);
+
+            if (~index) {
+                this.objects.splice(index, 1);
+            }
+
+            if (object.parent.isGroup) {
+                object = object.parent;
+            }
+
+            if (object === this.hover) {
+                this.hover.onHover({ type: 'out' });
+                this.hover = null;
+                Stage.css({ cursor: '' });
+            }
+        });
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/PhysicsController.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/PhysicsController.js
new file mode 100644
index 0000000..2ef57c9
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/PhysicsController.js
@@ -0,0 +1,17 @@
+export class PhysicsController {
+    static init(physics) {
+        this.physics = physics;
+
+        this.enabled = false;
+    }
+
+    // Public methods
+
+    static update = () => {
+        if (!this.enabled) {
+            return;
+        }
+
+        this.physics.step();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/RenderManager.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/RenderManager.js
new file mode 100644
index 0000000..0c908aa
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/RenderManager.js
@@ -0,0 +1,190 @@
+import { MathUtils, Mesh, OrthographicCamera, Vector2, WebGLRenderTarget } from 'three';
+
+import { BloomCompositeMaterial, LuminosityMaterial, UnrealBloomBlurMaterial } from '@alienkitty/alien.js/three';
+
+import { WorldController } from './WorldController.js';
+import { CompositeMaterial } from '../../materials/CompositeMaterial.js';
+
+const BlurDirectionX = new Vector2(1, 0);
+const BlurDirectionY = new Vector2(0, 1);
+
+export class RenderManager {
+    static init(renderer, scene, camera, ui) {
+        this.renderer = renderer;
+        this.scene = scene;
+        this.camera = camera;
+        this.ui = ui;
+
+        this.luminosityThreshold = 0.1;
+        this.luminositySmoothing = 1;
+        this.bloomStrength = 0.3;
+        this.bloomRadius = 0.2;
+        this.bloomDistortion = 1.45;
+        this.enabled = true;
+
+        this.initRenderer();
+    }
+
+    static initRenderer() {
+        const { screenTriangle } = WorldController;
+
+        // Fullscreen triangle
+        this.screenCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
+        this.screen = new Mesh(screenTriangle);
+        this.screen.frustumCulled = false;
+
+        // Render targets
+        this.renderTarget = new WebGLRenderTarget(1, 1, {
+            depthBuffer: false
+        });
+
+        this.renderTargetsHorizontal = [];
+        this.renderTargetsVertical = [];
+        this.nMips = 5;
+
+        this.renderTargetBright = this.renderTarget.clone();
+
+        for (let i = 0, l = this.nMips; i < l; i++) {
+            this.renderTargetsHorizontal.push(this.renderTarget.clone());
+            this.renderTargetsVertical.push(this.renderTarget.clone());
+        }
+
+        this.renderTarget.depthBuffer = true;
+
+        // Luminosity high pass material
+        this.luminosityMaterial = new LuminosityMaterial();
+        this.luminosityMaterial.uniforms.uThreshold.value = this.luminosityThreshold;
+        this.luminosityMaterial.uniforms.uSmoothing.value = this.luminositySmoothing;
+
+        // Separable Gaussian blur materials
+        this.blurMaterials = [];
+
+        const kernelSizeArray = [3, 5, 7, 9, 11];
+
+        for (let i = 0, l = this.nMips; i < l; i++) {
+            this.blurMaterials.push(new UnrealBloomBlurMaterial(kernelSizeArray[i]));
+        }
+
+        // Bloom composite material
+        this.bloomCompositeMaterial = new BloomCompositeMaterial();
+        this.bloomCompositeMaterial.uniforms.tBlur1.value = this.renderTargetsVertical[0].texture;
+        this.bloomCompositeMaterial.uniforms.tBlur2.value = this.renderTargetsVertical[1].texture;
+        this.bloomCompositeMaterial.uniforms.tBlur3.value = this.renderTargetsVertical[2].texture;
+        this.bloomCompositeMaterial.uniforms.tBlur4.value = this.renderTargetsVertical[3].texture;
+        this.bloomCompositeMaterial.uniforms.tBlur5.value = this.renderTargetsVertical[4].texture;
+        this.bloomCompositeMaterial.uniforms.uBloomFactors.value = this.bloomFactors();
+
+        // Composite material
+        this.compositeMaterial = new CompositeMaterial();
+        this.compositeMaterial.uniforms.uBloomDistortion.value = this.bloomDistortion;
+    }
+
+    static bloomFactors() {
+        const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];
+
+        for (let i = 0, l = this.nMips; i < l; i++) {
+            const factor = bloomFactors[i];
+            bloomFactors[i] = this.bloomStrength * MathUtils.lerp(factor, 1.2 - factor, this.bloomRadius);
+        }
+
+        return bloomFactors;
+    }
+
+    // Public methods
+
+    static invert = isInverted => {
+        if (isInverted) { // Light colour is inverted
+            this.luminosityMaterial.uniforms.uThreshold.value = 0.75;
+            this.compositeMaterial.uniforms.uGamma.value = true;
+        } else {
+            this.luminosityMaterial.uniforms.uThreshold.value = this.luminosityThreshold;
+            this.compositeMaterial.uniforms.uGamma.value = false;
+        }
+
+        this.ui.setPanelValue('Thresh', this.luminosityMaterial.uniforms.uThreshold.value);
+        this.ui.setPanelValue('Gamma', this.compositeMaterial.uniforms.uGamma.value);
+    };
+
+    static resize = (width, height, dpr) => {
+        this.renderer.setPixelRatio(dpr);
+        this.renderer.setSize(width, height);
+
+        width = Math.round(width * dpr);
+        height = Math.round(height * dpr);
+
+        this.renderTarget.setSize(width, height);
+
+        width = MathUtils.floorPowerOfTwo(width) / 2;
+        height = MathUtils.floorPowerOfTwo(height) / 2;
+
+        this.renderTargetBright.setSize(width, height);
+
+        for (let i = 0, l = this.nMips; i < l; i++) {
+            this.renderTargetsHorizontal[i].setSize(width, height);
+            this.renderTargetsVertical[i].setSize(width, height);
+
+            this.blurMaterials[i].uniforms.uResolution.value.set(width, height);
+
+            width /= 2;
+            height /= 2;
+        }
+    };
+
+    static update = () => {
+        const renderer = this.renderer;
+        const scene = this.scene;
+        const camera = this.camera;
+
+        if (!this.enabled) {
+            renderer.setRenderTarget(null);
+            renderer.render(scene, camera);
+            return;
+        }
+
+        const renderTarget = this.renderTarget;
+        const renderTargetBright = this.renderTargetBright;
+        const renderTargetsHorizontal = this.renderTargetsHorizontal;
+        const renderTargetsVertical = this.renderTargetsVertical;
+
+        // Scene pass
+        renderer.setRenderTarget(renderTarget);
+        renderer.render(scene, camera);
+
+        // Extract bright areas
+        this.luminosityMaterial.uniforms.tMap.value = renderTarget.texture;
+        this.screen.material = this.luminosityMaterial;
+        renderer.setRenderTarget(renderTargetBright);
+        renderer.render(this.screen, this.screenCamera);
+
+        // Blur all the mips progressively
+        let inputRenderTarget = renderTargetBright;
+
+        for (let i = 0, l = this.nMips; i < l; i++) {
+            this.screen.material = this.blurMaterials[i];
+
+            this.blurMaterials[i].uniforms.tMap.value = inputRenderTarget.texture;
+            this.blurMaterials[i].uniforms.uDirection.value = BlurDirectionX;
+            renderer.setRenderTarget(renderTargetsHorizontal[i]);
+            renderer.render(this.screen, this.screenCamera);
+
+            this.blurMaterials[i].uniforms.tMap.value = this.renderTargetsHorizontal[i].texture;
+            this.blurMaterials[i].uniforms.uDirection.value = BlurDirectionY;
+            renderer.setRenderTarget(renderTargetsVertical[i]);
+            renderer.render(this.screen, this.screenCamera);
+
+            inputRenderTarget = renderTargetsVertical[i];
+        }
+
+        // Composite all the mips
+        this.screen.material = this.bloomCompositeMaterial;
+        renderer.setRenderTarget(renderTargetsHorizontal[0]);
+        renderer.render(this.screen, this.screenCamera);
+
+        // Composite pass (render to screen)
+        this.compositeMaterial.uniforms.tScene.value = renderTarget.texture;
+        this.compositeMaterial.uniforms.tBloom.value = renderTargetsHorizontal[0].texture;
+        this.screen.material = this.compositeMaterial;
+        renderer.setRenderTarget(null);
+        renderer.render(this.screen, this.screenCamera);
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/SceneController.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/SceneController.js
new file mode 100644
index 0000000..8a7a448
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/SceneController.js
@@ -0,0 +1,43 @@
+import { wait } from '@alienkitty/space.js/three';
+
+import { RenderManager } from './RenderManager.js';
+
+export class SceneController {
+    static init(view) {
+        this.view = view;
+    }
+
+    // Public methods
+
+    static update = time => {
+        if (!this.view.visible) {
+            return;
+        }
+
+        this.view.update(time);
+    };
+
+    static animateIn = () => {
+        this.view.animateIn();
+
+        this.view.visible = true;
+    };
+
+    static ready = async () => {
+        await this.view.ready();
+
+        // Centre objects for prerender
+        const currentPositions = this.view.children.map(object => object.position.clone());
+
+        this.view.children.forEach(object => object.position.set(0, 0, 0));
+        this.view.visible = true;
+
+        RenderManager.update();
+
+        await wait(500);
+
+        // Restore positions
+        this.view.visible = false;
+        this.view.children.forEach((object, i) => object.position.copy(currentPositions[i]));
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/WorldController.js b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/WorldController.js
new file mode 100755
index 0000000..3fc8c0c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/controllers/world/WorldController.js
@@ -0,0 +1,141 @@
+import { /* BasicShadowMap,  */Color, ColorManagement, DirectionalLight, HemisphereLight, LinearSRGBColorSpace, PerspectiveCamera, PlaneGeometry, Scene, Vector2, WebGLRenderer } from 'three';
+
+import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
+
+ColorManagement.enabled = false; // Disable color management
+
+import { BufferGeometryLoader, EnvironmentTextureLoader, Interface, Stage, TextureLoader, getFrustum, getFullscreenTriangle } from '@alienkitty/space.js/three';
+import { OimoPhysics } from '@alienkitty/alien.js/three/oimophysics';
+
+export class WorldController {
+    static init() {
+        this.initWorld();
+        this.initLights();
+        this.initLoaders();
+        this.initEnvironment();
+        this.initControls();
+        this.initPhysics();
+
+        this.addListeners();
+    }
+
+    static initWorld() {
+        this.renderer = new WebGLRenderer({
+            powerPreference: 'high-performance',
+            stencil: false,
+            antialias: true,
+            // alpha: true
+        });
+        this.renderer.outputColorSpace = LinearSRGBColorSpace;
+
+        // this.element = this.renderer.domElement;
+        this.element = new Interface(this.renderer.domElement);
+        this.element.css({ opacity: 0 });
+
+        // Shadows
+        // this.renderer.shadowMap.enabled = true;
+        // this.renderer.shadowMap.type = BasicShadowMap;
+
+        // 3D scene
+        this.scene = new Scene();
+        this.scene.background = new Color(Stage.rootStyle.getPropertyValue('--bg-color').trim());
+        this.camera = new PerspectiveCamera(30);
+        this.camera.near = 0.5;
+        this.camera.far = 40;
+        this.camera.position.set(0, 6, 8);
+        this.camera.lookAt(this.scene.position);
+
+        // Global geometries
+        this.quad = new PlaneGeometry(1, 1);
+        this.screenTriangle = getFullscreenTriangle();
+
+        // Global uniforms
+        this.resolution = { value: new Vector2() };
+        this.texelSize = { value: new Vector2() };
+        this.aspect = { value: 1 };
+        this.time = { value: 0 };
+        this.frame = { value: 0 };
+
+        // Global settings
+        this.anisotropy = this.renderer.capabilities.getMaxAnisotropy();
+    }
+
+    static initLights() {
+        this.scene.add(new HemisphereLight(0xffffff, 0x888888, 3));
+
+        const light = new DirectionalLight(0xffffff, 2);
+        light.position.set(5, 5, 5);
+        // light.castShadow = true;
+        // light.shadow.mapSize.width = 2048;
+        // light.shadow.mapSize.height = 2048;
+        this.scene.add(light);
+    }
+
+    static initLoaders() {
+        this.textureLoader = new TextureLoader();
+        /* this.textureLoader.setOptions({
+            preserveData: true
+        });
+        this.textureLoader.cache = true; */
+
+        this.environmentLoader = new EnvironmentTextureLoader(this.renderer);
+        this.bufferGeometryLoader = new BufferGeometryLoader();
+    }
+
+    static async initEnvironment() {
+        this.scene.environment = await this.loadEnvironmentTexture('assets/textures/env/jewelry_black_contrast.jpg');
+    }
+
+    static initControls() {
+        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
+        this.controls.enableDamping = true;
+    }
+
+    static initPhysics() {
+        this.physics = new OimoPhysics();
+    }
+
+    static addListeners() {
+        this.renderer.domElement.addEventListener('touchstart', this.onTouchStart);
+    }
+
+    // Event handlers
+
+    static onTouchStart = e => {
+        e.preventDefault();
+    };
+
+    // Public methods
+
+    static resize = (width, height, dpr) => {
+        width = Math.round(width * dpr);
+        height = Math.round(height * dpr);
+
+        this.resolution.value.set(width, height);
+        this.texelSize.value.set(1 / width, 1 / height);
+        this.aspect.value = width / height;
+    };
+
+    static update = (time, delta, frame) => {
+        this.time.value = time;
+        this.frame.value = frame;
+    };
+
+    static animateIn = () => {
+        this.element.tween({ opacity: 1 }, 1000, 'linear', () => {
+            this.element.css({ opacity: '' });
+        });
+    };
+
+    static getTexture = (path, callback) => this.textureLoader.load(path, callback);
+
+    static loadTexture = path => this.textureLoader.loadAsync(path);
+
+    static loadEnvironmentTexture = path => this.environmentLoader.loadAsync(path);
+
+    static getBufferGeometry = (path, callback) => this.bufferGeometryLoader.load(path, callback);
+
+    static loadBufferGeometry = path => this.bufferGeometryLoader.loadAsync(path);
+
+    static getFrustum = offsetZ => getFrustum(this.camera, offsetZ);
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/main.js b/node_modules/@alienkitty/space.js/examples/about/src/main.js
new file mode 100755
index 0000000..64d1610
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/main.js
@@ -0,0 +1 @@
+export { Preloader } from './controllers/Preloader.js';
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/materials/CompositeMaterial.js b/node_modules/@alienkitty/space.js/examples/about/src/materials/CompositeMaterial.js
new file mode 100644
index 0000000..e5b6526
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/materials/CompositeMaterial.js
@@ -0,0 +1,24 @@
+import { GLSL3, NoBlending, RawShaderMaterial } from 'three';
+
+import { vertexShader, fragmentShader } from '../shaders/CompositeShader.js';
+
+export class CompositeMaterial extends RawShaderMaterial {
+    constructor() {
+        super({
+            glslVersion: GLSL3,
+            uniforms: {
+                tScene: { value: null },
+                tBloom: { value: null },
+                uBloomDistortion: { value: 1.45 },
+                uToneMapping: { value: false },
+                uExposure: { value: 1 },
+                uGamma: { value: false }
+            },
+            vertexShader,
+            fragmentShader,
+            blending: NoBlending,
+            depthTest: false,
+            depthWrite: false
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/shaders/CompositeShader.js b/node_modules/@alienkitty/space.js/examples/about/src/shaders/CompositeShader.js
new file mode 100644
index 0000000..999feeb
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/shaders/CompositeShader.js
@@ -0,0 +1,55 @@
+// Based on https://github.com/mrdoob/three.js/blob/dev/examples/jsm/shaders/ACESFilmicToneMappingShader.js by WestLangley
+// Based on https://github.com/mrdoob/three.js/blob/dev/examples/jsm/shaders/GammaCorrectionShader.js by WestLangley
+
+import rgbshift from '@alienkitty/alien.js/src/shaders/modules/rgbshift/rgbshift.glsl.js';
+import encodings from '@alienkitty/alien.js/src/shaders/modules/encodings/encodings.glsl.js';
+
+export const vertexShader = /* glsl */ `
+    in vec3 position;
+    in vec2 uv;
+
+    out vec2 vUv;
+
+    void main() {
+        vUv = uv;
+
+        gl_Position = vec4(position, 1.0);
+    }
+`;
+
+export const fragmentShader = /* glsl */ `
+    precision highp float;
+
+    uniform sampler2D tScene;
+    uniform sampler2D tBloom;
+    uniform float uBloomDistortion;
+    uniform bool uToneMapping;
+    uniform float uExposure;
+    uniform bool uGamma;
+
+    in vec2 vUv;
+
+    out vec4 FragColor;
+
+    ${rgbshift}
+    ${encodings}
+
+    void main() {
+        FragColor = texture(tScene, vUv);
+
+        float angle = length(vUv - 0.5);
+        float amount = 0.001 * uBloomDistortion;
+
+        FragColor.rgb += getRGB(tBloom, vUv, angle, amount).rgb;
+
+        if (uToneMapping) {
+            FragColor.rgb *= uExposure;
+
+            FragColor = vec4(ACESFilmicToneMapping(FragColor.rgb), FragColor.a);
+        }
+
+        if (uGamma) {
+            FragColor = LinearToSRGB(FragColor);
+        }
+    }
+`;
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/PreloaderView.js b/node_modules/@alienkitty/space.js/examples/about/src/views/PreloaderView.js
new file mode 100755
index 0000000..3394dab
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/PreloaderView.js
@@ -0,0 +1,74 @@
+import { Interface } from '@alienkitty/space.js/three';
+
+import { ProgressCanvas } from './ui/ProgressCanvas.js';
+
+export class PreloaderView extends Interface {
+    constructor() {
+        super('.preloader');
+
+        this.initHTML();
+        this.initView();
+
+        this.addListeners();
+    }
+
+    initHTML() {
+        this.css({
+            position: 'absolute',
+            left: 0,
+            top: 0,
+            width: '100%',
+            height: '100%',
+            backgroundColor: 'var(--bg-color)',
+            zIndex: 100,
+            pointerEvents: 'none'
+        });
+    }
+
+    initView() {
+        this.view = new ProgressCanvas();
+        this.view.css({
+            position: 'absolute',
+            left: '50%',
+            top: '50%',
+            marginLeft: -this.view.width / 2,
+            marginTop: -this.view.height / 2
+        });
+        this.add(this.view);
+    }
+
+    addListeners() {
+        this.view.events.on('complete', this.onComplete);
+    }
+
+    removeListeners() {
+        this.view.events.off('complete', this.onComplete);
+    }
+
+    // Event handlers
+
+    onProgress = e => {
+        this.view.onProgress(e);
+    };
+
+    onComplete = () => {
+        this.events.emit('complete');
+    };
+
+    // Public methods
+
+    animateIn = () => {
+        this.view.animateIn();
+    };
+
+    animateOut = () => {
+        this.view.animateOut();
+        return this.tween({ opacity: 0 }, 250, 'easeOutSine', 500);
+    };
+
+    destroy = () => {
+        this.removeListeners();
+
+        return super.destroy();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/SceneView.js b/node_modules/@alienkitty/space.js/examples/about/src/views/SceneView.js
new file mode 100644
index 0000000..a55aed6
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/SceneView.js
@@ -0,0 +1,61 @@
+import { Group } from 'three';
+
+import { InputManager } from '../controllers/world/InputManager.js';
+import { Floor } from './scene/Floor.js';
+import { DarkPlanet } from './scene/DarkPlanet.js';
+import { FloatingCrystal } from './scene/FloatingCrystal.js';
+import { AbstractCube } from './scene/AbstractCube.js';
+
+export class SceneView extends Group {
+    constructor() {
+        super();
+
+        this.visible = false;
+
+        this.initViews();
+    }
+
+    initViews() {
+        this.floor = new Floor();
+        this.add(this.floor);
+
+        this.darkPlanet = new DarkPlanet();
+        this.add(this.darkPlanet);
+
+        this.floatingCrystal = new FloatingCrystal();
+        this.add(this.floatingCrystal);
+
+        this.abstractCube = new AbstractCube();
+        this.add(this.abstractCube);
+    }
+
+    addListeners() {
+        InputManager.add(this.darkPlanet, this.floatingCrystal, this.abstractCube);
+    }
+
+    removeListeners() {
+        InputManager.remove(this.darkPlanet, this.floatingCrystal, this.abstractCube);
+    }
+
+    // Public methods
+
+    invert = isInverted => {
+        this.floor.invert(isInverted);
+    };
+
+    update = time => {
+        this.darkPlanet.update(time);
+        this.floatingCrystal.update(time);
+        this.abstractCube.update(time);
+    };
+
+    animateIn = () => {
+        this.addListeners();
+    };
+
+    ready = () => Promise.all([
+        this.darkPlanet.initMesh(),
+        this.floatingCrystal.initMesh(),
+        this.abstractCube.initMesh()
+    ]);
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/UI.js b/node_modules/@alienkitty/space.js/examples/about/src/views/UI.js
new file mode 100755
index 0000000..3cb22b1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/UI.js
@@ -0,0 +1,71 @@
+import { Interface, Stage } from '@alienkitty/space.js/three';
+
+import { Header } from './ui/Header.js';
+
+export class UI extends Interface {
+    constructor() {
+        super('.ui');
+
+        this.invertColors = {
+            light: Stage.rootStyle.getPropertyValue('--ui-invert-light-color').trim(),
+            lightTriplet: Stage.rootStyle.getPropertyValue('--ui-invert-light-color-triplet').trim(),
+            lightLine: Stage.rootStyle.getPropertyValue('--ui-invert-light-color-line').trim(),
+            dark: Stage.rootStyle.getPropertyValue('--ui-invert-dark-color').trim(),
+            darkTriplet: Stage.rootStyle.getPropertyValue('--ui-invert-dark-color-triplet').trim(),
+            darkLine: Stage.rootStyle.getPropertyValue('--ui-invert-dark-color-line').trim()
+        };
+
+        this.initHTML();
+        this.initViews();
+    }
+
+    initHTML() {
+        this.css({
+            position: 'fixed',
+            left: 0,
+            top: 0,
+            width: '100%',
+            height: '100%',
+            pointerEvents: 'none'
+        });
+    }
+
+    initViews() {
+        this.header = new Header();
+        this.add(this.header);
+    }
+
+    // Public methods
+
+    addPanel = item => {
+        this.header.info.panel.add(item);
+    };
+
+    setPanelValue = (label, value) => {
+        this.header.info.panel.setPanelValue(label, value);
+    };
+
+    setPanelIndex = (label, index) => {
+        this.header.info.panel.setPanelIndex(label, index);
+    };
+
+    invert = isInverted => {
+        Stage.root.style.setProperty('--ui-color', isInverted ? this.invertColors.light : this.invertColors.dark);
+        Stage.root.style.setProperty('--ui-color-triplet', isInverted ? this.invertColors.lightTriplet : this.invertColors.darkTriplet);
+        Stage.root.style.setProperty('--ui-color-line', isInverted ? this.invertColors.lightLine : this.invertColors.darkLine);
+
+        Stage.events.emit('invert', { invert: isInverted });
+    };
+
+    update = () => {
+        this.header.info.update();
+    };
+
+    animateIn = () => {
+        this.header.animateIn();
+    };
+
+    animateOut = () => {
+        this.header.animateOut();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/scene/AbstractCube.js b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/AbstractCube.js
new file mode 100644
index 0000000..bcc19d9
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/AbstractCube.js
@@ -0,0 +1,66 @@
+import { BoxGeometry, Color, Group, MathUtils, Mesh, MeshStandardMaterial, Vector3 } from 'three';
+
+import { WorldController } from '../../controllers/world/WorldController.js';
+import { PhysicsController } from '../../controllers/world/PhysicsController.js';
+
+export class AbstractCube extends Group {
+    constructor() {
+        super();
+
+        this.position.x = 2.5;
+        this.rotation.x = MathUtils.degToRad(-45);
+        this.rotation.z = MathUtils.degToRad(-45);
+
+        this.force = new Vector3();
+        this.contact = false;
+    }
+
+    async initMesh() {
+        const { physics } = WorldController;
+
+        const geometry = new BoxGeometry();
+        geometry.computeTangents();
+
+        const material = new MeshStandardMaterial({
+            name: 'Abstract Cube',
+            color: new Color().offsetHSL(0, 0, -0.65),
+            metalness: 0.7,
+            roughness: 0.7,
+            envMapIntensity: 1.2,
+            flatShading: true
+        });
+
+        const mesh = new Mesh(geometry, material);
+        // mesh.castShadow = true;
+        // mesh.receiveShadow = true;
+        this.add(mesh);
+
+        physics.add(mesh, { density: 2, autoSleep: false });
+
+        this.mesh = mesh;
+    }
+
+    // Event handlers
+
+    onHover = ({ type }) => {
+        console.log('AbstractCube', type);
+        // if (type === 'over') {
+        // } else {
+        // }
+    };
+
+    onClick = () => {
+        console.log('AbstractCube', 'click');
+        // open('https://alien.js.org/');
+    };
+
+    // Public methods
+
+    update = () => {
+        if (PhysicsController.enabled) {
+            return;
+        }
+
+        this.rotation.y -= 0.005;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/scene/DarkPlanet.js b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/DarkPlanet.js
new file mode 100644
index 0000000..347ac1d
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/DarkPlanet.js
@@ -0,0 +1,70 @@
+import { Color, Group, MathUtils, Mesh, MeshStandardMaterial } from 'three';
+
+import { getSphericalCube } from '@alienkitty/space.js/three';
+
+import { WorldController } from '../../controllers/world/WorldController.js';
+import { PhysicsController } from '../../controllers/world/PhysicsController.js';
+
+export class DarkPlanet extends Group {
+    constructor() {
+        super();
+
+        this.position.x = -2.5;
+
+        // 25 degree tilt like Mars
+        this.rotation.z = MathUtils.degToRad(25);
+    }
+
+    async initMesh() {
+        const { physics } = WorldController;
+
+        const geometry = getSphericalCube(0.6, 20);
+        geometry.computeTangents();
+
+        // For sphere geometry physics
+        geometry.type = 'SphereGeometry';
+        geometry.parameters.radius = geometry.parameters.width;
+
+        const material = new MeshStandardMaterial({
+            name: 'Dark Planet',
+            color: new Color().offsetHSL(0, 0, -0.65),
+            metalness: 0.7,
+            roughness: 1,
+            envMapIntensity: 1.2
+        });
+
+        const mesh = new Mesh(geometry, material);
+        // mesh.castShadow = true;
+        // mesh.receiveShadow = true;
+        this.add(mesh);
+
+        physics.add(mesh, { density: 2, autoSleep: false });
+
+        this.mesh = mesh;
+    }
+
+    // Event handlers
+
+    onHover = ({ type }) => {
+        console.log('DarkPlanet', type);
+        // if (type === 'over') {
+        // } else {
+        // }
+    };
+
+    onClick = () => {
+        console.log('DarkPlanet', 'click');
+        // open('https://alien.js.org/');
+    };
+
+    // Public methods
+
+    update = () => {
+        if (PhysicsController.enabled) {
+            return;
+        }
+
+        // Counter clockwise rotation
+        this.mesh.rotation.y += 0.005;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/scene/FloatingCrystal.js b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/FloatingCrystal.js
new file mode 100644
index 0000000..0ba00eb
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/FloatingCrystal.js
@@ -0,0 +1,71 @@
+import { Color, Group, Mesh, MeshStandardMaterial, OctahedronGeometry } from 'three';
+
+import { mergeVertices } from 'three/addons/utils/BufferGeometryUtils.js';
+
+import { WorldController } from '../../controllers/world/WorldController.js';
+import { PhysicsController } from '../../controllers/world/PhysicsController.js';
+
+export class FloatingCrystal extends Group {
+    constructor() {
+        super();
+
+        this.position.y = 0.7;
+
+        // Resize to rhombus shape
+        this.scale.set(0.5, 1, 0.5);
+    }
+
+    async initMesh() {
+        const { physics } = WorldController;
+
+        let geometry = new OctahedronGeometry();
+
+        // Convert to indexed geometry
+        geometry = mergeVertices(geometry);
+
+        geometry.computeTangents();
+
+        const material = new MeshStandardMaterial({
+            name: 'Floating Crystal',
+            color: new Color().offsetHSL(0, 0, -0.65),
+            metalness: 0.7,
+            roughness: 0.7,
+            envMapIntensity: 1.2,
+            flatShading: true
+        });
+
+        const mesh = new Mesh(geometry, material);
+        // mesh.castShadow = true;
+        // mesh.receiveShadow = true;
+        this.add(mesh);
+
+        physics.add(mesh, { density: 2, autoSleep: false });
+
+        this.mesh = mesh;
+    }
+
+    // Event handlers
+
+    onHover = ({ type }) => {
+        console.log('FloatingCrystal', type);
+        // if (type === 'over') {
+        // } else {
+        // }
+    };
+
+    onClick = () => {
+        console.log('FloatingCrystal', 'click');
+        // open('https://alien.js.org/');
+    };
+
+    // Public methods
+
+    update = time => {
+        if (PhysicsController.enabled) {
+            return;
+        }
+
+        this.position.y = 0.7 + Math.sin(time) * 0.1;
+        this.rotation.y += 0.01;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/scene/Floor.js b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/Floor.js
new file mode 100644
index 0000000..7e0b7ed
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/Floor.js
@@ -0,0 +1,50 @@
+import { BoxGeometry, Color, Group, Mesh } from 'three';
+
+import { WorldController } from '../../controllers/world/WorldController.js';
+import { GridHelper } from './GridHelper.js';
+
+export class Floor extends Group {
+    constructor() {
+        super();
+
+        this.position.y = -1.36; // -0.86 - 1 / 2
+
+        this.initMesh();
+    }
+
+    initMesh() {
+        const { physics } = WorldController;
+
+        this.gridHelper = new GridHelper();
+        this.gridHelper.position.y = 0.494; // 1 / 2 - 0.006
+        this.add(this.gridHelper);
+
+        // Physics mesh
+        const floor = new Mesh(new BoxGeometry(11, 1, 11));
+        floor.geometry.setDrawRange(0, 0); // Avoid rendering geometry
+        this.add(floor);
+
+        physics.add(floor, { density: 0, autoSleep: false });
+    }
+
+    // Public methods
+
+    invert = isInverted => {
+        const colorStyle = `rgb(${getComputedStyle(document.querySelector(':root')).getPropertyValue('--ui-color-triplet').trim()})`;
+        const color = new Color(colorStyle);
+
+        if (!isInverted) { // Dark colour is muted
+            color.offsetHSL(0, 0, -0.65);
+        }
+
+        const array = color.toArray();
+
+        const colors = this.gridHelper.geometry.getAttribute('color');
+
+        for (let i = 0; i < colors.count; i++) {
+            colors.setXYZ(i, ...array);
+        }
+
+        colors.needsUpdate = true;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/scene/GridHelper.js b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/GridHelper.js
new file mode 100644
index 0000000..ac79013
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/scene/GridHelper.js
@@ -0,0 +1,33 @@
+import { BufferGeometry, Color, Float32BufferAttribute, LineBasicMaterial, LineSegments } from 'three';
+
+export class GridHelper extends LineSegments {
+    constructor(size = 10, divisions = 10, color = 0x888888) {
+        color = new Color(color);
+
+        const step = size / divisions;
+        const halfSize = size / 2;
+
+        const vertices = [];
+        const colors = [];
+
+        for (let i = 0, j = 0, k = -halfSize; i <= divisions + 1; i++, k += step) {
+            for (let l = -halfSize; l <= divisions + 1 - halfSize; l++) {
+                vertices.push(-0.5625 + l, 0, k - 0.5, -0.4375 + l, 0, k - 0.5);
+                vertices.push(-0.5 + l, 0, k - 0.5625, -0.5 + l, 0, k - 0.4375);
+
+                color.toArray(colors, j); j += 3;
+                color.toArray(colors, j); j += 3;
+                color.toArray(colors, j); j += 3;
+                color.toArray(colors, j); j += 3;
+            }
+        }
+
+        const geometry = new BufferGeometry();
+        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
+        geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
+
+        const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
+
+        super(geometry, material);
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/ui/Header.js b/node_modules/@alienkitty/space.js/examples/about/src/views/ui/Header.js
new file mode 100755
index 0000000..dd30018
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/ui/Header.js
@@ -0,0 +1,80 @@
+import { HeaderInfo, Interface } from '@alienkitty/space.js/three';
+
+import { Config } from '../../config/Config.js';
+import { NavLink } from './NavLink.js';
+
+export class Header extends Interface {
+    constructor() {
+        super('.header');
+
+        this.initHTML();
+        this.initViews();
+
+        this.addListeners();
+        this.onResize();
+    }
+
+    initHTML() {
+        this.css({
+            position: 'absolute',
+            left: 20,
+            top: 20,
+            right: 20
+        });
+    }
+
+    initViews() {
+        this.about = new NavLink('Space.js', 'https://github.com/alienkitty/space.js');
+        this.about.css({
+            x: -10,
+            opacity: 0
+        });
+        this.add(this.about);
+
+        this.info = new HeaderInfo();
+        this.info.css({
+            x: -10,
+            opacity: 0
+        });
+        this.add(this.info);
+    }
+
+    addListeners() {
+        window.addEventListener('resize', this.onResize);
+    }
+
+    removeListeners() {
+        window.removeEventListener('resize', this.onResize);
+    }
+
+    // Event handlers
+
+    onResize = () => {
+        if (document.documentElement.clientWidth < Config.BREAKPOINT) {
+            this.css({
+                left: 10,
+                top: 10,
+                right: 10
+            });
+        } else {
+            this.css({
+                left: 20,
+                top: 20,
+                right: 20
+            });
+        }
+    };
+
+    // Public methods
+
+    animateIn = () => {
+        this.about.tween({ x: 0, opacity: 1 }, 1000, 'easeOutQuart');
+        this.info.tween({ x: 0, opacity: 1 }, 1000, 'easeOutQuart', 200);
+    };
+
+    destroy = () => {
+        this.removeListeners();
+
+        return super.destroy();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/ui/NavLink.js b/node_modules/@alienkitty/space.js/examples/about/src/views/ui/NavLink.js
new file mode 100755
index 0000000..97455b1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/ui/NavLink.js
@@ -0,0 +1,86 @@
+import { Interface } from '@alienkitty/space.js/three';
+
+export class NavLink extends Interface {
+    constructor(title, link) {
+        super('.link', 'a');
+
+        this.title = title;
+        this.link = link;
+        this.letters = [];
+
+        this.initHTML();
+        this.initText();
+
+        this.addListeners();
+    }
+
+    initHTML() {
+        this.css({
+            cssFloat: 'left',
+            padding: 10,
+            fontWeight: '700',
+            fontSize: 11,
+            lineHeight: 18,
+            letterSpacing: '0.03em',
+            textTransform: 'uppercase',
+            textDecoration: 'none',
+            whiteSpace: 'nowrap',
+            pointerEvents: 'auto',
+            webkitUserSelect: 'none',
+            userSelect: 'none'
+        });
+        this.attr({ href: this.link });
+    }
+
+    initText() {
+        const split = this.title.split('');
+        split.forEach(str => {
+            if (str === ' ') {
+                str = '&nbsp';
+            }
+
+            const letter = new Interface(null, 'span');
+            letter.css({ display: 'inline-block' });
+            letter.html(str);
+            this.add(letter);
+
+            this.letters.push(letter);
+        });
+    }
+
+    addListeners() {
+        this.element.addEventListener('mouseenter', this.onHover);
+        this.element.addEventListener('mouseleave', this.onHover);
+        this.element.addEventListener('click', this.onClick);
+    }
+
+    removeListeners() {
+        this.element.removeEventListener('mouseenter', this.onHover);
+        this.element.removeEventListener('mouseleave', this.onHover);
+        this.element.removeEventListener('click', this.onClick);
+    }
+
+    // Event handlers
+
+    onHover = ({ type }) => {
+        if (type === 'mouseenter') {
+            this.letters.forEach((letter, i) => {
+                letter.clearTween().tween({ y: -5, opacity: 0 }, 125, 'easeOutCubic', i * 15, () => {
+                    letter.css({ y: 5 }).tween({ y: 0, opacity: 1 }, 300, 'easeOutCubic');
+                });
+            });
+        }
+    };
+
+    onClick = () => {
+        this.events.emit('click');
+    };
+
+    // Public methods
+
+    destroy = () => {
+        this.removeListeners();
+
+        return super.destroy();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/about/src/views/ui/ProgressCanvas.js b/node_modules/@alienkitty/space.js/examples/about/src/views/ui/ProgressCanvas.js
new file mode 100644
index 0000000..4d29ffc
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/about/src/views/ui/ProgressCanvas.js
@@ -0,0 +1,101 @@
+import { Interface, Stage, clearTween, degToRad, ticker, tween } from '@alienkitty/space.js/three';
+
+export class ProgressCanvas extends Interface {
+    constructor() {
+        super(null, 'canvas');
+
+        const size = 32;
+
+        this.width = size;
+        this.height = size;
+        this.x = size / 2;
+        this.y = size / 2;
+        this.radius = size * 0.4;
+        this.startAngle = degToRad(-90);
+        this.progress = 0;
+        this.needsUpdate = false;
+
+        this.initCanvas();
+    }
+
+    initCanvas() {
+        this.context = this.element.getContext('2d');
+    }
+
+    addListeners() {
+        ticker.add(this.onUpdate);
+    }
+
+    removeListeners() {
+        ticker.remove(this.onUpdate);
+    }
+
+    // Event handlers
+
+    onUpdate = () => {
+        if (this.needsUpdate) {
+            this.update();
+        }
+    };
+
+    onProgress = ({ progress }) => {
+        clearTween(this);
+
+        this.needsUpdate = true;
+
+        tween(this, { progress }, 500, 'easeOutCubic', () => {
+            this.needsUpdate = false;
+
+            if (this.progress >= 1) {
+                this.onComplete();
+            }
+        });
+    };
+
+    onComplete = () => {
+        this.removeListeners();
+
+        this.events.emit('complete');
+    };
+
+    // Public methods
+
+    resize = () => {
+        const dpr = 2;
+
+        this.element.width = Math.round(this.width * dpr);
+        this.element.height = Math.round(this.height * dpr);
+        this.element.style.width = this.width + 'px';
+        this.element.style.height = this.height + 'px';
+        this.context.scale(dpr, dpr);
+
+        this.context.lineWidth = 1.5;
+        this.context.strokeStyle = Stage.rootStyle.getPropertyValue('--ui-color').trim();
+
+        this.update();
+    };
+
+    update = () => {
+        this.context.clearRect(0, 0, this.element.width, this.element.height);
+        this.context.beginPath();
+        this.context.arc(this.x, this.y, this.radius, this.startAngle, this.startAngle + degToRad(360 * this.progress));
+        this.context.stroke();
+    };
+
+    animateIn = () => {
+        this.addListeners();
+        this.resize();
+    };
+
+    animateOut = () => {
+        this.tween({ scale: 1.1, opacity: 0 }, 400, 'easeInCubic');
+    };
+
+    destroy = () => {
+        this.removeListeners();
+
+        clearTween(this);
+
+        return super.destroy();
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/examples/assets/css/style.css b/node_modules/@alienkitty/space.js/examples/assets/css/style.css
new file mode 100644
index 0000000..83911d0
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/css/style.css
@@ -0,0 +1,70 @@
+:root {
+    --bg-color: #0e0e0e;
+    --ui-font-family: 'Roboto Mono', monospace;
+    --ui-font-weight: 400;
+    --ui-font-size: 11px;
+    --ui-line-height: 15px;
+    --ui-letter-spacing: 0.02em;
+    --ui-number-letter-spacing: 0.5px;
+    --ui-secondary-font-size: 10px;
+    --ui-secondary-letter-spacing: 0.5px;
+    --ui-color: rgba(255, 255, 255, 0.94);
+    --ui-color-triplet: 255, 255, 255;
+    --ui-color-line: rgba(255, 255, 255, 0.5);
+    --ui-invert-light-color: #000;
+    --ui-invert-light-color-triplet: 0, 0, 0;
+    --ui-invert-light-color-line: #000;
+    --ui-invert-dark-color: rgba(255, 255, 255, 0.94);
+    --ui-invert-dark-color-triplet: 255, 255, 255;
+    --ui-invert-dark-color-line: rgba(255, 255, 255, 0.5);
+}
+
+*, :after, :before {
+    box-sizing: border-box;
+    margin: 0;
+    padding: 0;
+    border: 0;
+    touch-action: none;
+    -webkit-touch-callout: none;
+    -webkit-user-drag: none;
+    -webkit-text-size-adjust: none;
+    text-size-adjust: none;
+}
+
+*:focus {
+    outline: 0;
+    box-shadow: none;
+}
+
+html, body {
+    width: 100%;
+    height: 100%;
+}
+
+body {
+    position: fixed;
+    font-family: var(--ui-font-family);
+    font-weight: var(--ui-font-weight);
+    font-size: var(--ui-font-size);
+    line-height: var(--ui-line-height);
+    letter-spacing: var(--ui-letter-spacing);
+    background-color: var(--bg-color);
+    color: var(--ui-color);
+    -webkit-tap-highlight-color: transparent;
+}
+
+a {
+    color: var(--ui-color);
+    text-decoration: none;
+    text-underline-offset: 3px;
+}
+
+a:hover, a:focus {
+    color: var(--ui-color);
+    text-decoration: underline;
+}
+
+::selection {
+    background-color: var(--ui-color);
+    color: var(--bg-color);
+}
diff --git a/node_modules/@alienkitty/space.js/examples/assets/images/alienkitty.svg b/node_modules/@alienkitty/space.js/examples/assets/images/alienkitty.svg
new file mode 100644
index 0000000..d64d963
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/images/alienkitty.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="90" height="86"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="59.167" y1="42.175" x2="45.501" y2="36.342"><stop offset="0" stop-color="#fff"/><stop offset=".22" stop-color="#424242"/><stop offset="1"/></linearGradient><path fill="url(#a)" d="M48.891 34.6c.529.634 1.342 1.367 2.439 2.2l2.666 1.95 2.666 1.65 2.326 1.9c-2.912.833-6.277 1-10.098.5-3.518-.5-6.715-1.467-9.589-2.9-.983-.5-1.929-1.283-2.837-2.35-.907-1.133-1.456-2.15-1.646-3.05-.377-1.7-.151-3.133.681-4.3.87-1.267 2.25-1.9 4.142-1.9 1.967-.033 3.782.667 5.448 2.1l1.984 2.05 1.818 2.15"/><linearGradient id="b" gradientUnits="userSpaceOnUse" x1="65.39" y1="42.27" x2="76.057" y2="34.103"><stop offset="0" stop-color="#fff"/><stop offset=".22" stop-color="#424242"/><stop offset="1"/></linearGradient><path fill="url(#b)" d="M76.918 28.95c1.436.467 2.383 1.55 2.836 3.25.492 1.867.246 3.467-.736 4.8-.719.966-1.703 1.933-2.951 2.9-1.324 1.033-2.553 1.7-3.688 2-2.988.767-5.221.9-6.695.4l3.461-3.5c.832-1.1 1.57-2.483 2.213-4.15.529-1.434 1.172-2.667 1.93-3.7.982-1.466 1.93-2.183 2.836-2.15l.794.15"/><path fill="#FFF" d="M83.102 11.1c-1.814 2.467-3.084 4.55-3.801 6.25-1.098 2.567-1.191 4.784-.283 6.65l1.588 2.65 2.043 3.3c1.854 3.5 2.23 7.333 1.135 11.5-1.061 3.8-3.084 7.117-6.072 9.95-2.533 2.301-5.314 3.867-8.34 4.7-1.398.366-1.984 1.534-1.758 3.5.037.634.207 1.45.51 2.45l.625 2.2c.453 1.833.699 4.884.736 9.149-.037 1.5.02 2.351.172 2.551.227.333 1.059.533 2.496.6 1.777.033 3.311.666 4.596 1.9 1.361 1.333 1.605 2.766.738 4.3-.871 1.466-2.725 2.333-5.561 2.6l-3.633.101-39.657-.101c-1.249-.1-2.307-.566-3.178-1.399-1.059-1-1.853-1.584-2.382-1.75-3.178-.934-6.374-2.684-9.588-5.25A37.243 37.243 0 015.261 68.1C2.84 64.567 1.327 61.117.722 57.75c-.681-3.8-.17-7.116 1.532-9.95 1.286-2.267 3.196-3.883 5.73-4.85 2.799-1.1 5.257-.816 7.375.85 1.476 1.2 2.307 2.7 2.497 4.5.114 1.733-.378 3.367-1.476 4.9l-1.588 2-1.475 2.149c-.681 1.467-.946 3.184-.794 5.15.114 2.033.644 3.683 1.588 4.95 2.875 3.699 5.031 5.434 6.468 5.199.87-.166 1.362-.866 1.475-2.1l.057-3.1c.605-3.801 1.532-7.033 2.779-9.7.606-1.267 1.57-2.733 2.894-4.4l3.291-4.2c.794-1.133.983-2.1.567-2.899L29.6 43.5a20.754 20.754 0 01-1.815-3.55c-.341-.833-.567-1.833-.681-3l-.34-2.4c-.189-.767-.606-1.35-1.249-1.75-.719-.5-1.815-.867-3.291-1.1l1.021-.65c.492-.233.719-.467.681-.7-.038-.2-.511-.533-1.418-1l-1.646-.8c1.097-.5 1.305-1.2.624-2.1l-2.212-2.2-3.518-4.7-3.971-4.95c-1.172-1.167-2.062-2.366-2.667-3.6.87-.133 2.042.033 3.518.5l3.348 1.1 12.368 3.05 4.255 1.15c2.647.833 5.522 1.45 8.624 1.85l8.795.2c.68-.1 1.625-.366 2.836-.8l2.838-.7 4.65-.3c1.363-.167 2.838-.617 4.426-1.35 3.404-1.667 7.604-4.117 12.596-7.35L89.571.55c-.455.267-.891.967-1.305 2.1l-.965 2.4-4.199 6.05M47.074 32.45L45.09 30.4c-1.666-1.434-3.48-2.133-5.448-2.1-1.891 0-3.272.633-4.142 1.9-.832 1.167-1.059 2.6-.681 4.3.189.9.738 1.917 1.646 3.05.908 1.067 1.854 1.85 2.837 2.35 2.874 1.433 6.071 2.4 9.589 2.9 3.82.5 7.186.333 10.098-.5l-2.326-1.9-2.666-1.65-2.667-1.95c-1.098-.833-1.91-1.566-2.439-2.2l-1.817-2.15m29.049-3.65c-.906-.033-1.854.684-2.836 2.15-.758 1.034-1.4 2.267-1.93 3.7-.643 1.667-1.381 3.05-2.213 4.15l-3.461 3.5c1.475.5 3.707.367 6.695-.4 1.135-.3 2.363-.967 3.688-2 1.248-.967 2.232-1.934 2.951-2.9.982-1.333 1.229-2.934.736-4.8-.453-1.7-1.4-2.783-2.836-3.25l-.794-.15"/></svg>
\ No newline at end of file
diff --git a/node_modules/@alienkitty/space.js/examples/assets/images/alienkitty_eyelid.svg b/node_modules/@alienkitty/space.js/examples/assets/images/alienkitty_eyelid.svg
new file mode 100644
index 0000000..bb0e071
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/images/alienkitty_eyelid.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="24" height="14"><path fill="#FFF" d="M23.772 7.024c0 1.8-1.173 3.333-3.518 4.601-2.307 1.266-5.068 1.9-8.283 1.9-3.216 0-5.995-.635-8.34-1.9C1.361 10.357.227 8.824.227 7.024c0-1.833 1.135-3.383 3.404-4.649 2.345-1.267 5.124-1.9 8.34-1.9 3.215 0 5.977.634 8.283 1.9 2.346 1.267 3.518 2.816 3.518 4.649"/></svg>
\ No newline at end of file
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_1.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_1.mp3
new file mode 100644
index 0000000..f16b3d8
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_1.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_1.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_1.txt
new file mode 100644
index 0000000..fa681ff
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_1.txt
@@ -0,0 +1,2 @@
+Composition Bed Dark Drum Rhythm Ambient Glitches Production Element Imaging Element Accent Transition
+https://www.audiomicro.com/composition-bed-dark-drum-rhythm-ambient-glitches-production-element-imaging-accent-transition-sound-effects-70803
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_2.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_2.mp3
new file mode 100644
index 0000000..e480477
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_2.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_2.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_2.txt
new file mode 100644
index 0000000..fa681ff
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/accent_transition_2.txt
@@ -0,0 +1,2 @@
+Composition Bed Dark Drum Rhythm Ambient Glitches Production Element Imaging Element Accent Transition
+https://www.audiomicro.com/composition-bed-dark-drum-rhythm-ambient-glitches-production-element-imaging-accent-transition-sound-effects-70803
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/click.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/click.mp3
new file mode 100644
index 0000000..03a77a3
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/click.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/click.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/click.txt
new file mode 100644
index 0000000..9a08b6f
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/click.txt
@@ -0,0 +1,2 @@
+Glitch Hit Multimedia Notification Interactive 19 - AM -3 Semitones
+https://www.audiomicro.com/multimedia-technology-computer-glitch-hit-notification-interactive-19-sound-effects-1438571
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/ethereal_bells.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/ethereal_bells.mp3
new file mode 100644
index 0000000..d531865
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/ethereal_bells.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/ethereal_bells.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/ethereal_bells.txt
new file mode 100644
index 0000000..dd50c1f
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/ethereal_bells.txt
@@ -0,0 +1,2 @@
+Ethereal bells - AM
+https://www.audiomicro.com/ethereal-bells-sound-effects-1592135
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/gong.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/gong.mp3
new file mode 100644
index 0000000..6f93999
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/gong.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/gong.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/gong.txt
new file mode 100644
index 0000000..1b948d1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/gong.txt
@@ -0,0 +1,2 @@
+Musical Chinese Gong 14 Inch Low Ascend Descend
+https://www.audiomicro.com/musical-chinese-gong-14-inch-low-ascend-descend-sound-effects-57155
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/hihat.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/hihat.mp3
new file mode 100644
index 0000000..a8d6e18
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/hihat.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/hihat.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/hihat.txt
new file mode 100644
index 0000000..230520c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/hihat.txt
@@ -0,0 +1,2 @@
+Hi-hat
+https://www.html5rocks.com/en/tutorials/webaudio/intro/
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/hover.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/hover.mp3
new file mode 100644
index 0000000..b11fa95
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/hover.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/hover.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/hover.txt
new file mode 100644
index 0000000..d6f9901
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/hover.txt
@@ -0,0 +1,2 @@
+Glitch Hit Multimedia Notification Interactive 19 - AM
+https://www.audiomicro.com/multimedia-technology-computer-glitch-hit-notification-interactive-19-sound-effects-1438571
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/kick.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/kick.mp3
new file mode 100644
index 0000000..4c3a52e
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/kick.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/kick.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/kick.txt
new file mode 100644
index 0000000..0e0bd87
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/kick.txt
@@ -0,0 +1,2 @@
+Bass (Kick) Drum
+https://www.html5rocks.com/en/tutorials/webaudio/intro/
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/metal_monk_loop.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/metal_monk_loop.mp3
new file mode 100644
index 0000000..9a0a1aa
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/metal_monk_loop.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/metal_monk_loop.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/metal_monk_loop.txt
new file mode 100644
index 0000000..b360361
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/metal_monk_loop.txt
@@ -0,0 +1,2 @@
+Metal Monk Chamber EVL071001
+https://www.audiomicro.com/sci-fi-drones-tones-drones-metal-monk-chamber-evl071001-sound-effects-123070
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/snare.mp3 b/node_modules/@alienkitty/space.js/examples/assets/sounds/snare.mp3
new file mode 100644
index 0000000..2b2f2c6
Binary files /dev/null and b/node_modules/@alienkitty/space.js/examples/assets/sounds/snare.mp3 differ
diff --git a/node_modules/@alienkitty/space.js/examples/assets/sounds/snare.txt b/node_modules/@alienkitty/space.js/examples/assets/sounds/snare.txt
new file mode 100644
index 0000000..13b307b
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/assets/sounds/snare.txt
@@ -0,0 +1,2 @@
+Snare Drum
+https://www.html5rocks.com/en/tutorials/webaudio/intro/
diff --git a/node_modules/@alienkitty/space.js/examples/audio_gong.html b/node_modules/@alienkitty/space.js/examples/audio_gong.html
new file mode 100644
index 0000000..7421ae1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/audio_gong.html
@@ -0,0 +1,183 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Gong — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono&family=Roboto:wght@300&family=Gothic+A1:wght@400;700">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { BufferLoader, Interface, WebAudio, clamp, delayedCall, guid, ticker } from '../src/index.js';
+
+        class Instructions extends Interface {
+            constructor() {
+                super('.instructions');
+
+                this.initHTML();
+            }
+
+            initHTML() {
+                this.invisible();
+                this.css({
+                    position: 'absolute',
+                    left: '50%',
+                    bottom: 55,
+                    width: 300,
+                    marginLeft: -300 / 2,
+                    opacity: 0
+                });
+
+                this.container = new Interface('.container');
+                this.container.css({
+                    position: 'absolute',
+                    bottom: 0,
+                    width: '100%'
+                });
+                this.add(this.container);
+
+                this.text = new Interface('.text');
+                this.text.css({
+                    fontFamily: 'Gothic A1, sans-serif',
+                    fontWeight: '700',
+                    fontSize: 10,
+                    lineHeight: 20,
+                    letterSpacing: 0.8,
+                    textAlign: 'center',
+                    textTransform: 'uppercase',
+                    opacity: 0.7
+                });
+                this.text.text(`${navigator.maxTouchPoints ? 'Tap' : 'Click'} for sound`);
+                this.container.add(this.text);
+            }
+
+            // Public methods
+
+            toggle = (show, delay = 0) => {
+                if (show) {
+                    this.visible();
+                    this.tween({ opacity: 1 }, 800, 'easeInOutSine', delay);
+                    this.text.css({ y: 10 }).tween({ y: 0 }, 1200, 'easeOutCubic', delay);
+                } else {
+                    this.tween({ opacity: 0 }, 300, 'easeOutSine', () => {
+                        this.invisible();
+                    });
+                }
+            };
+        }
+
+        class UI extends Interface {
+            constructor() {
+                super('.ui');
+
+                this.initHTML();
+                this.initViews();
+            }
+
+            initHTML() {
+                this.css({
+                    minHeight: '100%',
+                    display: 'flex',
+                    justifyContent: 'center',
+                    alignItems: 'center',
+                    flexWrap: 'wrap',
+                    padding: '55px 0 125px',
+                    pointerEvents: 'none',
+                    webkitUserSelect: 'none',
+                    userSelect: 'none'
+                });
+            }
+
+            initViews() {
+                this.instructions = new Instructions();
+                this.add(this.instructions);
+            }
+        }
+
+        class AudioController {
+            static init(instructions) {
+                this.instructions = instructions;
+
+                this.addListeners();
+            }
+
+            static addListeners() {
+                document.addEventListener('visibilitychange', this.onVisibility);
+                document.addEventListener('pointerdown', this.onPointerDown);
+
+                this.instructions.toggle(true);
+            }
+
+            // Event handlers
+
+            static onVisibility = () => {
+                if (document.hidden) {
+                    WebAudio.mute();
+                } else {
+                    WebAudio.unmute();
+                }
+            };
+
+            static onPointerDown = ({ clientX, clientY }) => {
+                // this.instructions.toggle(false);
+
+                const normalX = clientX / document.documentElement.clientWidth;
+                const normalY = clientY / document.documentElement.clientHeight;
+                const pan = clamp(((normalX * 2) - 1) * 0.8, -1, 1);
+                const rate = clamp(0.8 + (1 - normalY) * 0.4, 0.8, 1.2);
+
+                const gong = WebAudio.clone('gong', guid());
+                gong.gain.set(0.5);
+                gong.stereoPan.set(pan);
+                gong.playbackRate.set(rate);
+                gong.play();
+
+                delayedCall(6000, () => {
+                    gong.destroy();
+                });
+            };
+        }
+
+        class App {
+            static async init() {
+                this.initLoader();
+                this.initViews();
+
+                this.addListeners();
+
+                await this.bufferLoader.ready();
+
+                this.initAudio();
+            }
+
+            static initLoader() {
+                this.bufferLoader = new BufferLoader();
+                this.bufferLoader.loadAll(['assets/sounds/gong.mp3']);
+            }
+
+            static initViews() {
+                this.ui = new UI();
+                document.body.appendChild(this.ui.element);
+            }
+
+            static initAudio() {
+                WebAudio.init({ sampleRate: 48000 });
+                WebAudio.load(this.bufferLoader.files);
+
+                AudioController.init(this.ui.instructions);
+            }
+
+            static addListeners() {
+                ticker.start();
+            }
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/audio_rhythm.html b/node_modules/@alienkitty/space.js/examples/audio_rhythm.html
new file mode 100644
index 0000000..df34972
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/audio_rhythm.html
@@ -0,0 +1,627 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Rhythm — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono&family=Roboto:wght@300&family=Gothic+A1:wght@400;700">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <style>
+        *, :after, :before {
+            touch-action: unset;
+        }
+
+        body {
+            position: unset;
+            overscroll-behavior: none;
+        }
+    </style>
+
+    <script type="module">
+        import { BufferLoader, Interface, Panel, PanelItem, WebAudio, headsTails, ticker } from '../src/index.js';
+
+        class Instructions extends Interface {
+            constructor() {
+                super('.instructions');
+
+                this.initHTML();
+            }
+
+            initHTML() {
+                this.invisible();
+                this.css({
+                    position: 'absolute',
+                    left: '50%',
+                    bottom: 55,
+                    width: 300,
+                    marginLeft: -300 / 2,
+                    opacity: 0
+                });
+
+                this.container = new Interface('.container');
+                this.container.css({
+                    position: 'absolute',
+                    bottom: 0,
+                    width: '100%'
+                });
+                this.add(this.container);
+
+                this.text = new Interface('.text');
+                this.text.css({
+                    fontFamily: 'Gothic A1, sans-serif',
+                    fontWeight: '700',
+                    fontSize: 10,
+                    lineHeight: 20,
+                    letterSpacing: 0.8,
+                    textAlign: 'center',
+                    textTransform: 'uppercase',
+                    opacity: 0.7
+                });
+                this.text.text(`${navigator.maxTouchPoints ? 'Tap' : 'Click'} for sound`);
+                this.container.add(this.text);
+            }
+
+            // Public methods
+
+            toggle = (show, delay = 0) => {
+                if (show) {
+                    this.visible();
+                    this.tween({ opacity: 1 }, 800, 'easeInOutSine', delay);
+                    this.text.css({ y: 10 }).tween({ y: 0 }, 1200, 'easeOutCubic', delay);
+                } else {
+                    this.tween({ opacity: 0 }, 300, 'easeOutSine', () => {
+                        this.invisible();
+                    });
+                }
+            };
+        }
+
+        class UI extends Interface {
+            constructor() {
+                super('.ui');
+
+                this.initHTML();
+                this.initViews();
+            }
+
+            initHTML() {
+                this.css({
+                    minHeight: '100%',
+                    display: 'flex',
+                    justifyContent: 'center',
+                    alignItems: 'center',
+                    flexWrap: 'wrap',
+                    gap: 20,
+                    padding: '55px 0 125px',
+                    pointerEvents: 'none',
+                    webkitUserSelect: 'none',
+                    userSelect: 'none'
+                });
+            }
+
+            initViews() {
+                this.instructions = new Instructions();
+                this.add(this.instructions);
+            }
+        }
+
+        class AudioController {
+            static init(instructions) {
+                this.instructions = instructions;
+
+                this.context = WebAudio.context;
+                this.lastTime = null;
+
+                this.initSounds();
+
+                this.addListeners();
+            }
+
+            static initSounds() {
+                this.ambient = WebAudio.get('metal_monk_loop');
+                this.ambient.gain.set(0.2);
+                this.ambient.loop = true;
+                this.ambient.play();
+
+                this.bells = WebAudio.get('ethereal_bells');
+                this.bells.gain.set(0.5);
+
+                this.accent1 = WebAudio.get('accent_transition_1');
+                this.accent1.gain.set(0.1);
+
+                this.accent2 = WebAudio.get('accent_transition_2');
+                this.accent2.gain.set(0.05);
+
+                this.kick = WebAudio.get('kick');
+                this.kick.gain.set(1);
+
+                this.snare = WebAudio.get('snare');
+                this.snare.gain.set(1);
+
+                this.hihat = WebAudio.get('hihat');
+                this.hihat.gain.set(1);
+            }
+
+            static addListeners() {
+                document.addEventListener('visibilitychange', this.onVisibility);
+                document.addEventListener('pointerdown', this.onPointerDown);
+
+                this.instructions.toggle(true);
+            }
+
+            // Event handlers
+
+            static onVisibility = () => {
+                if (document.hidden) {
+                    WebAudio.mute();
+                } else {
+                    WebAudio.unmute();
+                }
+            };
+
+            static onPointerDown = () => {
+                // this.instructions.toggle(false);
+
+                // Based on https://www.html5rocks.com/en/tutorials/webaudio/intro/ by smus
+
+                const bells = this.bells;
+                const accent1 = this.accent1;
+                const accent2 = this.accent2;
+                const kick = this.kick;
+                const snare = this.snare;
+                const hihat = this.hihat;
+
+                const tempo = 70; // BPM (beats per minute)
+                const eighthNoteTime = (60 / tempo) / 2;
+                const barLength = 8 * eighthNoteTime;
+
+                // Snap to bar length
+                let startTime = Math.ceil(this.context.currentTime / barLength) * barLength;
+
+                // Next 4 bars
+                const lastLength = this.lastTime + 4 * barLength;
+
+                if (this.lastTime !== null && startTime < lastLength) {
+                    startTime = lastLength;
+                }
+
+                this.lastTime = startTime;
+
+                // Play the bells on the first eighth note
+                bells.play(startTime + eighthNoteTime);
+
+                // Play the accents on bar 2, beat 4
+                if (headsTails()) {
+                    accent1.play(startTime + barLength + 6 * eighthNoteTime);
+                } else {
+                    accent2.play(startTime + barLength + 6 * eighthNoteTime);
+                }
+
+                // Play 4 bars
+                for (let bar = 0; bar < 4; bar++) {
+                    // We'll start playing the rhythm one eighth note from "now"
+                    const time = startTime + bar * barLength + eighthNoteTime;
+
+                    // Play the bass (kick) drum on beats 1, 3
+                    kick.play(time);
+                    kick.play(time + 4 * eighthNoteTime);
+
+                    // Play the snare drum on beats 2, 4
+                    snare.play(time + 2 * eighthNoteTime);
+                    snare.play(time + 6 * eighthNoteTime);
+
+                    // Play the hi-hat every eighth note
+                    for (let i = 0; i < 8; i++) {
+                        hihat.play(time + i * eighthNoteTime);
+                    }
+                }
+            };
+        }
+
+        class PanelController {
+            static init(ui) {
+                this.ui = ui;
+
+                this.initPanel();
+            }
+
+            static initPanel() {
+                const { ambient, bells, accent1, accent2, kick, snare, hihat } = AudioController;
+
+                const track1 = new Panel();
+                track1.animateIn();
+                this.ui.add(track1);
+
+                [
+                    {
+                        label: 'Ambient'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: ambient.gain.value,
+                        callback: value => {
+                            ambient.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: ambient.stereoPan.value,
+                        callback: value => {
+                            ambient.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: ambient.playbackRate.value,
+                        callback: value => {
+                            ambient.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track1.add(new PanelItem(data));
+                });
+
+                const track2 = new Panel();
+                track2.animateIn();
+                this.ui.add(track2);
+
+                [
+                    {
+                        label: 'Bells'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: bells.gain.value,
+                        callback: value => {
+                            bells.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: bells.stereoPan.value,
+                        callback: value => {
+                            bells.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: bells.playbackRate.value,
+                        callback: value => {
+                            bells.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track2.add(new PanelItem(data));
+                });
+
+                const track3 = new Panel();
+                track3.animateIn();
+                this.ui.add(track3);
+
+                [
+                    {
+                        label: 'Accent1'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: accent1.gain.value,
+                        callback: value => {
+                            accent1.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: accent1.stereoPan.value,
+                        callback: value => {
+                            accent1.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: accent1.playbackRate.value,
+                        callback: value => {
+                            accent1.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track3.add(new PanelItem(data));
+                });
+
+                const track4 = new Panel();
+                track4.animateIn();
+                this.ui.add(track4);
+
+                [
+                    {
+                        label: 'Accent2'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: accent2.gain.value,
+                        callback: value => {
+                            accent2.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: accent2.stereoPan.value,
+                        callback: value => {
+                            accent2.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: accent2.playbackRate.value,
+                        callback: value => {
+                            accent2.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track4.add(new PanelItem(data));
+                });
+
+                const track5 = new Panel();
+                track5.animateIn();
+                this.ui.add(track5);
+
+                [
+                    {
+                        label: 'Kick'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: kick.gain.value,
+                        callback: value => {
+                            kick.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: kick.stereoPan.value,
+                        callback: value => {
+                            kick.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: kick.playbackRate.value,
+                        callback: value => {
+                            kick.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track5.add(new PanelItem(data));
+                });
+
+                const track6 = new Panel();
+                track6.animateIn();
+                this.ui.add(track6);
+
+                [
+                    {
+                        label: 'Snare'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: snare.gain.value,
+                        callback: value => {
+                            snare.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: snare.stereoPan.value,
+                        callback: value => {
+                            snare.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: snare.playbackRate.value,
+                        callback: value => {
+                            snare.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track6.add(new PanelItem(data));
+                });
+
+                const track7 = new Panel();
+                track7.animateIn();
+                this.ui.add(track7);
+
+                [
+                    {
+                        label: 'Hihat'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: hihat.gain.value,
+                        callback: value => {
+                            hihat.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: hihat.stereoPan.value,
+                        callback: value => {
+                            hihat.stereoPan.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Rate',
+                        min: 0,
+                        max: 2,
+                        step: 0.01,
+                        value: hihat.playbackRate.value,
+                        callback: value => {
+                            hihat.playbackRate.value = value;
+                        }
+                    }
+                ].forEach(data => {
+                    track7.add(new PanelItem(data));
+                });
+            }
+        }
+
+        class App {
+            static async init() {
+                this.initLoader();
+                this.initViews();
+
+                this.addListeners();
+
+                await this.bufferLoader.ready();
+
+                this.initAudio();
+                this.initPanel();
+            }
+
+            static initLoader() {
+                this.bufferLoader = new BufferLoader();
+                this.bufferLoader.loadAll([
+                    'assets/sounds/metal_monk_loop.mp3',
+                    'assets/sounds/ethereal_bells.mp3',
+                    'assets/sounds/accent_transition_1.mp3',
+                    'assets/sounds/accent_transition_2.mp3',
+                    'assets/sounds/hover.mp3',
+                    'assets/sounds/click.mp3',
+                    'assets/sounds/kick.mp3',
+                    'assets/sounds/snare.mp3',
+                    'assets/sounds/hihat.mp3'
+                ]);
+            }
+
+            static initViews() {
+                this.ui = new UI();
+                document.body.appendChild(this.ui.element);
+            }
+
+            static initAudio() {
+                WebAudio.init({ sampleRate: 48000 });
+                WebAudio.load(this.bufferLoader.files);
+
+                AudioController.init(this.ui.instructions);
+            }
+
+            static initPanel() {
+                PanelController.init(this.ui);
+            }
+
+            static addListeners() {
+                ticker.start();
+            }
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/audio_stream.html b/node_modules/@alienkitty/space.js/examples/audio_stream.html
new file mode 100644
index 0000000..2c7c197
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/audio_stream.html
@@ -0,0 +1,227 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Stream — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono&family=Roboto:wght@300&family=Gothic+A1:wght@400;700">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, Panel, PanelItem, WebAudio, ticker } from '../src/index.js';
+
+        class Instructions extends Interface {
+            constructor() {
+                super('.instructions');
+
+                this.initHTML();
+            }
+
+            initHTML() {
+                this.invisible();
+                this.css({
+                    position: 'absolute',
+                    left: '50%',
+                    bottom: 55,
+                    width: 300,
+                    marginLeft: -300 / 2,
+                    opacity: 0
+                });
+
+                this.container = new Interface('.container');
+                this.container.css({
+                    position: 'absolute',
+                    bottom: 0,
+                    width: '100%'
+                });
+                this.add(this.container);
+
+                this.text = new Interface('.text');
+                this.text.css({
+                    fontFamily: 'Gothic A1, sans-serif',
+                    fontWeight: '700',
+                    fontSize: 10,
+                    lineHeight: 20,
+                    letterSpacing: 0.8,
+                    textAlign: 'center',
+                    textTransform: 'uppercase',
+                    opacity: 0.7
+                });
+                this.text.text(`${navigator.maxTouchPoints ? 'Tap' : 'Click'} to play`);
+                this.container.add(this.text);
+            }
+
+            // Public methods
+
+            toggle = (show, delay = 0) => {
+                if (show) {
+                    this.visible();
+                    this.tween({ opacity: 1 }, 800, 'easeInOutSine', delay);
+                    this.text.css({ y: 10 }).tween({ y: 0 }, 1200, 'easeOutCubic', delay);
+                } else {
+                    this.tween({ opacity: 0 }, 300, 'easeOutSine', () => {
+                        this.invisible();
+                    });
+                }
+            };
+        }
+
+        class UI extends Interface {
+            constructor() {
+                super('.ui');
+
+                this.initHTML();
+                this.initViews();
+            }
+
+            initHTML() {
+                this.css({
+                    minHeight: '100%',
+                    display: 'flex',
+                    justifyContent: 'center',
+                    alignItems: 'center',
+                    flexWrap: 'wrap',
+                    padding: '55px 0 125px',
+                    pointerEvents: 'none',
+                    webkitUserSelect: 'none',
+                    userSelect: 'none'
+                });
+            }
+
+            initViews() {
+                this.instructions = new Instructions();
+                this.add(this.instructions);
+            }
+        }
+
+        class AudioController {
+            static init(instructions) {
+                this.instructions = instructions;
+
+                this.initSounds();
+
+                this.addListeners();
+            }
+
+            static initSounds() {
+                this.protonradio = WebAudio.get('protonradio');
+                this.protonradio.gain.set(1);
+            }
+
+            static addListeners() {
+                document.addEventListener('visibilitychange', this.onVisibility);
+                document.addEventListener('pointerdown', this.onPointerDown);
+
+                this.instructions.toggle(true);
+            }
+
+            // Event handlers
+
+            static onVisibility = () => {
+                if (document.hidden) {
+                    WebAudio.mute();
+                } else {
+                    WebAudio.unmute();
+                }
+            };
+
+            static onPointerDown = () => {
+                this.instructions.toggle(false);
+
+                this.protonradio.play();
+            };
+        }
+
+        class PanelController {
+            static init(ui) {
+                this.ui = ui;
+
+                this.initPanel();
+            }
+
+            static initPanel() {
+                const { protonradio } = AudioController;
+
+                const panel = new Panel();
+                panel.animateIn();
+                this.ui.add(panel);
+
+                const items = [
+                    {
+                        label: 'Proton Radio'
+                    },
+                    {
+                        type: 'divider'
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Volume',
+                        min: 0,
+                        max: 1,
+                        step: 0.01,
+                        value: protonradio.gain.value,
+                        callback: value => {
+                            protonradio.gain.value = value;
+                        }
+                    },
+                    {
+                        type: 'slider',
+                        label: 'Pan',
+                        min: -1,
+                        max: 1,
+                        step: 0.01,
+                        value: protonradio.stereoPan.value,
+                        callback: value => {
+                            protonradio.stereoPan.value = value;
+                        }
+                    }
+                ];
+
+                items.forEach(data => {
+                    panel.add(new PanelItem(data));
+                });
+            }
+        }
+
+        class App {
+            static async init() {
+                this.initViews();
+
+                this.addListeners();
+
+                this.initAudio();
+                this.initPanel();
+            }
+
+            static initViews() {
+                this.ui = new UI();
+                document.body.appendChild(this.ui.element);
+            }
+
+            static initAudio() {
+                WebAudio.init({ sampleRate: 48000 });
+
+                // Shoutcast streams append a semicolon (;) to the URL
+                WebAudio.load({ protonradio: 'https://shoutcast.protonradio.com/;' });
+
+                AudioController.init(this.ui.instructions);
+            }
+
+            static initPanel() {
+                PanelController.init(this.ui);
+            }
+
+            static addListeners() {
+                ticker.start();
+            }
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/close.html b/node_modules/@alienkitty/space.js/examples/close.html
new file mode 100644
index 0000000..2f54694
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/close.html
@@ -0,0 +1,210 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Close — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, clearTween, ticker, tween } from '../src/index.js';
+
+        class Close extends Interface {
+            constructor() {
+                super(null, 'svg');
+
+                const size = 90;
+
+                this.width = size;
+                this.height = size;
+                this.x = size / 2;
+                this.y = size / 2;
+                this.radius = size * 0.4;
+                this.animatedIn = false;
+                this.needsUpdate = false;
+
+                this.initSVG();
+            }
+
+            initSVG() {
+                this.attr({
+                    width: this.width,
+                    height: this.height
+                });
+
+                this.circle = new Interface(null, 'svg', 'circle');
+                this.circle.attr({
+                    cx: this.x,
+                    cy: this.y,
+                    r: this.radius
+                });
+                this.circle.css({
+                    fill: 'none',
+                    stroke: 'var(--ui-color)',
+                    strokeWidth: 1.5
+                });
+                this.circle.start = 0;
+                this.circle.offset = -0.25;
+                this.circle.progress = 0;
+                this.add(this.circle);
+
+                this.icon = new Interface(null, 'svg', 'g');
+                this.icon.attr({
+                    transform: `translate(${(this.width - 22) / 2}, ${(this.height - 22) / 2})`
+                });
+                this.icon.css({
+                    fill: 'none',
+                    stroke: 'var(--ui-color)',
+                    strokeWidth: 1.5
+                });
+                this.add(this.icon);
+
+                this.line1 = new Interface(null, 'svg', 'line');
+                this.line1.attr({
+                    x1: 0,
+                    y1: 0,
+                    x2: 22,
+                    y2: 22
+                });
+                this.line1.start = 0;
+                this.line1.offset = 0;
+                this.line1.progress = 0;
+                this.icon.add(this.line1);
+
+                this.line2 = new Interface(null, 'svg', 'line');
+                this.line2.attr({
+                    x1: 22,
+                    y1: 0,
+                    x2: 0,
+                    y2: 22
+                });
+                this.line2.start = 0;
+                this.line2.offset = 0;
+                this.line2.progress = 0;
+                this.icon.add(this.line2);
+            }
+
+            addListeners() {
+                ticker.add(this.onUpdate);
+            }
+
+            removeListeners() {
+                ticker.remove(this.onUpdate);
+            }
+
+            // Event handlers
+
+            onUpdate = () => {
+                if (this.needsUpdate) {
+                    this.update();
+                }
+            };
+
+            // Public methods
+
+            update = () => {
+                this.circle.line();
+                this.line1.line();
+                this.line2.line();
+            };
+
+            animateIn = () => {
+                if (this.needsUpdate) {
+                    return;
+                }
+
+                this.animatedIn = true;
+                this.needsUpdate = true;
+
+                this.addListeners();
+
+                tween(this.circle, { progress: 1 }, 1000, 'easeOutCubic', () => {
+                    tween(this.line1, { progress: 1 }, 400, 'easeOutCubic', () => {
+                        tween(this.line2, { progress: 1 }, 400, 'easeOutCubic', () => {
+                            this.removeListeners();
+                            this.needsUpdate = false;
+                        });
+                    });
+                });
+            };
+
+            animateOut = () => {
+                if (this.needsUpdate) {
+                    return;
+                }
+
+                this.animatedIn = false;
+                this.needsUpdate = true;
+
+                this.addListeners();
+
+                tween(this.circle, { start: 1 }, 1000, 'easeInOutCubic', () => {
+                    this.circle.start = 0;
+                    this.removeListeners();
+                    this.needsUpdate = false;
+                }, () => {
+                    this.circle.progress = 1 - this.circle.start;
+                    this.line1.progress = this.circle.progress;
+                    this.line2.progress = this.circle.progress;
+                });
+            };
+
+            destroy = () => {
+                this.removeListeners();
+
+                clearTween(this.circle);
+                clearTween(this.line1);
+                clearTween(this.line2);
+
+                return super.destroy();
+            };
+        }
+
+        class App {
+            static init() {
+                this.initView();
+
+                this.addListeners();
+            }
+
+            static initView() {
+                this.view = new Close();
+                this.view.css({
+                    position: 'absolute',
+                    left: '50%',
+                    top: '50%',
+                    marginLeft: -this.view.width / 2,
+                    marginTop: -this.view.height / 2,
+                    cursor: 'pointer'
+                });
+                document.body.appendChild(this.view.element);
+
+                this.view.animateIn();
+            }
+
+            static addListeners() {
+                this.view.element.addEventListener('click', this.onClick);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onClick = () => {
+                if (this.view.animatedIn) {
+                    this.view.animateOut();
+                } else {
+                    this.view.animateIn();
+                }
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/fps.html b/node_modules/@alienkitty/space.js/examples/fps.html
new file mode 100644
index 0000000..916ccfc
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/fps.html
@@ -0,0 +1,31 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>FPS — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { UI } from '../src/index.js';
+
+        const ui = new UI({ fps: true });
+        ui.animateIn();
+        document.body.appendChild(ui.element);
+
+        function animate() {
+            requestAnimationFrame(animate);
+
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/fps_panel.html b/node_modules/@alienkitty/space.js/examples/fps_panel.html
new file mode 100644
index 0000000..8b0ecd8
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/fps_panel.html
@@ -0,0 +1,53 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>FPS Panel — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { PanelItem, UI, brightness } from '../src/index.js';
+
+        const ui = new UI({ fps: true });
+        ui.animateIn();
+        document.body.appendChild(ui.element);
+
+        const items = [
+            {
+                label: 'FPS'
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                value: getComputedStyle(document.querySelector(':root')).getPropertyValue('--bg-color').trim(),
+                callback: value => {
+                    document.body.style.backgroundColor = `#${value.getHexString()}`;
+
+                    ui.invert(brightness(value) > 0.6); // Light colour is inverted
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            ui.addPanel(new PanelItem(data));
+        });
+
+        function animate() {
+            requestAnimationFrame(animate);
+
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/logo.html b/node_modules/@alienkitty/space.js/examples/logo.html
new file mode 100755
index 0000000..17907ed
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/logo.html
@@ -0,0 +1,141 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Logo — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, ticker } from '../src/index.js';
+
+        class Logo extends Interface {
+            constructor() {
+                super('.logo');
+
+                this.initHTML();
+
+                this.addListeners();
+                this.onResize();
+            }
+
+            initHTML() {
+                this.css({
+                    position: 'absolute',
+                    left: 50,
+                    top: 50,
+                    width: 64,
+                    height: 64,
+                    cursor: 'pointer',
+                    webkitUserSelect: 'none',
+                    userSelect: 'none',
+                    opacity: 0
+                });
+
+                this.image = new Interface(null, 'img');
+                this.image.attr({ src: 'assets/images/alienkitty.svg' });
+                this.image.css({
+                    width: '100%',
+                    height: 'auto'
+                });
+                this.add(this.image);
+            }
+
+            addListeners() {
+                window.addEventListener('resize', this.onResize);
+                this.element.addEventListener('mouseenter', this.onHover);
+                this.element.addEventListener('mouseleave', this.onHover);
+                this.element.addEventListener('click', this.onClick);
+            }
+
+            removeListeners() {
+                window.removeEventListener('resize', this.onResize);
+                this.element.removeEventListener('mouseenter', this.onHover);
+                this.element.removeEventListener('mouseleave', this.onHover);
+                this.element.removeEventListener('click', this.onClick);
+            }
+
+            // Event handlers
+
+            onResize = () => {
+                const width = document.documentElement.clientWidth;
+                const height = document.documentElement.clientHeight;
+
+                if (width < height) {
+                    this.css({
+                        left: 30,
+                        top: 30,
+                        width: 40,
+                        height: 40
+                    });
+                } else {
+                    this.css({
+                        left: 50,
+                        top: 50,
+                        width: 64,
+                        height: 64
+                    });
+                }
+            };
+
+            onHover = ({ type }) => {
+                this.clearTween();
+
+                if (type === 'mouseenter') {
+                    this.tween({ opacity: 0.6 }, 300, 'easeOutCubic');
+                } else {
+                    this.tween({ opacity: 1 }, 300, 'easeOutCubic');
+                }
+            };
+
+            onClick = () => {
+                open('https://alien.js.org/');
+            };
+
+            // Public methods
+
+            animateIn = () => {
+                this.tween({ opacity: 1 }, 600, 'easeInOutSine');
+            };
+
+            destroy = () => {
+                this.removeListeners();
+
+                return super.destroy();
+            };
+        }
+
+        class App {
+            static async init() {
+                this.initViews();
+
+                this.addListeners();
+            }
+
+            static initViews() {
+                this.logo = new Logo();
+                document.body.appendChild(this.logo.element);
+            }
+
+            static addListeners() {
+                window.addEventListener('load', this.onLoad);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onLoad = () => {
+                this.logo.animateIn();
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/magnetic.html b/node_modules/@alienkitty/space.js/examples/magnetic.html
new file mode 100644
index 0000000..1e6d43a
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/magnetic.html
@@ -0,0 +1,160 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Magnetic — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, Magnetic, clearTween, ticker, tween } from '../src/index.js';
+
+        class Progress extends Interface {
+            constructor() {
+                super(null, 'svg');
+
+                const size = 90;
+
+                this.width = size;
+                this.height = size;
+                this.x = size / 2;
+                this.y = size / 2;
+                this.radius = size * 0.4;
+                this.progress = 0;
+                this.needsUpdate = false;
+
+                this.initSVG();
+
+                this.addListeners();
+            }
+
+            initSVG() {
+                this.attr({
+                    width: this.width,
+                    height: this.height
+                });
+
+                this.circle = new Interface(null, 'svg', 'circle');
+                this.circle.attr({
+                    cx: this.x,
+                    cy: this.y,
+                    r: this.radius
+                });
+                this.circle.css({
+                    fill: 'none',
+                    stroke: 'var(--ui-color)',
+                    strokeWidth: 1.5
+                });
+                this.circle.start = 0;
+                this.circle.offset = -0.25;
+                this.add(this.circle);
+            }
+
+            addListeners() {
+                ticker.add(this.onUpdate);
+            }
+
+            removeListeners() {
+                ticker.remove(this.onUpdate);
+            }
+
+            // Event handlers
+
+            onUpdate = () => {
+                if (this.needsUpdate) {
+                    this.update();
+                }
+            };
+
+            onProgress = ({ progress }) => {
+                clearTween(this);
+
+                this.needsUpdate = true;
+
+                tween(this, { progress }, 500, 'easeOutCubic', () => {
+                    this.needsUpdate = false;
+
+                    if (this.progress >= 1) {
+                        this.onComplete();
+                    }
+                });
+            };
+
+            onComplete = () => {
+                this.removeListeners();
+
+                this.events.emit('complete');
+            };
+
+            // Public methods
+
+            update = () => {
+                this.circle.line(this.progress);
+            };
+
+            animateOut = callback => {
+                this.tween({ scale: 0.9, opacity: 0 }, 400, 'easeInCubic', callback);
+            };
+
+            destroy = () => {
+                this.removeListeners();
+
+                clearTween(this);
+
+                return super.destroy();
+            };
+        }
+
+        class App {
+            static init() {
+                this.initView();
+
+                this.addListeners();
+            }
+
+            static initView() {
+                this.view = new Progress();
+                this.view.css({
+                    position: 'absolute',
+                    left: '50%',
+                    top: '50%',
+                    marginLeft: -this.view.width / 2,
+                    marginTop: -this.view.height / 2,
+                    cursor: 'pointer'
+                });
+                document.body.appendChild(this.view.element);
+
+                this.magnet = new Magnetic(this.view);
+                this.view.add(this.magnet);
+
+                this.view.onProgress({ progress: 1 });
+            }
+
+            static addListeners() {
+                this.view.element.addEventListener('click', this.onClick);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onClick = () => {
+                this.view.element.removeEventListener('click', this.onClick);
+
+                this.magnet.disable();
+
+                this.view.animateOut(() => {
+                    this.view = this.view.destroy();
+                });
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/panel.html b/node_modules/@alienkitty/space.js/examples/panel.html
new file mode 100644
index 0000000..47cff1c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/panel.html
@@ -0,0 +1,58 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Standalone Panel — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <style>
+        .ui {
+            display: flex;
+            justify-content: center;
+            align-items: center;
+        }
+    </style>
+
+    <script type="module">
+        import { Panel, PanelItem, UI, brightness } from '../src/index.js';
+
+        const ui = new UI({ fps: true });
+        document.body.appendChild(ui.element);
+
+        const panel = new Panel();
+        panel.animateIn();
+        ui.add(panel);
+
+        const items = [
+            {
+                type: 'color',
+                value: getComputedStyle(document.querySelector(':root')).getPropertyValue('--bg-color').trim(),
+                callback: value => {
+                    document.body.style.backgroundColor = `#${value.getHexString()}`;
+
+                    ui.invert(brightness(value) > 0.6); // Light colour is inverted
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            panel.add(new PanelItem(data));
+        });
+
+        function animate() {
+            requestAnimationFrame(animate);
+
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/progress.html b/node_modules/@alienkitty/space.js/examples/progress.html
new file mode 100644
index 0000000..997a8a5
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/progress.html
@@ -0,0 +1,155 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Progress — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, clearTween, ticker, tween } from '../src/index.js';
+
+        class Progress extends Interface {
+            constructor() {
+                super(null, 'svg');
+
+                const size = 90;
+
+                this.width = size;
+                this.height = size;
+                this.x = size / 2;
+                this.y = size / 2;
+                this.radius = size * 0.4;
+                this.progress = 0;
+                this.needsUpdate = false;
+
+                this.initSVG();
+
+                this.addListeners();
+            }
+
+            initSVG() {
+                this.attr({
+                    width: this.width,
+                    height: this.height
+                });
+
+                this.circle = new Interface(null, 'svg', 'circle');
+                this.circle.attr({
+                    cx: this.x,
+                    cy: this.y,
+                    r: this.radius
+                });
+                this.circle.css({
+                    fill: 'none',
+                    stroke: 'var(--ui-color)',
+                    strokeWidth: 1.5
+                });
+                this.circle.start = 0;
+                this.circle.offset = -0.25;
+                this.add(this.circle);
+            }
+
+            addListeners() {
+                ticker.add(this.onUpdate);
+            }
+
+            removeListeners() {
+                ticker.remove(this.onUpdate);
+            }
+
+            // Event handlers
+
+            onUpdate = () => {
+                if (this.needsUpdate) {
+                    this.update();
+                }
+            };
+
+            onProgress = ({ progress }) => {
+                clearTween(this);
+
+                this.needsUpdate = true;
+
+                tween(this, { progress }, 500, 'easeOutCubic', () => {
+                    this.needsUpdate = false;
+
+                    if (this.progress >= 1) {
+                        this.onComplete();
+                    }
+                });
+            };
+
+            onComplete = () => {
+                this.removeListeners();
+
+                this.events.emit('complete');
+            };
+
+            // Public methods
+
+            update = () => {
+                this.circle.line(this.progress);
+            };
+
+            animateOut = callback => {
+                this.tween({ scale: 0.9, opacity: 0 }, 400, 'easeInCubic', callback);
+            };
+
+            destroy = () => {
+                this.removeListeners();
+
+                clearTween(this);
+
+                return super.destroy();
+            };
+        }
+
+        class App {
+            static init() {
+                this.initView();
+
+                this.addListeners();
+            }
+
+            static initView() {
+                this.view = new Progress();
+                this.view.css({
+                    position: 'absolute',
+                    left: '50%',
+                    top: '50%',
+                    marginLeft: -this.view.width / 2,
+                    marginTop: -this.view.height / 2,
+                    cursor: 'pointer'
+                });
+                document.body.appendChild(this.view.element);
+
+                this.view.onProgress({ progress: 1 });
+            }
+
+            static addListeners() {
+                this.view.element.addEventListener('click', this.onClick);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onClick = () => {
+                this.view.element.removeEventListener('click', this.onClick);
+
+                this.view.animateOut(() => {
+                    this.view = this.view.destroy();
+                });
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/progress_canvas.html b/node_modules/@alienkitty/space.js/examples/progress_canvas.html
new file mode 100644
index 0000000..69f1427
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/progress_canvas.html
@@ -0,0 +1,157 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Progress — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, clearTween, degToRad, ticker, tween } from '../src/index.js';
+
+        class ProgressCanvas extends Interface {
+            constructor() {
+                super(null, 'canvas');
+
+                const size = 90;
+
+                this.width = size;
+                this.height = size;
+                this.x = size / 2;
+                this.y = size / 2;
+                this.radius = size * 0.4;
+                this.startAngle = degToRad(-90);
+                this.progress = 0;
+                this.needsUpdate = false;
+
+                this.initCanvas();
+
+                this.addListeners();
+                this.resize();
+            }
+
+            initCanvas() {
+                this.context = this.element.getContext('2d');
+            }
+
+            addListeners() {
+                ticker.add(this.onUpdate);
+            }
+
+            removeListeners() {
+                ticker.remove(this.onUpdate);
+            }
+
+            // Event handlers
+
+            onUpdate = () => {
+                if (this.needsUpdate) {
+                    this.update();
+                }
+            };
+
+            onProgress = ({ progress }) => {
+                clearTween(this);
+
+                this.needsUpdate = true;
+
+                tween(this, { progress }, 500, 'easeOutCubic', () => {
+                    this.needsUpdate = false;
+
+                    if (this.progress >= 1) {
+                        this.onComplete();
+                    }
+                });
+            };
+
+            onComplete = () => {
+                this.removeListeners();
+
+                this.events.emit('complete');
+            };
+
+            // Public methods
+
+            resize = () => {
+                const dpr = 2;
+
+                this.element.width = Math.round(this.width * dpr);
+                this.element.height = Math.round(this.height * dpr);
+                this.element.style.width = this.width + 'px';
+                this.element.style.height = this.height + 'px';
+                this.context.scale(dpr, dpr);
+
+                this.context.lineWidth = 1.5;
+                this.context.strokeStyle = 'rgba(255, 255, 255, 0.94)';
+
+                this.update();
+            };
+
+            update = () => {
+                this.context.clearRect(0, 0, this.element.width, this.element.height);
+                this.context.beginPath();
+                this.context.arc(this.x, this.y, this.radius, this.startAngle, this.startAngle + degToRad(360 * this.progress));
+                this.context.stroke();
+            };
+
+            animateOut = callback => {
+                this.tween({ scale: 0.9, opacity: 0 }, 400, 'easeInCubic', callback);
+            };
+
+            destroy = () => {
+                this.removeListeners();
+
+                clearTween(this);
+
+                return super.destroy();
+            };
+        }
+
+        class App {
+            static init() {
+                this.initView();
+
+                this.addListeners();
+            }
+
+            static initView() {
+                this.view = new ProgressCanvas();
+                this.view.css({
+                    position: 'absolute',
+                    left: '50%',
+                    top: '50%',
+                    marginLeft: -this.view.width / 2,
+                    marginTop: -this.view.height / 2,
+                    cursor: 'pointer'
+                });
+                document.body.appendChild(this.view.element);
+
+                this.view.onProgress({ progress: 1 });
+            }
+
+            static addListeners() {
+                this.view.element.addEventListener('click', this.onClick);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onClick = () => {
+                this.view.element.removeEventListener('click', this.onClick);
+
+                this.view.animateOut(() => {
+                    this.view = this.view.destroy();
+                });
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/progress_indeterminate.html b/node_modules/@alienkitty/space.js/examples/progress_indeterminate.html
new file mode 100644
index 0000000..3c61651
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/progress_indeterminate.html
@@ -0,0 +1,161 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Indeterminate Progress — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, clearTween, ticker, tween } from '../src/index.js';
+
+        class ProgressIndeterminate extends Interface {
+            constructor() {
+                super(null, 'svg');
+
+                const size = 90;
+
+                this.width = size;
+                this.height = size;
+                this.x = size / 2;
+                this.y = size / 2;
+                this.radius = size * 0.4;
+                this.animatedIn = false;
+                this.needsUpdate = false;
+
+                this.initSVG();
+            }
+
+            initSVG() {
+                this.attr({
+                    width: this.width,
+                    height: this.height
+                });
+
+                this.circle = new Interface(null, 'svg', 'circle');
+                this.circle.attr({
+                    cx: this.x,
+                    cy: this.y,
+                    r: this.radius
+                });
+                this.circle.css({
+                    fill: 'none',
+                    stroke: 'var(--ui-color)',
+                    strokeWidth: 1.5
+                });
+                this.circle.start = 0;
+                this.circle.offset = -0.25;
+                this.circle.progress = 0;
+                this.add(this.circle);
+            }
+
+            addListeners() {
+                ticker.add(this.onUpdate);
+            }
+
+            removeListeners() {
+                ticker.remove(this.onUpdate);
+            }
+
+            // Event handlers
+
+            onUpdate = () => {
+                if (this.needsUpdate) {
+                    this.update();
+                }
+            };
+
+            // Public methods
+
+            update = () => {
+                this.circle.line();
+            };
+
+            animateIn = () => {
+                this.animatedIn = true;
+                this.needsUpdate = true;
+
+                this.addListeners();
+
+                const start = () => {
+                    tween(this.circle, { progress: 1 }, 1000, 'easeOutCubic', () => {
+                        tween(this.circle, { start: 1 }, 1000, 'easeInOutCubic', () => {
+                            this.circle.start = 0;
+                            this.delayedCall(500, () => {
+                                if (this.animatedIn) {
+                                    start();
+                                } else {
+                                    this.removeListeners();
+                                    this.needsUpdate = false;
+                                }
+                            });
+                        }, () => {
+                            this.circle.progress = 1 - this.circle.start;
+                        });
+                    });
+                };
+
+                start();
+            };
+
+            animateOut = () => {
+                this.animatedIn = false;
+            };
+
+            destroy = () => {
+                this.removeListeners();
+
+                clearTween(this.circle);
+
+                return super.destroy();
+            };
+        }
+
+        class App {
+            static init() {
+                this.initView();
+
+                this.addListeners();
+            }
+
+            static initView() {
+                this.view = new ProgressIndeterminate();
+                this.view.css({
+                    position: 'absolute',
+                    left: '50%',
+                    top: '50%',
+                    marginLeft: -this.view.width / 2,
+                    marginTop: -this.view.height / 2,
+                    cursor: 'pointer'
+                });
+                document.body.appendChild(this.view.element);
+
+                this.view.animateIn();
+            }
+
+            static addListeners() {
+                this.view.element.addEventListener('click', this.onClick);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onClick = () => {
+                if (this.view.needsUpdate) {
+                    this.view.animateOut();
+                } else {
+                    this.view.animateIn();
+                }
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/styles.html b/node_modules/@alienkitty/space.js/examples/styles.html
new file mode 100644
index 0000000..5f2cba1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/styles.html
@@ -0,0 +1,331 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Styles — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono&family=Roboto:wght@300&family=Gothic+A1:wght@400;700">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, shuffle, ticker } from '../src/index.js';
+
+        class Config {
+            static BREAKPOINT = 1000;
+        }
+
+        class Styles {
+            static body = {
+                fontFamily: 'Gothic A1, sans-serif',
+                fontWeight: '400',
+                fontSize: 13,
+                lineHeight: '1.5',
+                letterSpacing: 'normal'
+            };
+
+            static h1 = {
+                width: 'fit-content',
+                margin: '0 0 6px -1px',
+                fontFamily: 'Roboto, sans-serif',
+                fontWeight: '300',
+                fontSize: 23,
+                lineHeight: '1.3',
+                letterSpacing: 'normal',
+                textTransform: 'uppercase'
+            };
+
+            static content = {
+                width: 'fit-content',
+                margin: '6px 0',
+                ...this.body
+            };
+        }
+
+        class DetailsLink extends Interface {
+            constructor(title, link) {
+                super('.link', 'a');
+
+                this.title = title;
+                this.link = link;
+
+                this.initHTML();
+
+                this.addListeners();
+            }
+
+            initHTML() {
+                this.css({
+                    ...Styles.body,
+                    lineHeight: 22
+                });
+                this.attr({ href: this.link });
+
+                this.text = new Interface('.text');
+                this.text.css({
+                    display: 'inline-block'
+                });
+                this.text.text(this.title);
+                this.add(this.text);
+
+                this.line = new Interface('.line');
+                this.line.css({
+                    display: 'inline-block',
+                    fontWeight: '700',
+                    verticalAlign: 'middle'
+                });
+                this.line.html('&nbsp;&nbsp;―');
+                this.add(this.line);
+            }
+
+            addListeners() {
+                this.element.addEventListener('mouseenter', this.onHover);
+                this.element.addEventListener('mouseleave', this.onHover);
+            }
+
+            // Event handlers
+
+            onHover = ({ type }) => {
+                this.line.tween({ x: type === 'mouseenter' ? 10 : 0 }, 200, 'easeOutCubic');
+            };
+        }
+
+        class DetailsTitle extends Interface {
+            constructor(title) {
+                super('.title', 'h1');
+
+                this.title = title;
+                this.letters = [];
+
+                this.initHTML();
+                this.initText();
+            }
+
+            initHTML() {
+                this.css({
+                    ...Styles.h1
+                });
+            }
+
+            initText() {
+                const split = this.title.split('');
+
+                split.forEach(str => {
+                    if (str === ' ') {
+                        str = '&nbsp';
+                    }
+
+                    const letter = new Interface(null, 'span');
+                    letter.css({ display: 'inline-block' });
+                    letter.html(str);
+                    this.add(letter);
+
+                    this.letters.push(letter);
+                });
+            }
+
+            // Public methods
+
+            animateIn = () => {
+                shuffle(this.letters);
+
+                const underscores = this.letters.filter(letter => letter === '_');
+
+                underscores.forEach((letter, i) => {
+                    letter.css({ opacity: 0 }).tween({ opacity: 1 }, 2000, 'easeOutCubic', i * 15);
+                });
+
+                const letters = this.letters.filter(letter => letter !== '_').slice(0, 2);
+
+                letters.forEach((letter, i) => {
+                    letter.css({ opacity: 0 }).tween({ opacity: 1 }, 2000, 'easeOutCubic', 100 + i * 15);
+                });
+            };
+        }
+
+        class Details extends Interface {
+            constructor() {
+                super('.details');
+
+                this.texts = [];
+
+                this.initHTML();
+                this.initViews();
+
+                this.addListeners();
+                this.onResize();
+            }
+
+            initHTML() {
+                this.invisible();
+                this.css({
+                    position: 'absolute',
+                    left: 0,
+                    top: 0,
+                    width: '100%',
+                    height: '100%',
+                    display: 'flex',
+                    alignItems: 'center',
+                    pointerEvents: 'none',
+                    opacity: 0
+                });
+
+                this.container = new Interface('.container');
+                this.container.css({
+                    width: 400,
+                    margin: '10% 10% 13%'
+                });
+                this.add(this.container);
+            }
+
+            initViews() {
+                this.title = new DetailsTitle('Lorem ipsum'.replace(/[\s.]+/g, '_'));
+                this.title.css({
+                    width: 'fit-content'
+                });
+                this.container.add(this.title);
+                this.texts.push(this.title);
+
+                this.text = new Interface('.text', 'p');
+                this.text.css({
+                    width: 'fit-content',
+                    ...Styles.content
+                });
+                this.text.html('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.');
+                this.container.add(this.text);
+                this.texts.push(this.text);
+
+                const items = [
+                    {
+                        title: 'Lorem ipsum',
+                        link: 'https://en.wikipedia.org/wiki/Lorem_ipsum'
+                    }
+                ];
+
+                items.forEach(data => {
+                    const link = new DetailsLink(data.title, data.link);
+                    link.css({
+                        display: 'block',
+                        width: 'fit-content'
+                    });
+                    this.container.add(link);
+                    this.texts.push(link);
+                });
+            }
+
+            addListeners() {
+                window.addEventListener('resize', this.onResize);
+            }
+
+            // Event handlers
+
+            onResize = () => {
+                if (document.documentElement.clientWidth < Config.BREAKPOINT) {
+                    this.css({ display: '' });
+
+                    this.container.css({
+                        width: '',
+                        margin: '24px 20px 0'
+                    });
+                } else {
+                    this.css({ display: 'flex' });
+
+                    this.container.css({
+                        width: 400,
+                        margin: '10% 10% 13%'
+                    });
+                }
+            };
+
+            // Public methods
+
+            animateIn = () => {
+                this.visible();
+                this.css({
+                    pointerEvents: 'auto',
+                    opacity: 1
+                });
+
+                const duration = 2000;
+                const stagger = 175;
+
+                this.texts.forEach((text, i) => {
+                    const delay = i === 0 ? 0 : duration;
+
+                    text.css({ opacity: 0 }).tween({ opacity: 1 }, duration, 'easeOutCubic', delay + i * stagger);
+                });
+
+                this.title.animateIn();
+            };
+        }
+
+        class UI extends Interface {
+            constructor() {
+                super('.ui');
+
+                this.initHTML();
+                this.initViews();
+
+                this.addListeners();
+            }
+
+            initHTML() {
+                this.css({
+                    position: 'fixed',
+                    left: 0,
+                    top: 0,
+                    width: '100%',
+                    height: '100%',
+                    pointerEvents: 'none'
+                });
+            }
+
+            initViews() {
+                this.details = new Details();
+                this.add(this.details);
+            }
+
+            addListeners() {
+            }
+
+            // Event handlers
+
+            // Public methods
+
+            animateIn = () => {
+                this.details.animateIn();
+            };
+        }
+
+        class App {
+            static async init() {
+                this.initViews();
+
+                this.addListeners();
+            }
+
+            static initViews() {
+                this.ui = new UI();
+                document.body.appendChild(this.ui.element);
+            }
+
+            static addListeners() {
+                window.addEventListener('load', this.onLoad);
+                ticker.start();
+            }
+
+            // Event handlers
+
+            static onLoad = () => {
+                this.ui.animateIn();
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/test_sound.html b/node_modules/@alienkitty/space.js/examples/test_sound.html
new file mode 100644
index 0000000..45ae156
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/test_sound.html
@@ -0,0 +1,31 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Sound — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { BufferLoader, WebAudio } from '../src/index.js';
+
+        const bufferLoader = new BufferLoader();
+        await bufferLoader.loadAllAsync(['assets/sounds/gong.mp3']);
+        WebAudio.init({ sampleRate: 48000 });
+        WebAudio.load(bufferLoader.files);
+
+        const gong = WebAudio.get('gong');
+        gong.gain.set(0.5);
+
+        document.addEventListener('pointerdown', () => {
+            gong.play();
+        });
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/test_stream.html b/node_modules/@alienkitty/space.js/examples/test_stream.html
new file mode 100644
index 0000000..f3f2520
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/test_stream.html
@@ -0,0 +1,31 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Stream — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { WebAudio } from '../src/index.js';
+
+        WebAudio.init({ sampleRate: 48000 });
+
+        // Shoutcast streams append a semicolon (;) to the URL
+        WebAudio.load({ protonradio: 'https://shoutcast.protonradio.com/;' });
+
+        const protonradio = WebAudio.get('protonradio');
+        protonradio.gain.set(1);
+
+        document.addEventListener('pointerdown', () => {
+            protonradio.play();
+        });
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/test_tween.html b/node_modules/@alienkitty/space.js/examples/test_tween.html
new file mode 100644
index 0000000..1f8201f
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/test_tween.html
@@ -0,0 +1,29 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Tween — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { ticker, tween } from '../src/index.js';
+
+        ticker.start();
+
+        const data = {
+            radius: 0
+        };
+
+        tween(data, { radius: 24, spring: 1.2, damping: 0.4 }, 1000, 'easeOutElastic', null, () => {
+            console.log(data.radius);
+        });
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/thread_canvas.html b/node_modules/@alienkitty/space.js/examples/thread_canvas.html
new file mode 100644
index 0000000..5d18d0e
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/thread_canvas.html
@@ -0,0 +1,233 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Canvas Thread — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Thread, ticker } from '../src/index.js';
+
+        // Based on https://codepen.io/zepha/pen/VpXvBJ
+
+        class CanvasNoise {
+            constructor(params) {
+                this.params = params;
+
+                this.initParameters();
+                this.initCanvas();
+            }
+
+            initParameters() {
+                const defaults = {
+                    width: 1,
+                    height: 1,
+                    tileSize: 250,
+                    monochrome: true
+                };
+
+                this.params = Object.assign(defaults, this.params);
+            }
+
+            initCanvas() {
+                this.canvas = this.params.canvas;
+                this.canvas.width = this.params.width;
+                this.canvas.height = this.params.height;
+                this.context = this.canvas.getContext('2d');
+
+                this.tile = typeof window === 'undefined' ? new OffscreenCanvas(this.params.tileSize, this.params.tileSize) : document.createElement('canvas');
+                this.tile.width = this.params.tileSize;
+                this.tile.height = this.params.tileSize;
+                this.tileContext = this.tile.getContext('2d');
+            }
+
+            // Public methods
+
+            resize = (width, height, dpr) => {
+                this.canvas.width = Math.round(width * dpr);
+                this.canvas.height = Math.round(height * dpr);
+
+                this.tile.width = Math.round(this.params.tileSize * dpr);
+                this.tile.height = Math.round(this.params.tileSize * dpr);
+
+                this.width = this.canvas.width / this.tile.width + 1; // One extra tile for row offset
+                this.height = this.canvas.height / this.tile.height;
+
+                this.update();
+            };
+
+            update = () => {
+                const pixels = new ImageData(this.tile.width, this.tile.height);
+
+                for (let i = 0, l = pixels.data.length; i < l; i += 4) {
+                    const rand = 255 * Math.random();
+
+                    pixels.data[i] = this.params.monochrome ? rand : 255 * Math.random();
+                    pixels.data[i + 1] = this.params.monochrome ? rand : 255 * Math.random();
+                    pixels.data[i + 2] = this.params.monochrome ? rand : 255 * Math.random();
+                    pixels.data[i + 3] = 255;
+                }
+
+                this.tileContext.putImageData(pixels, 0, 0);
+
+                for (let x = 0, xl = this.width; x < xl; x++) {
+                    for (let y = 0, yl = this.height; y < yl; y++) {
+                        this.context.drawImage(this.tile, x * this.tile.width - (y % 2 === 0 ? this.tile.width / 2 : 0), y * this.tile.height, this.tile.width, this.tile.height);
+                    }
+                }
+            };
+        }
+
+        class CanvasNoiseThread {
+            constructor() {
+                this.addListeners();
+            }
+
+            addListeners() {
+                addEventListener('message', this.onMessage);
+
+                ticker.start();
+            }
+
+            // Event handlers
+
+            onMessage = ({ data }) => {
+                this[data.message.fn].call(this, data.message);
+            };
+
+            onUpdate = () => {
+                this.noise.update();
+            };
+
+            // Public methods
+
+            init = ({ params }) => {
+                this.noise = new CanvasNoise(params);
+            };
+
+            resize = ({ width, height, dpr }) => {
+                this.noise.resize(width, height, dpr);
+            };
+
+            start = ({ fps }) => {
+                ticker.add(this.onUpdate, fps);
+            };
+
+            stop = () => {
+                ticker.remove(this.onUpdate);
+            };
+        }
+
+        class CanvasNoiseController {
+            static init(params) {
+                this.params = params;
+
+                this.initThread();
+            }
+
+            static initThread() {
+                if ('transferControlToOffscreen' in this.params.canvas && !/firefox/i.test(navigator.userAgent)) {
+                    this.thread = new Thread({
+                        imports: [
+                            ['../src/index.js', 'ticker']
+                        ],
+                        classes: [CanvasNoise],
+                        controller: [CanvasNoiseThread, 'init', 'resize', 'start', 'stop']
+                    });
+
+                    this.element = this.params.canvas;
+                    this.params.canvas = this.element.transferControlToOffscreen();
+
+                    this.thread.init({ params: this.params, buffer: [this.params.canvas] });
+                } else {
+                    ticker.start();
+
+                    this.noise = new CanvasNoise(this.params);
+                }
+            }
+
+            // Event handlers
+
+            static onUpdate = () => {
+                this.noise.update();
+            };
+
+            // Public methods
+
+            static resize = (width, height, dpr) => {
+                if (this.thread) {
+                    this.thread.resize({ width, height, dpr });
+                } else {
+                    this.noise.resize(width, height, dpr);
+                }
+            };
+
+            static start = () => {
+                if (this.thread) {
+                    this.thread.start({ fps: 20 });
+                } else {
+                    ticker.add(this.onUpdate, 20);
+                }
+            };
+
+            static stop = () => {
+                if (this.thread) {
+                    this.thread.stop();
+                } else {
+                    ticker.remove(this.onUpdate);
+                }
+            };
+        }
+
+        class App {
+            static async init() {
+                this.initCanvas();
+                this.initControllers();
+
+                this.addListeners();
+                this.onResize();
+            }
+
+            static initCanvas() {
+                this.canvas = document.createElement('canvas');
+                document.body.appendChild(this.canvas);
+            }
+
+            static initControllers() {
+                CanvasNoiseController.init({ canvas: this.canvas });
+            }
+
+            static addListeners() {
+                window.addEventListener('resize', this.onResize);
+                window.addEventListener('load', this.onLoad);
+            }
+
+            // Event handlers
+
+            static onResize = () => {
+                const width = document.documentElement.clientWidth;
+                const height = document.documentElement.clientHeight;
+                const dpr = window.devicePixelRatio;
+
+                this.canvas.style.width = width + 'px';
+                this.canvas.style.height = height + 'px';
+
+                CanvasNoiseController.resize(width, height, dpr);
+            };
+
+            static onLoad = () => {
+                CanvasNoiseController.start();
+            };
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/three/3d_lights.html b/node_modules/@alienkitty/space.js/examples/three/3d_lights.html
new file mode 100644
index 0000000..7179519
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/three/3d_lights.html
@@ -0,0 +1,146 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Lights — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="../assets/css/style.css">
+
+    <script type="importmap">
+        {
+            "imports": {
+                "three": "https://unpkg.com/three/build/three.module.js",
+                "three/addons/": "https://unpkg.com/three/examples/jsm/"
+            }
+        }
+    </script>
+
+    <script type="module">
+        import { AmbientLight, BoxGeometry, Color, DirectionalLight, HemisphereLight, Mesh, MeshStandardMaterial, PerspectiveCamera, PointLight, RectAreaLight, Scene, SpotLight, WebGLRenderer } from 'three';
+        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
+        import { RectAreaLightUniformsLib } from 'three/addons/lights/RectAreaLightUniformsLib.js';
+
+        // init
+
+        const renderer = new WebGLRenderer({ antialias: true });
+        renderer.setPixelRatio(window.devicePixelRatio);
+        renderer.setSize(window.innerWidth, window.innerHeight);
+        document.body.appendChild(renderer.domElement);
+
+        const scene = new Scene();
+        scene.background = new Color(0x0e0e0e);
+
+        const camera = new PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 2000);
+        camera.position.z = 10;
+
+        const controls = new OrbitControls(camera, renderer.domElement);
+        controls.enableDamping = true;
+
+        // lights
+
+        scene.add(new AmbientLight(0xffffff, 3));
+
+        scene.add(new HemisphereLight(0xffffff, 0x888888, 3));
+
+        const directionalLight = new DirectionalLight(0xffffff, 2);
+        directionalLight.position.set(5, 5, 5);
+        scene.add(directionalLight);
+
+        const pointLight = new PointLight();
+        scene.add(pointLight);
+
+        const spotLight = new SpotLight();
+        spotLight.angle = 0.3;
+        spotLight.penumbra = 0.2;
+        spotLight.decay = 2;
+        spotLight.position.set(-5, 5, 5);
+        scene.add(spotLight);
+
+        RectAreaLightUniformsLib.init();
+
+        const rectLight1 = new RectAreaLight(0xff0000, 5, 4, 10);
+        rectLight1.position.set(-5, 5, -5);
+        rectLight1.lookAt(0, 0, 0);
+        scene.add(rectLight1);
+
+        const rectLight2 = new RectAreaLight(0x00ff00, 5, 4, 10);
+        rectLight2.position.set(0, 5, -5);
+        rectLight2.lookAt(0, 0, 0);
+        scene.add(rectLight2);
+
+        const rectLight3 = new RectAreaLight(0x0000ff, 5, 4, 10);
+        rectLight3.position.set(5, 5, -5);
+        rectLight3.lookAt(0, 0, 0);
+        scene.add(rectLight3);
+
+        // mesh
+
+        const geometry = new BoxGeometry();
+        const material = new MeshStandardMaterial({ color: 0x595959, metalness: 0.7, roughness: 0.7 });
+
+        const mesh = new Mesh(geometry, material);
+        scene.add(mesh);
+
+        // panel
+
+        import { LightPanelController, PanelItem, UI } from '../../src/three.js';
+
+        const ui = new UI({ fps: true });
+        ui.animateIn();
+        document.body.appendChild(ui.element);
+
+        const items = [
+            {
+                label: 'FPS'
+            }
+        ];
+
+        items.forEach(data => {
+            ui.addPanel(new PanelItem(data));
+        });
+
+        LightPanelController.init(scene, ui);
+
+        // animation
+
+        function animate(time) {
+            requestAnimationFrame(animate);
+
+            time = time * 0.001; // seconds
+
+            mesh.rotation.x = time / 2;
+            mesh.rotation.y = time;
+
+            pointLight.position.x = Math.sin(time * 1.7) * 2;
+            pointLight.position.y = Math.cos(time * 1.5) * 2;
+            pointLight.position.z = Math.cos(time * 1.3) * 2;
+
+            controls.update();
+
+            renderer.render(scene, camera);
+
+            LightPanelController.update();
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+
+        // resize
+
+        window.addEventListener('resize', onWindowResize);
+
+        function onWindowResize() {
+            camera.aspect = window.innerWidth / window.innerHeight;
+            camera.updateProjectionMatrix();
+
+            renderer.setSize(window.innerWidth, window.innerHeight);
+        }
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/three/3d_materials.html b/node_modules/@alienkitty/space.js/examples/three/3d_materials.html
new file mode 100644
index 0000000..81ce3de
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/three/3d_materials.html
@@ -0,0 +1,105 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Materials — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="../assets/css/style.css">
+
+    <script type="importmap">
+        {
+            "imports": {
+                "three": "https://unpkg.com/three/build/three.module.js",
+                "three/addons/": "https://unpkg.com/three/examples/jsm/"
+            }
+        }
+    </script>
+
+    <script type="module">
+        import { BoxGeometry, Color, HemisphereLight, Mesh, MeshNormalMaterial, PerspectiveCamera, Scene, WebGLRenderer } from 'three';
+        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
+
+        // init
+
+        const renderer = new WebGLRenderer({ antialias: true });
+        renderer.setPixelRatio(window.devicePixelRatio);
+        renderer.setSize(window.innerWidth, window.innerHeight);
+        document.body.appendChild(renderer.domElement);
+
+        const scene = new Scene();
+        scene.background = new Color(0x0e0e0e);
+
+        const camera = new PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 2000);
+        camera.position.z = 10;
+
+        const controls = new OrbitControls(camera, renderer.domElement);
+        controls.enableDamping = true;
+
+        // lights
+
+        scene.add(new HemisphereLight(0xffffff, 0x888888, 3));
+
+        // mesh
+
+        const geometry = new BoxGeometry();
+        geometry.computeTangents();
+
+        const material = new MeshNormalMaterial();
+
+        const mesh = new Mesh(geometry, material);
+        scene.add(mesh);
+
+        // panel
+
+        import { MaterialPanelController, Point3D, UI } from '../../src/three.js';
+
+        const ui = new UI({ fps: true });
+        ui.animateIn();
+        document.body.appendChild(ui.element);
+
+        Point3D.init(scene, camera);
+
+        const point = new Point3D(mesh);
+        scene.add(point);
+
+        MaterialPanelController.init(mesh, point);
+
+        // animation
+
+        function animate(time) {
+            requestAnimationFrame(animate);
+
+            time = time * 0.001; // seconds
+
+            mesh.rotation.x = time / 2;
+            mesh.rotation.y = time;
+
+            controls.update();
+
+            renderer.render(scene, camera);
+
+            Point3D.update(time);
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+
+        // resize
+
+        window.addEventListener('resize', onWindowResize);
+
+        function onWindowResize() {
+            camera.aspect = window.innerWidth / window.innerHeight;
+            camera.updateProjectionMatrix();
+
+            renderer.setSize(window.innerWidth, window.innerHeight);
+        }
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/three/3d_materials_instancing.html b/node_modules/@alienkitty/space.js/examples/three/3d_materials_instancing.html
new file mode 100644
index 0000000..afb86b9
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/three/3d_materials_instancing.html
@@ -0,0 +1,138 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Materials Instancing — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="../assets/css/style.css">
+
+    <script type="importmap">
+        {
+            "imports": {
+                "three": "https://unpkg.com/three/build/three.module.js",
+                "three/addons/": "https://unpkg.com/three/examples/jsm/"
+            }
+        }
+    </script>
+
+    <script type="module">
+        import { Color, HemisphereLight, IcosahedronGeometry, InstancedMesh, Matrix4, MeshPhongMaterial, PerspectiveCamera, Scene, WebGLRenderer } from 'three';
+        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
+        import { mergeVertices } from 'three/addons/utils/BufferGeometryUtils.js';
+
+        const DEBUG = /[?&]debug/.test(location.search);
+
+        const amount = parseInt(location.search.slice(1), 10) || 3;
+        const count = Math.pow(amount, 3);
+
+        const color = new Color();
+
+        // init
+
+        const renderer = new WebGLRenderer({ antialias: true });
+        renderer.setPixelRatio(window.devicePixelRatio);
+        renderer.setSize(window.innerWidth, window.innerHeight);
+        document.body.appendChild(renderer.domElement);
+
+        const scene = new Scene();
+        scene.background = new Color(0x0e0e0e);
+
+        const camera = new PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 2000);
+        camera.position.set(amount, amount, amount);
+        camera.lookAt(scene.position);
+
+        const controls = new OrbitControls(camera, renderer.domElement);
+        controls.enableDamping = true;
+        controls.enableZoom = false;
+        controls.enablePan = false;
+
+        // lights
+
+        scene.add(new HemisphereLight(0xffffff, 0x888888, 3));
+
+        // mesh
+
+        let geometry = new IcosahedronGeometry(0.5, 12);
+
+        // Convert to indexed geometry
+        geometry = mergeVertices(geometry);
+
+        geometry.computeTangents();
+
+        const material = new MeshPhongMaterial();
+
+        const mesh = new InstancedMesh(geometry, material, count);
+
+        let i = 0;
+        const offset = (amount - 1) / 2;
+
+        const matrix = new Matrix4();
+
+        for (let x = 0; x < amount; x++) {
+            for (let y = 0; y < amount; y++) {
+                for (let z = 0; z < amount; z++) {
+                    matrix.setPosition(offset - x, offset - y, offset - z);
+
+                    mesh.setMatrixAt(i, matrix);
+                    mesh.setColorAt(i, color);
+
+                    i++;
+                }
+            }
+        }
+
+        scene.add(mesh);
+
+        // panel
+
+        import { MaterialPanelController, Point3D, UI } from '../../src/three.js';
+
+        const ui = new UI({ fps: true });
+        ui.animateIn();
+        document.body.appendChild(ui.element);
+
+        Point3D.init(scene, camera, {
+            debug: DEBUG
+        });
+
+        const point = new Point3D(mesh);
+        scene.add(point);
+
+        MaterialPanelController.init(mesh, point);
+
+        // animation
+
+        function animate(time) {
+            requestAnimationFrame(animate);
+
+            time = time * 0.001; // seconds
+
+            controls.update();
+
+            renderer.render(scene, camera);
+
+            Point3D.update(time);
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+
+        // resize
+
+        window.addEventListener('resize', onWindowResize);
+
+        function onWindowResize() {
+            camera.aspect = window.innerWidth / window.innerHeight;
+            camera.updateProjectionMatrix();
+
+            renderer.setSize(window.innerWidth, window.innerHeight);
+        }
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/three/3d_materials_instancing_modified.html b/node_modules/@alienkitty/space.js/examples/three/3d_materials_instancing_modified.html
new file mode 100644
index 0000000..e589f30
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/three/3d_materials_instancing_modified.html
@@ -0,0 +1,263 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Materials Instancing Modified — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="../assets/css/style.css">
+
+    <script type="importmap">
+        {
+            "imports": {
+                "three": "https://unpkg.com/three/build/three.module.js",
+                "three/addons/": "https://unpkg.com/three/examples/jsm/"
+            }
+        }
+    </script>
+
+    <script type="module">
+        import { Color, HemisphereLight, IcosahedronGeometry, InstancedBufferAttribute, InstancedMesh, Matrix4, MeshPhongMaterial, PerspectiveCamera, Scene, WebGLRenderer } from 'three';
+        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
+        import { mergeVertices } from 'three/addons/utils/BufferGeometryUtils.js';
+
+        const DEBUG = /[?&]debug/.test(location.search);
+
+        const amount = parseInt(location.search.slice(1), 10) || 3;
+        const count = Math.pow(amount, 3);
+
+        const color = new Color();
+
+        // init
+
+        const renderer = new WebGLRenderer({ antialias: true });
+        renderer.setPixelRatio(window.devicePixelRatio);
+        renderer.setSize(window.innerWidth, window.innerHeight);
+        document.body.appendChild(renderer.domElement);
+
+        const scene = new Scene();
+        scene.background = new Color(0x0e0e0e);
+
+        const camera = new PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 2000);
+        camera.position.set(amount, amount, amount);
+        camera.lookAt(scene.position);
+
+        const controls = new OrbitControls(camera, renderer.domElement);
+        controls.enableDamping = true;
+        controls.enableZoom = false;
+        controls.enablePan = false;
+
+        // lights
+
+        scene.add(new HemisphereLight(0xffffff, 0x888888, 3));
+
+        // mesh
+
+        let geometry = new IcosahedronGeometry(0.5, 12);
+
+        // Convert to indexed geometry
+        geometry = mergeVertices(geometry);
+
+        geometry.computeTangents();
+
+        const material = new MeshPhongMaterial();
+
+        const mesh = new InstancedMesh(geometry, material, count);
+
+        let i = 0;
+        const offset = (amount - 1) / 2;
+
+        const matrix = new Matrix4();
+
+        for (let x = 0; x < amount; x++) {
+            for (let y = 0; y < amount; y++) {
+                for (let z = 0; z < amount; z++) {
+                    matrix.setPosition(offset - x, offset - y, offset - z);
+
+                    mesh.setMatrixAt(i, matrix);
+                    mesh.setColorAt(i, color);
+
+                    i++;
+                }
+            }
+        }
+
+        scene.add(mesh);
+
+        // panel
+
+        import { InstanceOptions, MaterialPanelController, MaterialPanels, MaterialPatches, Panel, PanelItem, Point3D, UI } from '../../src/three.js';
+
+        // Add attributes
+        geometry.setAttribute('instanceOpacity', new InstancedBufferAttribute(new Float32Array(mesh.instanceMatrix.count).fill(1), 1));
+
+        MaterialPatches.phong = {
+            instanceOpacity(shader) {
+                shader.vertexShader = shader.vertexShader.replace(
+                    '#include <color_pars_vertex>',
+                    /* glsl */ `
+                    #include <color_pars_vertex>
+
+                    attribute float instanceOpacity;
+                    varying float vInstanceOpacity;
+                    `
+                );
+
+                shader.vertexShader = shader.vertexShader.replace(
+                    '#include <color_vertex>',
+                    /* glsl */ `
+                    #include <color_vertex>
+
+                    vInstanceOpacity = instanceOpacity;
+                    `
+                );
+
+                shader.fragmentShader = shader.fragmentShader.replace(
+                    '#include <color_pars_fragment>',
+                    /* glsl */ `
+                    #include <color_pars_fragment>
+
+                    varying float vInstanceOpacity;
+                    `
+                );
+
+                shader.fragmentShader = shader.fragmentShader.replace(
+                    '#include <color_fragment>',
+                    /* glsl */ `
+                    #include <color_fragment>
+
+                    diffuseColor.a = vInstanceOpacity * opacity;
+                    `
+                );
+            }
+        };
+
+        class InstancedMeshPanel extends Panel {
+            constructor(mesh, materialItems) {
+                super();
+
+                this.mesh = mesh;
+                this.materialItems = materialItems;
+
+                this.initPanel();
+            }
+
+            initPanel() {
+                const mesh = this.mesh;
+                const point = Point3D.getPoint(mesh);
+                const materialItems = this.materialItems;
+
+                const items = [
+                    {
+                        type: 'list',
+                        label: 'Instance',
+                        list: InstanceOptions,
+                        value: 'Mesh',
+                        callback: (value, panel) => {
+                            if (InstanceOptions[value]) {
+                                const index = point.instances[0].index;
+
+                                const instanceItems = [
+                                    {
+                                        type: 'divider'
+                                    },
+                                    {
+                                        type: 'slider',
+                                        label: 'Opacity',
+                                        min: 0,
+                                        max: 1,
+                                        step: 0.01,
+                                        value: mesh.geometry.attributes.instanceOpacity.getX(index),
+                                        callback: value => {
+                                            if (value < 1) {
+                                                mesh.material.transparent = true;
+                                                mesh.material.needsUpdate = true;
+                                            }
+
+                                            point.instances.forEach(instance => {
+                                                mesh.geometry.attributes.instanceOpacity.setX(instance.index, value);
+                                            });
+
+                                            mesh.geometry.attributes.instanceOpacity.needsUpdate = true;
+                                        }
+                                    }
+                                ];
+
+                                const instancePanel = new Panel();
+                                instancePanel.animateIn(true);
+
+                                instanceItems.forEach(data => {
+                                    instancePanel.add(new PanelItem(data));
+                                });
+
+                                panel.setContent(instancePanel);
+                            } else {
+                                const materialPanel = new Panel();
+                                materialPanel.animateIn(true);
+
+                                materialItems.forEach(data => {
+                                    materialPanel.add(new PanelItem(data));
+                                });
+
+                                panel.setContent(materialPanel);
+                            }
+                        }
+                    }
+                ];
+
+                items.forEach(data => {
+                    this.add(new PanelItem(data));
+                });
+            }
+        }
+
+        MaterialPanels.InstancedMeshPanel = InstancedMeshPanel;
+
+        const ui = new UI({ fps: true });
+        ui.animateIn();
+        document.body.appendChild(ui.element);
+
+        Point3D.init(scene, camera, {
+            debug: DEBUG
+        });
+
+        const point = new Point3D(mesh);
+        scene.add(point);
+
+        MaterialPanelController.init(mesh, point);
+
+        // animation
+
+        function animate(time) {
+            requestAnimationFrame(animate);
+
+            time = time * 0.001; // seconds
+
+            controls.update();
+
+            renderer.render(scene, camera);
+
+            Point3D.update(time);
+            ui.update();
+        }
+
+        requestAnimationFrame(animate);
+
+        // resize
+
+        window.addEventListener('resize', onWindowResize);
+
+        function onWindowResize() {
+            camera.aspect = window.innerWidth / window.innerHeight;
+            camera.updateProjectionMatrix();
+
+            renderer.setSize(window.innerWidth, window.innerHeight);
+        }
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/examples/tween.html b/node_modules/@alienkitty/space.js/examples/tween.html
new file mode 100644
index 0000000..121dac7
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/examples/tween.html
@@ -0,0 +1,148 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
+
+    <title>Tween — Space.js</title>
+
+    <link rel="preconnect" href="https://fonts.gstatic.com">
+    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono">
+    <link rel="stylesheet" href="assets/css/style.css">
+
+    <script type="module">
+        import { Interface, clearTween, ticker, tween } from '../src/index.js';
+
+        class Progress extends Interface {
+            constructor() {
+                super(null, 'svg');
+
+                const size = 90;
+
+                this.width = size;
+                this.height = size;
+                this.x = size / 2;
+                this.y = size / 2;
+                this.r = size * 0.4;
+                this.radius = this.r;
+                this.progress = 0;
+                this.needsUpdate = false;
+
+                this.initSVG();
+
+                this.addListeners();
+            }
+
+            initSVG() {
+                this.attr({
+                    width: this.width,
+                    height: this.height
+                });
+
+                this.circle = new Interface(null, 'svg', 'circle');
+                this.circle.attr({
+                    cx: this.x,
+                    cy: this.y,
+                    r: this.r
+                });
+                this.circle.css({
+                    fill: 'none',
+                    stroke: 'var(--ui-color)',
+                    strokeWidth: 1.5
+                });
+                this.circle.start = 0;
+                this.circle.offset = -0.25;
+                this.add(this.circle);
+            }
+
+            addListeners() {
+                window.addEventListener('pointerdown', this.onPointerDown);
+                window.addEventListener('pointerup', this.onPointerUp);
+                ticker.add(this.onUpdate);
+            }
+
+            removeListeners() {
+                ticker.remove(this.onUpdate);
+            }
+
+            // Event handlers
+
+            onPointerDown = () => {
+                clearTween(this);
+
+                this.needsUpdate = true;
+
+                tween(this, { radius: this.r * 0.5 }, 500, 'easeOutCubic', () => {
+                    this.needsUpdate = false;
+                });
+            };
+
+            onPointerUp = () => {
+                clearTween(this);
+
+                this.needsUpdate = true;
+
+                tween(this, { radius: this.r, spring: 1.2, damping: 0.4 }, 1000, 'easeOutElastic', () => {
+                    this.needsUpdate = false;
+                });
+            };
+
+            onUpdate = () => {
+                if (this.needsUpdate) {
+                    this.update();
+                }
+            };
+
+            onProgress = ({ progress }) => {
+                clearTween(this);
+
+                this.needsUpdate = true;
+
+                tween(this, { progress }, 500, 'easeOutCubic', () => {
+                    this.needsUpdate = false;
+                });
+            };
+
+            // Public methods
+
+            update = () => {
+                this.circle.attr({ r: this.radius });
+                this.circle.line(this.progress);
+            };
+        }
+
+        class App {
+            static init() {
+                this.initView();
+
+                this.addListeners();
+            }
+
+            static initView() {
+                this.view = new Progress();
+                this.view.css({
+                    position: 'absolute',
+                    left: '50%',
+                    top: '50%',
+                    marginLeft: -this.view.width / 2,
+                    marginTop: -this.view.height / 2,
+                    cursor: 'pointer',
+                    webkitUserSelect: 'none',
+                    userSelect: 'none'
+                });
+                document.body.appendChild(this.view.element);
+
+                this.view.onProgress({ progress: 1 });
+            }
+
+            static addListeners() {
+                ticker.start();
+            }
+        }
+
+        App.init();
+    </script>
+</head>
+<body>
+</body>
+</html>
diff --git a/node_modules/@alienkitty/space.js/space.js.png b/node_modules/@alienkitty/space.js/space.js.png
new file mode 100644
index 0000000..46c44a0
Binary files /dev/null and b/node_modules/@alienkitty/space.js/space.js.png differ
diff --git a/node_modules/@alienkitty/space.js/src/audio/WebAudio.js b/node_modules/@alienkitty/space.js/src/audio/WebAudio.js
index 17a7137..990168e 100755
--- a/node_modules/@alienkitty/space.js/src/audio/WebAudio.js
+++ b/node_modules/@alienkitty/space.js/src/audio/WebAudio.js
@@ -116,7 +116,7 @@ export class WebAudio {
 
         if (sound) {
             sound.gain.set(volume);
-            sound.loop = !!loop;
+            sound.loop = loop;
 
             this.trigger(id);
         }
@@ -135,7 +135,7 @@ export class WebAudio {
 
         if (sound) {
             sound.gain.set(0);
-            sound.loop = !!loop;
+            sound.loop = loop;
 
             this.trigger(id);
 
diff --git a/node_modules/@alienkitty/space.js/src/extras/Magnetic.js b/node_modules/@alienkitty/space.js/src/extras/Magnetic.js
index c390784..983c50d 100644
--- a/node_modules/@alienkitty/space.js/src/extras/Magnetic.js
+++ b/node_modules/@alienkitty/space.js/src/extras/Magnetic.js
@@ -37,9 +37,7 @@ export class Magnetic extends Component {
         window.removeEventListener('pointerup', this.onPointerUp);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onPointerDown = e => {
         this.onPointerMove(e);
@@ -95,9 +93,7 @@ export class Magnetic extends Component {
         }
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     enable = () => {
         this.addListeners();
diff --git a/node_modules/@alienkitty/space.js/src/extras/Smooth.js b/node_modules/@alienkitty/space.js/src/extras/Smooth.js
index be79d5d..086c718 100644
--- a/node_modules/@alienkitty/space.js/src/extras/Smooth.js
+++ b/node_modules/@alienkitty/space.js/src/extras/Smooth.js
@@ -59,9 +59,7 @@ export class Smooth extends Component {
         ticker.remove(this.onUpdate);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onResize = async () => {
         await defer();
@@ -96,9 +94,7 @@ export class Smooth extends Component {
         this.progress = clamp(this.position / (this.height - document.documentElement.clientHeight), 0, 1);
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setScroll = top => {
         document.scrollingElement.scrollTop = top;
diff --git a/node_modules/@alienkitty/space.js/src/extras/SmoothSkew.js b/node_modules/@alienkitty/space.js/src/extras/SmoothSkew.js
index 1dc8ccd..bb5c66c 100644
--- a/node_modules/@alienkitty/space.js/src/extras/SmoothSkew.js
+++ b/node_modules/@alienkitty/space.js/src/extras/SmoothSkew.js
@@ -61,9 +61,7 @@ export class SmoothSkew extends Component {
         ticker.remove(this.onUpdate);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onResize = async () => {
         await defer();
@@ -101,9 +99,7 @@ export class SmoothSkew extends Component {
         this.progress = clamp(this.position / (this.height - document.documentElement.clientHeight), 0, 1);
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setScroll = top => {
         document.scrollingElement.scrollTop = top;
diff --git a/node_modules/@alienkitty/space.js/src/extras/SmoothViews.js b/node_modules/@alienkitty/space.js/src/extras/SmoothViews.js
index e0066cc..5b3c950 100644
--- a/node_modules/@alienkitty/space.js/src/extras/SmoothViews.js
+++ b/node_modules/@alienkitty/space.js/src/extras/SmoothViews.js
@@ -64,9 +64,7 @@ export class SmoothViews extends Component {
         ticker.remove(this.onUpdate);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onResize = async () => {
         await defer();
@@ -130,9 +128,7 @@ export class SmoothViews extends Component {
         this.total = clamp(this.position / (this.height - document.documentElement.clientHeight), 0, 1);
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setScroll = index => {
         document.scrollingElement.scrollTop = this.views[index].top;
diff --git a/node_modules/@alienkitty/space.js/src/loaders/MultiLoader.js b/node_modules/@alienkitty/space.js/src/loaders/MultiLoader.js
index 7f7b9e1..3393596 100755
--- a/node_modules/@alienkitty/space.js/src/loaders/MultiLoader.js
+++ b/node_modules/@alienkitty/space.js/src/loaders/MultiLoader.js
@@ -22,9 +22,7 @@ export class MultiLoader extends Loader {
         this.total += weight;
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onProgress = () => {
         let loaded = this.loaded;
@@ -44,9 +42,7 @@ export class MultiLoader extends Loader {
         this.increment();
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     destroy = () => {
         for (let i = this.loaders.length - 1; i >= 0; i--) {
diff --git a/node_modules/@alienkitty/space.js/src/panels/ColorPicker.js b/node_modules/@alienkitty/space.js/src/panels/ColorPicker.js
index f166dac..7cabd18 100644
--- a/node_modules/@alienkitty/space.js/src/panels/ColorPicker.js
+++ b/node_modules/@alienkitty/space.js/src/panels/ColorPicker.js
@@ -22,12 +22,14 @@ const Third = Math.PI * 2 / 3;
 
 export class ColorPicker extends Interface {
     constructor({
+        label,
         value,
         noText,
         callback
     }) {
         super('.color-picker');
 
+        this.label = label;
         this.value = new Color(value);
         this.noText = noText;
         this.callback = callback;
@@ -304,9 +306,7 @@ export class ColorPicker extends Interface {
         window.removeEventListener('pointerup', this.onPointerUp);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onColorPicker = ({ open }) => {
         if (this.isOpen && !open) {
@@ -443,9 +443,7 @@ export class ColorPicker extends Interface {
         this.onPointerMove(e);
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setHeight = () => {
         const height = this.isOpen ? this.width + this.height + 10 : this.height;
@@ -497,8 +495,8 @@ export class ColorPicker extends Interface {
         if (value !== this.lastValue || force) {
             this.lastValue = value;
 
-            if (this.isDown) {
-                this.events.emit('update', { value: this.value, target: this });
+            if (this.isDown || force) {
+                this.events.emit('update', { path: [], value: this.value, target: this });
 
                 if (this.callback) {
                     this.callback(this.value, this);
diff --git a/node_modules/@alienkitty/space.js/src/panels/Content.js b/node_modules/@alienkitty/space.js/src/panels/Content.js
index 1465f56..b57dbe6 100644
--- a/node_modules/@alienkitty/space.js/src/panels/Content.js
+++ b/node_modules/@alienkitty/space.js/src/panels/Content.js
@@ -15,11 +15,17 @@ export class Content extends Interface {
         this.update();
     }
 
-    /**
-     * Public methods
-     */
+    // Event handlers
+
+    onUpdate = e => {
+        this.events.emit('update', e);
+    };
+
+    // Public methods
 
     setContent = content => {
+        content.events.on('update', this.onUpdate);
+
         if (!this.group) {
             this.group = new Interface('.group');
             this.add(this.group);
diff --git a/node_modules/@alienkitty/space.js/src/panels/Link.js b/node_modules/@alienkitty/space.js/src/panels/Link.js
index 4d8fb8f..2026d3a 100644
--- a/node_modules/@alienkitty/space.js/src/panels/Link.js
+++ b/node_modules/@alienkitty/space.js/src/panels/Link.js
@@ -8,11 +8,13 @@ import { Interface } from '../utils/Interface.js';
 
 export class Link extends Interface {
     constructor({
-        value = '',
+        label,
+        value,
         callback
     }) {
         super('.link');
 
+        this.label = label;
         this.value = value;
         this.callback = callback;
 
@@ -59,9 +61,7 @@ export class Link extends Interface {
         this.element.removeEventListener('click', this.onClick);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onHover = ({ type }) => {
         this.line.clearTween();
@@ -77,9 +77,7 @@ export class Link extends Interface {
         this.update();
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setValue = value => {
         this.value = value;
@@ -90,7 +88,7 @@ export class Link extends Interface {
     };
 
     update = () => {
-        this.events.emit('update', { value: this.value, target: this });
+        this.events.emit('update', { path: [], value: this.value, target: this });
 
         if (this.callback) {
             this.callback(this.value, this);
diff --git a/node_modules/@alienkitty/space.js/src/panels/List.js b/node_modules/@alienkitty/space.js/src/panels/List.js
index 584fc99..99e85da 100644
--- a/node_modules/@alienkitty/space.js/src/panels/List.js
+++ b/node_modules/@alienkitty/space.js/src/panels/List.js
@@ -8,12 +8,14 @@ import { ListSelect } from './ListSelect.js';
 
 export class List extends Interface {
     constructor({
+        label,
         list,
         value,
         callback
     }) {
         super('.list');
 
+        this.label = label;
         this.list = list;
         this.keys = Object.keys(this.list);
         this.values = Object.values(this.list);
@@ -31,7 +33,7 @@ export class List extends Interface {
     initHTML() {
         this.container = new Interface('.container');
         this.container.css({
-            height: 18
+            height: 20
         });
         this.add(this.container);
     }
@@ -58,9 +60,7 @@ export class List extends Interface {
         });
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onClick = ({ target }) => {
         this.index = target.index;
@@ -68,16 +68,21 @@ export class List extends Interface {
         this.update();
     };
 
-    /**
-     * Public methods
-     */
+    onUpdate = e => {
+        e.path.unshift([this.label, this.index]);
+
+        this.events.emit('update', e);
+    };
+
+    // Public methods
 
     setContent = content => {
+        content.events.on('update', this.onUpdate);
+
         if (!this.group) {
             this.group = new Interface('.group');
             this.group.css({
-                position: 'relative',
-                left: -10
+                position: 'relative'
             });
             this.add(this.group);
         }
@@ -96,13 +101,27 @@ export class List extends Interface {
     setValue = value => {
         this.index = this.values.indexOf(value);
 
+        if (this.keys.length > 2) {
+            this.items[0].setIndex(this.index);
+        }
+
+        this.update();
+    };
+
+    setIndex = index => {
+        this.index = index;
+
+        if (this.keys.length > 2) {
+            this.items[0].setIndex(this.index);
+        }
+
         this.update();
     };
 
     update = () => {
         const value = this.keys[this.index];
 
-        this.events.emit('update', { value, target: this });
+        this.events.emit('update', { path: [], index: this.index, target: this });
 
         if (this.callback) {
             this.callback(value, this);
diff --git a/node_modules/@alienkitty/space.js/src/panels/ListSelect.js b/node_modules/@alienkitty/space.js/src/panels/ListSelect.js
index 571038d..e076d7d 100644
--- a/node_modules/@alienkitty/space.js/src/panels/ListSelect.js
+++ b/node_modules/@alienkitty/space.js/src/panels/ListSelect.js
@@ -24,8 +24,8 @@ export class ListSelect extends Interface {
     initHTML() {
         this.css({
             position: 'relative',
-            height: 18,
-            lineHeight: 16,
+            height: 20,
+            lineHeight: 20,
             textTransform: 'uppercase',
             whiteSpace: 'nowrap',
             overflow: 'hidden',
@@ -52,7 +52,7 @@ export class ListSelect extends Interface {
         this.add(this.over);
     }
 
-    getNextIndex = () => {
+    getNextIndex() {
         this.next = this.index + 1;
 
         if (this.next >= this.list.length) {
@@ -60,7 +60,7 @@ export class ListSelect extends Interface {
         }
 
         return this.next;
-    };
+    }
 
     addListeners() {
         this.element.addEventListener('click', this.onClick);
@@ -70,9 +70,7 @@ export class ListSelect extends Interface {
         this.element.removeEventListener('click', this.onClick);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onClick = () => {
         if (this.clicked) {
@@ -96,9 +94,14 @@ export class ListSelect extends Interface {
         this.events.emit('click', { target: this });
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
+
+    setIndex = index => {
+        this.index = index;
+
+        this.text.text(this.list[this.index]);
+        this.over.text(this.list[this.getNextIndex()]);
+    };
 
     destroy = () => {
         this.removeListeners();
diff --git a/node_modules/@alienkitty/space.js/src/panels/ListToggle.js b/node_modules/@alienkitty/space.js/src/panels/ListToggle.js
index b49d5b1..3c3aa8b 100644
--- a/node_modules/@alienkitty/space.js/src/panels/ListToggle.js
+++ b/node_modules/@alienkitty/space.js/src/panels/ListToggle.js
@@ -26,8 +26,8 @@ export class ListToggle extends Interface {
             position: 'relative',
             cssFloat: 'left',
             width: 54,
-            height: 18,
-            lineHeight: 16,
+            height: 20,
+            lineHeight: 20,
             textTransform: 'uppercase',
             whiteSpace: 'nowrap',
             overflow: 'hidden',
@@ -67,9 +67,7 @@ export class ListToggle extends Interface {
         this.element.removeEventListener('click', this.onClick);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onHover = ({ type }) => {
         if (this.clicked) {
@@ -92,18 +90,18 @@ export class ListToggle extends Interface {
         this.events.emit('click', { target: this });
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     active = () => {
         this.clicked = true;
+
         this.text.css({ y: -8, opacity: 0 });
         this.over.css({ y: 0, opacity: 1 });
     };
 
     inactive = () => {
         this.clicked = false;
+
         this.onHover({ type: 'mouseleave' });
     };
 
diff --git a/node_modules/@alienkitty/space.js/src/panels/Panel.js b/node_modules/@alienkitty/space.js/src/panels/Panel.js
index 0987226..913dbdc 100644
--- a/node_modules/@alienkitty/space.js/src/panels/Panel.js
+++ b/node_modules/@alienkitty/space.js/src/panels/Panel.js
@@ -38,11 +38,13 @@ export class Panel extends Interface {
 
     removeListeners() {
         Stage.events.off('color_picker', this.onColorPicker);
+
+        this.items.forEach(item => {
+            item.events.off('update', this.onUpdate);
+        });
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onColorPicker = ({ open, target }) => {
         if (!this.openColor && !this.element.contains(target.element)) {
@@ -50,40 +52,28 @@ export class Panel extends Interface {
         }
 
         if (open) {
-            this.items.forEach(item => {
-                if (item.element.contains(target.element)) {
-                    if (item.view && item.view.group && item.view.container) {
-                        item.disable(item.view.container);
-                    }
-
-                    return;
-                }
-
-                item.disable();
-            });
+            this.disable(target);
 
             this.openColor = target;
         } else {
-            this.items.forEach(item => {
-                if (item.view && item.view.group && item.view.container) {
-                    item.enable(item.view.container);
-                }
-
-                item.enable();
-            });
+            this.enable();
 
             this.openColor = null;
         }
     };
 
-    /**
-     * Public methods
-     */
+    onUpdate = e => {
+        this.events.emit('update', e);
+    };
+
+    // Public methods
 
-    add = child => {
-        super.add(child);
+    add = item => {
+        item.events.on('update', this.onUpdate);
 
-        this.items.push(child);
+        super.add(item);
+
+        this.items.push(item);
     };
 
     setPanelValue = (label, value) => {
@@ -92,13 +82,30 @@ export class Panel extends Interface {
                 return;
             }
 
+            if (item.data.label === label && item.view.setValue) {
+                item.view.setValue(value, true);
+                return;
+            }
+
             if (item.view.group && item.view.group.children[0] && item.view.group.children[0].setPanelValue) {
                 item.view.group.children[0].setPanelValue(label, value);
+            }
+        });
+    };
+
+    setPanelIndex = (label, index) => {
+        this.items.forEach(item => {
+            if (!item.view) {
                 return;
             }
 
-            if (item.data.label === label && item.view.setValue) {
-                item.view.setValue(value, true);
+            if (item.data.label === label && item.view.setIndex) {
+                item.view.setIndex(index);
+                return;
+            }
+
+            if (item.view.group && item.view.group.children[0] && item.view.group.children[0].setPanelIndex) {
+                item.view.group.children[0].setPanelIndex(label, index);
             }
         });
     };
@@ -129,6 +136,38 @@ export class Panel extends Interface {
         });
     };
 
+    enable = () => {
+        this.items.forEach(item => {
+            if (item.view && item.view.group && item.view.container) {
+                item.enable(item.view.container);
+            }
+
+            item.enable();
+        });
+    };
+
+    disable = target => {
+        this.items.forEach(item => {
+            if (item.view && item.view.group && item.view.container) {
+                item.disable(item.view.container);
+            }
+
+            if (target && item.element.contains(target.element)) {
+                return;
+            }
+
+            item.disable();
+        });
+    };
+
+    active = () => {
+        this.clearTween().tween({ opacity: 1 }, 300, 'easeOutSine');
+    };
+
+    inactive = () => {
+        this.clearTween().tween({ opacity: 0 }, 300, 'easeOutSine');
+    };
+
     destroy = () => {
         this.removeListeners();
 
diff --git a/node_modules/@alienkitty/space.js/src/panels/PanelItem.js b/node_modules/@alienkitty/space.js/src/panels/PanelItem.js
index 44af2de..aa24784 100644
--- a/node_modules/@alienkitty/space.js/src/panels/PanelItem.js
+++ b/node_modules/@alienkitty/space.js/src/panels/PanelItem.js
@@ -20,7 +20,7 @@ export class PanelItem extends Interface {
 
     initHTML() {
         this.css({
-            width: 128
+            width: 108
         });
 
         this.container = new Interface('.container');
@@ -31,8 +31,7 @@ export class PanelItem extends Interface {
 
         if (!this.data.type) {
             this.container.css({
-                padding: '10px 10px 0',
-                marginBottom: 10
+                margin: '10px 0'
             });
 
             this.text = new Interface('.text');
@@ -48,8 +47,7 @@ export class PanelItem extends Interface {
             });
         } else if (this.data.type === 'divider') {
             this.container.css({
-                padding: '0 10px',
-                margin: '7px 0'
+                margin: '6px 0'
             });
 
             this.line = new Interface('.line');
@@ -61,43 +59,53 @@ export class PanelItem extends Interface {
             this.container.add(this.line);
         } else if (this.data.type === 'link') {
             this.container.css({
-                padding: '2px 10px 0'
+                margin: '2px 0 0'
             });
 
             this.view = new Link(this.data);
+            this.view.events.on('update', this.onUpdate);
             this.container.add(this.view);
         } else if (this.data.type === 'list') {
             this.container.css({
-                padding: '2px 10px 0'
+                margin: '2px 0 0'
             });
 
             this.view = new List(this.data);
+            this.view.events.on('update', this.onUpdate);
             this.container.add(this.view);
         } else if (this.data.type === 'slider') {
-            this.container.css({
-                padding: '0 10px'
-            });
-
             this.view = new Slider(this.data);
+            this.view.events.on('update', this.onUpdate);
             this.container.add(this.view);
         } else if (this.data.type === 'content') {
             this.view = new Content(this.data);
+            this.view.events.on('update', this.onUpdate);
             this.container.add(this.view);
         } else if (this.data.type === 'color') {
             this.container.css({
                 height: 19,
-                padding: '0 10px',
-                marginBottom: 7
+                margin: '0 0 7px'
             });
 
             this.view = new ColorPicker(this.data);
+            this.view.events.on('update', this.onUpdate);
             this.container.add(this.view);
         }
     }
 
-    /**
-     * Public methods
-     */
+    removeListeners() {
+        if (this.view) {
+            this.view.events.off('update', this.onUpdate);
+        }
+    }
+
+    // Event handlers
+
+    onUpdate = e => {
+        this.events.emit('update', e);
+    };
+
+    // Public methods
 
     animateIn = (delay, fast) => {
         this.clearTween();
@@ -129,4 +137,10 @@ export class PanelItem extends Interface {
         target.css({ pointerEvents: 'none' });
         target.tween({ opacity: 0.35 }, 500, 'easeInOutSine');
     };
+
+    destroy = () => {
+        this.removeListeners();
+
+        return super.destroy();
+    };
 }
diff --git a/node_modules/@alienkitty/space.js/src/panels/Slider.js b/node_modules/@alienkitty/space.js/src/panels/Slider.js
index 8bb54ca..93896e1 100644
--- a/node_modules/@alienkitty/space.js/src/panels/Slider.js
+++ b/node_modules/@alienkitty/space.js/src/panels/Slider.js
@@ -11,7 +11,7 @@ import { clamp } from '../utils/Utils.js';
 
 export class Slider extends Interface {
     constructor({
-        label = '',
+        label,
         min = 0,
         max = 1,
         step = 0.01,
@@ -35,7 +35,7 @@ export class Slider extends Interface {
         this.origin = new Vector2();
         this.mouse = new Vector2();
         this.delta = new Vector2();
-        this.firstDown = false;
+        this.bounds = null;
         this.lastMouse = new Vector2();
         this.lastOrigin = new Vector2();
 
@@ -48,7 +48,7 @@ export class Slider extends Interface {
     initHTML() {
         this.container = new Interface('.container');
         this.container.css({
-            height: 28,
+            height: 27,
             cursor: 'w-resize'
         });
         this.add(this.container);
@@ -103,12 +103,13 @@ export class Slider extends Interface {
         return parseFloat(clamp(value, this.min, this.max).toFixed(this.precision));
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onPointerDown = e => {
-        this.firstDown = true;
+        this.bounds = this.element.getBoundingClientRect();
+        this.lastMouse.set(e.clientX, e.clientY);
+        this.lastOrigin.subVectors(this.lastMouse, this.bounds);
+        this.lastValue = this.value;
 
         this.onPointerMove(e);
 
@@ -117,26 +118,16 @@ export class Slider extends Interface {
     };
 
     onPointerMove = ({ clientX, clientY }) => {
-        const bounds = this.element.getBoundingClientRect();
-
         const event = {
             x: clientX,
             y: clientY
         };
 
         this.mouse.copy(event);
-
-        if (this.firstDown) {
-            this.firstDown = false;
-            this.lastMouse.copy(event);
-            this.lastOrigin.subVectors(event, bounds);
-            this.lastValue = this.value;
-        }
-
         this.delta.subVectors(this.mouse, this.lastMouse);
         this.origin.addVectors(this.lastOrigin, this.delta);
 
-        let value = ((this.origin.x / bounds.width) * this.range + this.min) - this.lastValue;
+        let value = ((this.origin.x / this.bounds.width) * this.range + this.min) - this.lastValue;
         value = Math.floor(value / this.step);
         this.value = this.getValue(this.lastValue + value * this.step);
 
@@ -150,16 +141,13 @@ export class Slider extends Interface {
         this.onPointerMove(e);
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setContent = content => {
         if (!this.group) {
             this.group = new Interface('.group');
             this.group.css({
-                position: 'relative',
-                left: -10
+                position: 'relative'
             });
             this.add(this.group);
         }
@@ -192,7 +180,7 @@ export class Slider extends Interface {
         if (this.value !== this.lastValue || force) {
             this.lastValue = this.value;
 
-            this.events.emit('update', { value: this.value, target: this });
+            this.events.emit('update', { path: [], value: this.value, target: this });
 
             if (this.callback) {
                 this.callback(this.value, this);
diff --git a/node_modules/@alienkitty/space.js/src/three.js b/node_modules/@alienkitty/space.js/src/three.js
index 2f2cd7d..ec7c431 100644
--- a/node_modules/@alienkitty/space.js/src/three.js
+++ b/node_modules/@alienkitty/space.js/src/three.js
@@ -5,10 +5,10 @@ export { BufferLoader } from './loaders/BufferLoader.js';
 export { MultiLoader } from './loaders/MultiLoader.js';
 export { ImageBitmapLoader } from './loaders/ImageBitmapLoader.js';
 export { ImageBitmapLoaderThread } from './loaders/ImageBitmapLoaderThread.js';
-export { TextureLoader } from './loaders/three/TextureLoader.js';
-export { EnvironmentTextureLoader } from './loaders/three/EnvironmentTextureLoader.js';
-export { BufferGeometryLoader } from './loaders/three/BufferGeometryLoader.js';
-export { BufferGeometryLoaderThread } from './loaders/three/BufferGeometryLoaderThread.js';
+export { TextureLoader } from './three/loaders/TextureLoader.js';
+export { EnvironmentTextureLoader } from './three/loaders/EnvironmentTextureLoader.js';
+export { BufferGeometryLoader } from './three/loaders/BufferGeometryLoader.js';
+export { BufferGeometryLoaderThread } from './three/loaders/BufferGeometryLoaderThread.js';
 
 // Math
 export { Color } from './math/Color.js';
@@ -30,14 +30,14 @@ export { LinkedList } from './utils/LinkedList.js';
 export { ObjectPool } from './utils/ObjectPool.js';
 export { Cluster } from './utils/Cluster.js';
 export { Thread } from './utils/Thread.js';
-export * from './utils/three/Utils3D.js';
+export * from './three/utils/Utils3D.js';
 
 // Audio
 export { WebAudio } from './audio/WebAudio.js';
 export { WebAudioParam } from './audio/WebAudioParam.js';
 export { Sound } from './audio/Sound.js';
-export { WebAudio3D } from './audio/three/WebAudio3D.js';
-export { Sound3D } from './audio/three/Sound3D.js';
+export { WebAudio3D } from './three/audio/WebAudio3D.js';
+export { Sound3D } from './three/audio/Sound3D.js';
 
 // Panels
 export { Panel } from './panels/Panel.js';
@@ -49,8 +49,10 @@ export { ListSelect } from './panels/ListSelect.js';
 export { Slider } from './panels/Slider.js';
 export { Content } from './panels/Content.js';
 export { ColorPicker } from './panels/ColorPicker.js';
-export * from './panels/three/Options.js';
-export * from './panels/three/Panels.js';
+export * from './three/panels/Custom.js';
+export * from './three/panels/Options.js';
+export * from './three/panels/Panels.js';
+export * from './three/panels/Patches.js';
 
 // UI
 export { UI } from './ui/UI.js';
@@ -63,7 +65,7 @@ export { Tracker } from './ui/Tracker.js';
 export { Point } from './ui/Point.js';
 export { PointText } from './ui/PointText.js';
 export { TargetNumber } from './ui/TargetNumber.js';
-export { Point3D } from './ui/three/Point3D.js';
+export { Point3D } from './three/ui/Point3D.js';
 
 // Extras
 export { Smooth } from './extras/Smooth.js';
diff --git a/node_modules/@alienkitty/space.js/src/three/audio/Sound3D.js b/node_modules/@alienkitty/space.js/src/three/audio/Sound3D.js
new file mode 100755
index 0000000..94aeb10
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/audio/Sound3D.js
@@ -0,0 +1,104 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Group, MathUtils, Quaternion, Vector3 } from 'three';
+
+import { WebAudio } from '../../audio/WebAudio.js';
+import { WebAudioParam } from '../../audio/WebAudioParam.js';
+
+export class Sound3D extends Group {
+    constructor(camera, id, buffer) {
+        super();
+
+        if (typeof id !== 'string') {
+            buffer = id;
+            id = camera;
+            camera = null;
+        }
+
+        this.context = WebAudio.context;
+
+        if (camera) {
+            this.camera = camera;
+            this.cameraWorldPosition = new Vector3();
+            this.worldPosition = new Vector3();
+
+            this.audioDistance = 0;
+            this.audioNearDistance = camera.near;
+            this.audioFarDistance = camera.far;
+
+            this.output = this.context.createGain();
+            this.output.connect(WebAudio.input);
+
+            this.gain = new WebAudioParam(this, 'output', 'gain', 0);
+
+            this.screenSpacePosition = new Vector3();
+
+            this.stereo = this.context.createStereoPanner();
+            this.stereo.connect(this.output);
+
+            this.stereoPan = new WebAudioParam(this, 'stereo', 'pan', 0);
+
+            this.input = this.output;
+        } else {
+            this.worldPosition = new Vector3();
+            this.worldQuaternion = new Quaternion();
+            this.worldScale = new Vector3();
+            this.worldOrientation = new Vector3();
+
+            this.panner = this.context.createPanner();
+            this.panner.panningModel = 'HRTF';
+            this.panner.connect(WebAudio.input);
+
+            this.audioPositionX = new WebAudioParam(this, 'panner', 'positionX', 0);
+            this.audioPositionY = new WebAudioParam(this, 'panner', 'positionY', 0);
+            this.audioPositionZ = new WebAudioParam(this, 'panner', 'positionZ', 0);
+            this.audioOrientationX = new WebAudioParam(this, 'panner', 'orientationX', 0);
+            this.audioOrientationY = new WebAudioParam(this, 'panner', 'orientationY', 0);
+            this.audioOrientationZ = new WebAudioParam(this, 'panner', 'orientationZ', 1);
+
+            this.output = this.panner;
+            this.input = this.output;
+        }
+
+        if (buffer) {
+            this.sound = WebAudio.add(this, id, buffer, true);
+        } else {
+            this.sound = WebAudio.clone(this, id, MathUtils.generateUUID(), true);
+        }
+    }
+
+    updateMatrixWorld(force) {
+        super.updateMatrixWorld(force);
+
+        if (isNaN(this.matrixWorld.elements[0])) {
+            return;
+        }
+
+        if (this.camera) {
+            this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld);
+            this.worldPosition.setFromMatrixPosition(this.matrixWorld);
+
+            this.gain.value = MathUtils.clamp(MathUtils.mapLinear(this.cameraWorldPosition.distanceTo(this.worldPosition) + this.audioDistance, this.audioNearDistance, this.audioFarDistance, 1, 0), 0, 1);
+
+            this.screenSpacePosition.copy(this.worldPosition).project(this.camera);
+
+            this.stereoPan.value = MathUtils.clamp(this.screenSpacePosition.x, -1, 1);
+        } else {
+            this.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this.worldScale);
+            this.worldOrientation.set(0, 0, 1).applyQuaternion(this.worldQuaternion);
+
+            this.audioPositionX.value = this.worldPosition.x;
+            this.audioPositionY.value = this.worldPosition.y;
+            this.audioPositionZ.value = this.worldPosition.z;
+            this.audioOrientationX.value = this.worldOrientation.x;
+            this.audioOrientationY.value = this.worldOrientation.y;
+            this.audioOrientationZ.value = this.worldOrientation.z;
+        }
+    }
+
+    destroy() {
+        WebAudio.remove(this.sound.id);
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/audio/WebAudio3D.js b/node_modules/@alienkitty/space.js/src/three/audio/WebAudio3D.js
new file mode 100755
index 0000000..f40817e
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/audio/WebAudio3D.js
@@ -0,0 +1,50 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Group, Quaternion, Vector3 } from 'three';
+
+import { WebAudio } from '../../audio/WebAudio.js';
+import { WebAudioParam } from '../../audio/WebAudioParam.js';
+
+export class WebAudio3D extends Group {
+    constructor() {
+        super();
+
+        this.context = WebAudio.context;
+
+        this.worldPosition = new Vector3();
+        this.worldQuaternion = new Quaternion();
+        this.worldScale = new Vector3();
+        this.worldOrientation = new Vector3();
+
+        this.listener = this.context.listener;
+
+        this.audioPositionX = new WebAudioParam(this, 'listener', 'positionX', 0);
+        this.audioPositionY = new WebAudioParam(this, 'listener', 'positionY', 0);
+        this.audioPositionZ = new WebAudioParam(this, 'listener', 'positionZ', 0);
+        this.audioForwardX = new WebAudioParam(this, 'listener', 'forwardX', 0);
+        this.audioForwardY = new WebAudioParam(this, 'listener', 'forwardY', 0);
+        this.audioForwardZ = new WebAudioParam(this, 'listener', 'forwardZ', -1);
+        this.audioUpX = new WebAudioParam(this, 'listener', 'upX', 0);
+        this.audioUpY = new WebAudioParam(this, 'listener', 'upY', 1);
+        this.audioUpZ = new WebAudioParam(this, 'listener', 'upZ', 0);
+    }
+
+    updateMatrixWorld(force) {
+        super.updateMatrixWorld(force);
+
+        this.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this.worldScale);
+        this.worldOrientation.set(0, 0, -1).applyQuaternion(this.worldQuaternion);
+
+        this.audioPositionX.value = this.worldPosition.x;
+        this.audioPositionY.value = this.worldPosition.y;
+        this.audioPositionZ.value = this.worldPosition.z;
+        this.audioForwardX.value = this.worldOrientation.x;
+        this.audioForwardY.value = this.worldOrientation.y;
+        this.audioForwardZ.value = this.worldOrientation.z;
+        this.audioUpX.value = this.up.x;
+        this.audioUpY.value = this.up.y;
+        this.audioUpZ.value = this.up.z;
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/loaders/BufferGeometryLoader.js b/node_modules/@alienkitty/space.js/src/three/loaders/BufferGeometryLoader.js
new file mode 100644
index 0000000..8cb7097
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/loaders/BufferGeometryLoader.js
@@ -0,0 +1,74 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { BufferAttribute, BufferGeometry } from 'three';
+
+import { Thread } from '../../utils/Thread.js';
+import { BufferGeometryLoaderThread } from './BufferGeometryLoaderThread.js';
+import { Loader } from '../../loaders/Loader.js';
+
+export class BufferGeometryLoader extends Loader {
+    load(path, callback) {
+        let promise;
+
+        if (Thread.threads) {
+            promise = BufferGeometryLoaderThread.load(this.getPath(path), this.fetchOptions);
+        } else {
+            promise = fetch(this.getPath(path), this.fetchOptions).then(response => {
+                return response.json();
+            }).then(({ data }) => {
+                const buffers = {};
+
+                for (const key in data.attributes) {
+                    buffers[key] = new Float32Array(data.attributes[key].array);
+                }
+
+                return buffers;
+            });
+        }
+
+        promise.then(buffers => {
+            if (buffers.error) {
+                throw new Error(buffers.error);
+            }
+
+            const geometry = new BufferGeometry();
+            geometry.setAttribute('position', new BufferAttribute(buffers.position, 3));
+            geometry.setAttribute('normal', new BufferAttribute(buffers.normal, 3));
+            geometry.setAttribute('uv', new BufferAttribute(buffers.uv, 2));
+
+            if (buffers.uv1) {
+                geometry.setAttribute('uv1', new BufferAttribute(buffers.uv1, 2));
+            }
+
+            if (buffers.uv2) {
+                geometry.setAttribute('uv2', new BufferAttribute(buffers.uv2, 2));
+            }
+
+            if (buffers.uv3) {
+                geometry.setAttribute('uv3', new BufferAttribute(buffers.uv3, 2));
+            }
+
+            if (buffers.uv4) {
+                geometry.setAttribute('uv4', new BufferAttribute(buffers.uv4, 2));
+            }
+
+            geometry.computeBoundingSphere();
+
+            this.increment();
+
+            if (callback) {
+                callback(geometry);
+            }
+        }).catch(event => {
+            this.increment();
+
+            if (callback) {
+                callback(event);
+            }
+        });
+
+        this.total++;
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/loaders/BufferGeometryLoaderThread.js b/node_modules/@alienkitty/space.js/src/three/loaders/BufferGeometryLoaderThread.js
new file mode 100644
index 0000000..0ad6776
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/loaders/BufferGeometryLoaderThread.js
@@ -0,0 +1,39 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Thread } from '../../utils/Thread.js';
+
+import { absolute } from '../../utils/Utils.js';
+
+export class BufferGeometryLoaderThread {
+    static init() {
+        Thread.upload(loadBufferGeometry);
+
+        function loadBufferGeometry({ path, options, id }) {
+            fetch(path, options).then(response => {
+                return response.json();
+            }).then(({ data }) => {
+                const buffers = {};
+
+                for (const key in data.attributes) {
+                    buffers[key] = new Float32Array(data.attributes[key].array);
+                }
+
+                postMessage({ id, message: buffers });
+            }).catch(error => {
+                if (error instanceof Error) {
+                    error = error.name + ': ' + error.message;
+                }
+
+                postMessage({ id, message: { error } });
+            });
+        }
+    }
+
+    static load(path, options) {
+        path = absolute(path);
+
+        return Thread.shared().loadBufferGeometry({ path, options });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/loaders/EnvironmentTextureLoader.js b/node_modules/@alienkitty/space.js/src/three/loaders/EnvironmentTextureLoader.js
new file mode 100644
index 0000000..d5fb453
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/loaders/EnvironmentTextureLoader.js
@@ -0,0 +1,64 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { PMREMGenerator } from 'three';
+
+import { TextureLoader } from './TextureLoader.js';
+import { Loader } from '../../loaders/Loader.js';
+
+export class EnvironmentTextureLoader extends Loader {
+    constructor(renderer, options = {}) {
+        super();
+
+        this.textureLoader = new TextureLoader();
+        this.textureLoader.setOptions(options);
+
+        // Generates an environment diffuse texture
+        this.pmremGenerator = new PMREMGenerator(renderer);
+        this.pmremGenerator.compileEquirectangularShader();
+    }
+
+    load(path, callback) {
+        this.textureLoader.load(path, texture => {
+            if (texture instanceof Error) {
+                throw new Error(texture);
+            }
+
+            const renderTargetCube = this.pmremGenerator.fromEquirectangular(texture);
+
+            texture.dispose();
+
+            this.increment();
+
+            if (callback) {
+                callback(renderTargetCube.texture);
+            }
+        });
+
+        this.total++;
+    }
+
+    getPath(path) {
+        return this.textureLoader.getPath(path);
+    }
+
+    setPath(path) {
+        return this.textureLoader.setPath(path);
+    }
+
+    setCrossOrigin(crossOrigin) {
+        return this.textureLoader.setCrossOrigin(crossOrigin);
+    }
+
+    setFetchOptions(fetchOptions) {
+        return this.textureLoader.setFetchOptions(fetchOptions);
+    }
+
+    destroy() {
+        this.pmremGenerator.dispose();
+        this.textureLoader.destroy();
+
+        return super.destroy();
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/loaders/TextureLoader.js b/node_modules/@alienkitty/space.js/src/three/loaders/TextureLoader.js
new file mode 100755
index 0000000..26f023a
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/loaders/TextureLoader.js
@@ -0,0 +1,104 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Texture } from 'three';
+
+import { Thread } from '../../utils/Thread.js';
+import { ImageBitmapLoaderThread } from '../../loaders/ImageBitmapLoaderThread.js';
+import { Loader } from '../../loaders/Loader.js';
+
+export class TextureLoader extends Loader {
+    constructor() {
+        super();
+
+        this.defaultOptions = {
+            imageOrientation: 'flipY',
+            premultiplyAlpha: 'none',
+            preserveData: false
+        };
+
+        this.options = this.defaultOptions;
+    }
+
+    load(path, callback) {
+        const cached = this.files[path];
+
+        let texture;
+        let promise;
+
+        if (cached && cached.isTexture) {
+            texture = cached;
+
+            this.increment();
+
+            if (callback) {
+                callback(texture);
+            }
+        } else {
+            texture = new Texture();
+
+            if (cached) {
+                promise = Promise.resolve(cached);
+            } else {
+                const params = {
+                    imageOrientation: this.options.imageOrientation,
+                    premultiplyAlpha: this.options.premultiplyAlpha
+                };
+
+                if (Thread.threads) {
+                    promise = ImageBitmapLoaderThread.load(this.getPath(path), this.fetchOptions, params);
+                } else {
+                    promise = fetch(this.getPath(path), this.fetchOptions).then(response => {
+                        return response.blob();
+                    }).then(blob => {
+                        return createImageBitmap(blob, params);
+                    });
+                }
+            }
+
+            promise.then(image => {
+                if (image.error) {
+                    throw new Error(image.error);
+                }
+
+                texture.image = image;
+                texture.needsUpdate = true;
+
+                texture.onUpdate = () => {
+                    if (image.close && !this.options.preserveData) {
+                        image.close();
+                    }
+
+                    texture.onUpdate = null;
+                };
+
+                this.increment();
+
+                if (callback) {
+                    callback(texture);
+                }
+            }).catch(event => {
+                this.increment();
+
+                if (callback) {
+                    callback(event);
+                }
+            });
+
+            if (this.cache) {
+                this.files[path] = texture;
+            }
+        }
+
+        this.total++;
+
+        return texture;
+    }
+
+    setOptions(options) {
+        this.options = Object.assign(this.defaultOptions, options);
+
+        return this;
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/Custom.js b/node_modules/@alienkitty/space.js/src/three/panels/Custom.js
new file mode 100644
index 0000000..3f7b924
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/Custom.js
@@ -0,0 +1,11 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { InstancedMeshPanel } from './objects/InstancedMeshPanel.js';
+
+export const MaterialPatches = {};
+
+export const MaterialPanels = {
+    InstancedMeshPanel
+};
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/Options.js b/node_modules/@alienkitty/space.js/src/three/panels/Options.js
new file mode 100644
index 0000000..a72057f
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/Options.js
@@ -0,0 +1,78 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import {
+    AddOperation,
+    BackSide,
+    ClampToEdgeWrapping,
+    DoubleSide,
+    FrontSide,
+    MirroredRepeatWrapping,
+    MixOperation,
+    MultiplyOperation,
+    RepeatWrapping
+} from 'three';
+
+export const VisibleOptions = {
+    Off: false,
+    Visible: true
+};
+
+export const SideOptions = {
+    Front: FrontSide,
+    Back: BackSide,
+    Double: DoubleSide
+};
+
+export const InstanceOptions = {
+    Mesh: false,
+    Instance: true
+};
+
+export const FlatShadingOptions = {
+    Off: false,
+    Flat: true
+};
+
+export const WireframeOptions = {
+    Off: false,
+    Wire: true
+};
+
+export const ToneMappedOptions = {
+    Off: false,
+    Tone: true
+};
+
+export const CombineOptions = {
+    Multiply: MultiplyOperation,
+    Mix: MixOperation,
+    Add: AddOperation
+};
+
+export const WrapOptions = {
+    Repeat: RepeatWrapping,
+    Clamp: ClampToEdgeWrapping,
+    Mirror: MirroredRepeatWrapping
+};
+
+export const HelperOptions = {
+    Off: false,
+    Helper: true
+};
+
+export const NormalsHelperOptions = {
+    Off: false,
+    Normals: true
+};
+
+export const TangentsHelperOptions = {
+    Off: false,
+    Tangents: true
+};
+
+export const UVHelperOptions = {
+    Off: false,
+    UV: true
+};
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/Panels.js b/node_modules/@alienkitty/space.js/src/three/panels/Panels.js
new file mode 100644
index 0000000..fba70bb
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/Panels.js
@@ -0,0 +1,38 @@
+export * from './lights/LightPanelController.js';
+export { AmbientLightPanel } from './lights/AmbientLightPanel.js';
+export { HemisphereLightPanel } from './lights/HemisphereLightPanel.js';
+export { DirectionalLightPanel } from './lights/DirectionalLightPanel.js';
+export { PointLightPanel } from './lights/PointLightPanel.js';
+export { SpotLightPanel } from './lights/SpotLightPanel.js';
+export { RectAreaLightPanel } from './lights/RectAreaLightPanel.js';
+export * from './materials/MaterialPanelController.js';
+export { BasicMaterialOptions, BasicMaterialPanel } from './materials/BasicMaterialPanel.js';
+export { BasicMaterialCommonPanel } from './materials/BasicMaterialCommonPanel.js';
+export { BasicMaterialEnvPanel } from './materials/BasicMaterialEnvPanel.js';
+export { LambertMaterialOptions, LambertMaterialPanel } from './materials/LambertMaterialPanel.js';
+export { LambertMaterialCommonPanel } from './materials/LambertMaterialCommonPanel.js';
+export { LambertMaterialEnvPanel } from './materials/LambertMaterialEnvPanel.js';
+export { MatcapMaterialOptions, MatcapMaterialPanel } from './materials/MatcapMaterialPanel.js';
+export { MatcapMaterialCommonPanel } from './materials/MatcapMaterialCommonPanel.js';
+export { PhongMaterialOptions, PhongMaterialPanel } from './materials/PhongMaterialPanel.js';
+export { PhongMaterialCommonPanel } from './materials/PhongMaterialCommonPanel.js';
+export { PhongMaterialEnvPanel } from './materials/PhongMaterialEnvPanel.js';
+export { ToonMaterialOptions, ToonMaterialPanel } from './materials/ToonMaterialPanel.js';
+export { ToonMaterialCommonPanel } from './materials/ToonMaterialCommonPanel.js';
+export { StandardMaterialOptions, StandardMaterialPanel } from './materials/StandardMaterialPanel.js';
+export { StandardMaterialCommonPanel } from './materials/StandardMaterialCommonPanel.js';
+export { StandardMaterialEnvPanel } from './materials/StandardMaterialEnvPanel.js';
+export { PhysicalMaterialOptions, PhysicalMaterialPanel } from './materials/PhysicalMaterialPanel.js';
+export { PhysicalMaterialCommonPanel } from './materials/PhysicalMaterialCommonPanel.js';
+export { PhysicalMaterialClearcoatPanel } from './materials/PhysicalMaterialClearcoatPanel.js';
+export { PhysicalMaterialIridescencePanel } from './materials/PhysicalMaterialIridescencePanel.js';
+export { PhysicalMaterialAnisotropyPanel } from './materials/PhysicalMaterialAnisotropyPanel.js';
+export { PhysicalMaterialSheenPanel } from './materials/PhysicalMaterialSheenPanel.js';
+export { PhysicalMaterialTransmissionPanel } from './materials/PhysicalMaterialTransmissionPanel.js';
+export { PhysicalMaterialEnvPanel } from './materials/PhysicalMaterialEnvPanel.js';
+export { NormalMaterialOptions, NormalMaterialPanel } from './materials/NormalMaterialPanel.js';
+export { NormalMaterialCommonPanel } from './materials/NormalMaterialCommonPanel.js';
+export { InstancedMeshPanel } from './objects/InstancedMeshPanel.js';
+export { MeshHelperPanel } from './objects/MeshHelperPanel.js';
+export { OimoPhysicsPanel } from './physics/OimoPhysicsPanel.js';
+export { MapPanel } from './textures/MapPanel.js';
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/Patches.js b/node_modules/@alienkitty/space.js/src/three/panels/Patches.js
new file mode 100644
index 0000000..e59b9ad
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/Patches.js
@@ -0,0 +1,84 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { ShaderChunk } from 'three';
+
+export const PhongMaterialPatches = {
+    // Based on https://github.com/mrdoob/three.js/blob/dev/examples/jsm/shaders/SubsurfaceScatteringShader.js by daoshengmu
+    subsurface(shader, mesh) {
+        shader.uniforms = Object.assign(shader.uniforms, mesh.userData.subsurfaceUniforms);
+
+        shader.fragmentShader = shader.fragmentShader.replace(
+            'void main() {',
+            /* glsl */ `
+            uniform float thicknessDistortion;
+            uniform float thicknessAmbient;
+            uniform float thicknessAttenuation;
+            uniform float thicknessPower;
+            uniform float thicknessScale;
+
+            void RE_Direct_Scattering(IncidentLight directLight, vec3 geometryPosition, vec3 geometryNormal, vec3 geometryViewDir, vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {
+                vec3 thickness = directLight.color * 0.8;
+                vec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));
+                float scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;
+                vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;
+                reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;
+            }
+
+            void main() {
+            `
+        );
+
+        shader.fragmentShader = shader.fragmentShader.replace(
+            '#include <lights_fragment_begin>',
+            ShaderChunk.lights_fragment_begin.replaceAll(
+                'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );',
+                /* glsl */ `
+                RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
+                RE_Direct_Scattering(directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);
+                `
+            )
+        );
+    }
+};
+
+export const StandardMaterialPatches = {
+    // Based on https://github.com/mrdoob/three.js/blob/dev/examples/jsm/shaders/SubsurfaceScatteringShader.js by daoshengmu
+    // Based on https://gist.github.com/mattdesl/2ee82157a86962347dedb6572142df7c
+    subsurface(shader, mesh) {
+        shader.uniforms = Object.assign(shader.uniforms, mesh.userData.subsurfaceUniforms);
+
+        shader.fragmentShader = shader.fragmentShader.replace(
+            'void main() {',
+            /* glsl */ `
+            uniform float thicknessDistortion;
+            uniform float thicknessAmbient;
+            uniform float thicknessAttenuation;
+            uniform float thicknessPower;
+            uniform float thicknessScale;
+
+            void RE_Direct_Scattering(IncidentLight directLight, vec3 geometryPosition, vec3 geometryNormal, vec3 geometryViewDir, vec3 geometryClearcoatNormal, PhysicalMaterial material, inout ReflectedLight reflectedLight) {
+                vec3 thickness = directLight.color * 0.8;
+                vec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));
+                float scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;
+                vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;
+                reflectedLight.directDiffuse += material.diffuseColor * directLight.color * scatteringIllu * thicknessAttenuation;
+            }
+
+            void main() {
+            `
+        );
+
+        shader.fragmentShader = shader.fragmentShader.replace(
+            '#include <lights_fragment_begin>',
+            ShaderChunk.lights_fragment_begin.replaceAll(
+                'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );',
+                /* glsl */ `
+                RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
+                RE_Direct_Scattering(directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight);
+                `
+            )
+        );
+    }
+};
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/AmbientLightPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/AmbientLightPanel.js
new file mode 100644
index 0000000..c269e66
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/AmbientLightPanel.js
@@ -0,0 +1,85 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class AmbientLightPanel extends Panel {
+    constructor(panel, light) {
+        super();
+
+        this.panel = panel;
+        this.light = light;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const light = this.light;
+
+        const lightItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: light.color,
+                callback: value => {
+                    light.color.copy(value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: light.intensity,
+                callback: value => {
+                    light.intensity = value;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, light.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const lightPanel = new Panel();
+                        lightPanel.animateIn(true);
+
+                        lightItems.forEach(data => {
+                            lightPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(lightPanel);
+                    }
+
+                    light.visible = VisibleOptions[value];
+
+                    if (light.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/DirectionalLightPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/DirectionalLightPanel.js
new file mode 100644
index 0000000..4690da1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/DirectionalLightPanel.js
@@ -0,0 +1,109 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { HelperOptions, VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class DirectionalLightPanel extends Panel {
+    constructor(panel, light) {
+        super();
+
+        this.panel = panel;
+        this.light = light;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const light = this.light;
+
+        // Defaults
+        if (!light.userData.helper) {
+            light.userData.helper = false;
+        }
+
+        const lightItems = [
+            {
+                type: 'list',
+                label: 'Helper',
+                list: HelperOptions,
+                value: getKeyByValue(HelperOptions, light.userData.helper),
+                callback: value => {
+                    light.userData.helper = HelperOptions[value];
+
+                    this.panel.toggleDirectionalLightHelper(light, light.userData.helper);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: light.color,
+                callback: value => {
+                    light.color.copy(value);
+
+                    if (light.helper) {
+                        light.helper.update();
+                    }
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: light.intensity,
+                callback: value => {
+                    light.intensity = value;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, light.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const lightPanel = new Panel();
+                        lightPanel.animateIn(true);
+
+                        lightItems.forEach(data => {
+                            lightPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(lightPanel);
+                    }
+
+                    light.visible = VisibleOptions[value];
+
+                    if (light.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+
+                    if (light.helper) {
+                        light.helper.visible = light.visible;
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/HemisphereLightPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/HemisphereLightPanel.js
new file mode 100644
index 0000000..484db8c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/HemisphereLightPanel.js
@@ -0,0 +1,121 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { HelperOptions, VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class HemisphereLightPanel extends Panel {
+    constructor(panel, light) {
+        super();
+
+        this.panel = panel;
+        this.light = light;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const light = this.light;
+
+        // Defaults
+        if (!light.userData.helper) {
+            light.userData.helper = false;
+        }
+
+        const lightItems = [
+            {
+                type: 'list',
+                label: 'Helper',
+                list: HelperOptions,
+                value: getKeyByValue(HelperOptions, light.userData.helper),
+                callback: value => {
+                    light.userData.helper = HelperOptions[value];
+
+                    this.panel.toggleHemisphereLightHelper(light, light.userData.helper);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Sky Color',
+                value: light.color,
+                callback: value => {
+                    light.color.copy(value);
+
+                    if (light.helper) {
+                        light.helper.update();
+                    }
+                }
+            },
+            {
+                type: 'color',
+                label: 'Ground Color',
+                value: light.groundColor,
+                callback: value => {
+                    light.groundColor.copy(value);
+
+                    if (light.helper) {
+                        light.helper.update();
+                    }
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: light.intensity,
+                callback: value => {
+                    light.intensity = value;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, light.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const lightPanel = new Panel();
+                        lightPanel.animateIn(true);
+
+                        lightItems.forEach(data => {
+                            lightPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(lightPanel);
+                    }
+
+                    light.visible = VisibleOptions[value];
+
+                    if (light.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+
+                    if (light.helper) {
+                        light.helper.visible = light.visible;
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/LightPanelController.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/LightPanelController.js
new file mode 100644
index 0000000..cd2cf62
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/LightPanelController.js
@@ -0,0 +1,222 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import {
+    AmbientLight,
+    DirectionalLight,
+    DirectionalLightHelper,
+    HemisphereLight,
+    HemisphereLightHelper,
+    PointLight,
+    PointLightHelper,
+    RectAreaLight,
+    SpotLight,
+    SpotLightHelper
+} from 'three';
+
+import { RectAreaLightHelper } from 'three/addons/helpers/RectAreaLightHelper.js';
+
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+import { AmbientLightPanel } from './AmbientLightPanel.js';
+import { HemisphereLightPanel } from './HemisphereLightPanel.js';
+import { DirectionalLightPanel } from './DirectionalLightPanel.js';
+import { PointLightPanel } from './PointLightPanel.js';
+import { SpotLightPanel } from './SpotLightPanel.js';
+import { RectAreaLightPanel } from './RectAreaLightPanel.js';
+
+export const LightOptions = {
+    Ambient: [AmbientLight, AmbientLightPanel],
+    Hemisphere: [HemisphereLight, HemisphereLightPanel],
+    Directional: [DirectionalLight, DirectionalLightPanel],
+    Point: [PointLight, PointLightPanel],
+    Spot: [SpotLight, SpotLightPanel],
+    RectArea: [RectAreaLight, RectAreaLightPanel]
+};
+
+export function getKeyByLight(lightOptions, light) {
+    return Object.keys(lightOptions).reverse().find(key => light instanceof lightOptions[key][0]);
+}
+
+export class LightPanelController {
+    static init(scene, ui) {
+        this.scene = scene;
+        this.ui = ui;
+
+        this.lights = [];
+
+        if (this.ui) {
+            this.initPanel();
+        }
+    }
+
+    static initPanel() {
+        const scene = this.scene;
+        const ui = this.ui;
+
+        const lightOptions = {};
+
+        scene.traverse(object => {
+            if (object.isLight) {
+                this.lights.push(object);
+            }
+        });
+
+        const keys = this.lights.map(light => getKeyByLight(LightOptions, light));
+        const counts = {};
+
+        keys.forEach(key => {
+            counts[key] = counts[key] ? counts[key] + 1 : 1;
+        });
+
+        this.lights.forEach(light => {
+            const key = getKeyByLight(LightOptions, light);
+
+            let count = 1;
+            let lightKey = `${key}${counts[key] > 1 ? count++ : ''}`;
+
+            while (Object.keys(lightOptions).includes(lightKey)) {
+                lightKey = `${key}${count++}`;
+            }
+
+            lightOptions[lightKey] = [light, LightOptions[key][1]];
+        });
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Light',
+                list: lightOptions,
+                value: Object.keys(lightOptions)[0],
+                callback: (value, panel) => {
+                    const [light, LightPanel] = lightOptions[value];
+
+                    const lightPanel = new LightPanel(this, light);
+                    lightPanel.animateIn(true);
+
+                    panel.setContent(lightPanel);
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            ui.addPanel(new PanelItem(data));
+        });
+    }
+
+    // Public methods
+
+    static toggleHemisphereLightHelper = (light, show) => {
+        if (show) {
+            if (!light.helper) {
+                light.helper = new HemisphereLightHelper(light);
+                this.scene.add(light.helper);
+            }
+
+            light.helper.visible = true;
+        } else if (light.helper) {
+            light.helper.visible = false;
+        }
+    };
+
+    static toggleDirectionalLightHelper = (light, show) => {
+        if (show) {
+            if (!light.helper) {
+                light.helper = new DirectionalLightHelper(light, 0.125);
+                this.scene.add(light.helper);
+            }
+
+            light.helper.visible = true;
+        } else if (light.helper) {
+            light.helper.visible = false;
+        }
+    };
+
+    static togglePointLightHelper = (light, show) => {
+        if (show) {
+            if (!light.helper) {
+                light.helper = new PointLightHelper(light, 0.125);
+                this.scene.add(light.helper);
+            }
+
+            light.helper.visible = true;
+        } else if (light.helper) {
+            light.helper.visible = false;
+        }
+    };
+
+    static toggleSpotLightHelper = (light, show) => {
+        if (show) {
+            if (!light.helper) {
+                light.helper = new SpotLightHelper(light);
+                this.scene.add(light.helper);
+            }
+
+            light.helper.visible = true;
+        } else if (light.helper) {
+            light.helper.visible = false;
+        }
+    };
+
+    static toggleRectAreaLightHelper = (light, show) => {
+        if (show) {
+            if (!light.helper) {
+                light.helper = new RectAreaLightHelper(light);
+                this.scene.add(light.helper);
+            }
+
+            light.helper.visible = true;
+        } else if (light.helper) {
+            light.helper.visible = false;
+        }
+    };
+
+    static update = () => {
+        this.lights.forEach(light => {
+            if (light.helper && !light.isRectAreaLight) {
+                light.helper.update();
+            }
+        });
+    };
+
+    static destroy = () => {
+        this.lights.forEach(light => {
+            if (light.helper) {
+                if (light.isHemisphereLight) {
+                    this.toggleHemisphereLightHelper(light, false);
+                }
+
+                if (light.isDirectionalLight) {
+                    this.toggleDirectionalLightHelper(light, false);
+                }
+
+                if (light.isPointLight) {
+                    this.togglePointLightHelper(light, false);
+                }
+
+                if (light.isSpotLight) {
+                    this.toggleSpotLightHelper(light, false);
+                }
+
+                if (light.isRectAreaLight) {
+                    this.toggleRectAreaLightHelper(light, false);
+                }
+
+                this.scene.remove(light.helper);
+                light.helper.dispose();
+
+                delete light.helper;
+            }
+        });
+
+        for (const prop in this) {
+            this[prop] = null;
+        }
+
+        return null;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/PointLightPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/PointLightPanel.js
new file mode 100644
index 0000000..35d2141
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/PointLightPanel.js
@@ -0,0 +1,131 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { HelperOptions, VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class PointLightPanel extends Panel {
+    constructor(panel, light) {
+        super();
+
+        this.panel = panel;
+        this.light = light;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const light = this.light;
+
+        // Defaults
+        if (!light.userData.helper) {
+            light.userData.helper = false;
+        }
+
+        const lightItems = [
+            {
+                type: 'list',
+                label: 'Helper',
+                list: HelperOptions,
+                value: getKeyByValue(HelperOptions, light.userData.helper),
+                callback: value => {
+                    light.userData.helper = HelperOptions[value];
+
+                    this.panel.togglePointLightHelper(light, light.userData.helper);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: light.color,
+                callback: value => {
+                    light.color.copy(value);
+
+                    if (light.helper) {
+                        light.helper.update();
+                    }
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: light.intensity,
+                callback: value => {
+                    light.intensity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Distance',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: light.distance,
+                callback: value => {
+                    light.distance = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Decay',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: light.decay,
+                callback: value => {
+                    light.decay = value;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, light.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const lightPanel = new Panel();
+                        lightPanel.animateIn(true);
+
+                        lightItems.forEach(data => {
+                            lightPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(lightPanel);
+                    }
+
+                    light.visible = VisibleOptions[value];
+
+                    if (light.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+
+                    if (light.helper) {
+                        light.helper.visible = light.visible;
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/RectAreaLightPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/RectAreaLightPanel.js
new file mode 100644
index 0000000..035007b
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/RectAreaLightPanel.js
@@ -0,0 +1,127 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { HelperOptions, VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class RectAreaLightPanel extends Panel {
+    constructor(panel, light) {
+        super();
+
+        this.panel = panel;
+        this.light = light;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const light = this.light;
+
+        // Defaults
+        if (!light.userData.helper) {
+            light.userData.helper = false;
+        }
+
+        const lightItems = [
+            {
+                type: 'list',
+                label: 'Helper',
+                list: HelperOptions,
+                value: getKeyByValue(HelperOptions, light.userData.helper),
+                callback: value => {
+                    light.userData.helper = HelperOptions[value];
+
+                    this.panel.toggleRectAreaLightHelper(light, light.userData.helper);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: light.color,
+                callback: value => {
+                    light.color.copy(value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: light.intensity,
+                callback: value => {
+                    light.intensity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Width',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: light.width,
+                callback: value => {
+                    light.width = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Height',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: light.height,
+                callback: value => {
+                    light.height = value;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, light.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const lightPanel = new Panel();
+                        lightPanel.animateIn(true);
+
+                        lightItems.forEach(data => {
+                            lightPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(lightPanel);
+                    }
+
+                    light.visible = VisibleOptions[value];
+
+                    if (light.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+
+                    if (light.helper) {
+                        light.helper.visible = light.visible;
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/lights/SpotLightPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/lights/SpotLightPanel.js
new file mode 100644
index 0000000..3ed8f5c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/lights/SpotLightPanel.js
@@ -0,0 +1,153 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { HelperOptions, VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class SpotLightPanel extends Panel {
+    constructor(panel, light) {
+        super();
+
+        this.panel = panel;
+        this.light = light;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const light = this.light;
+
+        // Defaults
+        if (!light.userData.helper) {
+            light.userData.helper = false;
+        }
+
+        const lightItems = [
+            {
+                type: 'list',
+                label: 'Helper',
+                list: HelperOptions,
+                value: getKeyByValue(HelperOptions, light.userData.helper),
+                callback: value => {
+                    light.userData.helper = HelperOptions[value];
+
+                    this.panel.toggleSpotLightHelper(light, light.userData.helper);
+                }
+            },
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: light.color,
+                callback: value => {
+                    light.color.copy(value);
+
+                    if (light.helper) {
+                        light.helper.update();
+                    }
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: light.intensity,
+                callback: value => {
+                    light.intensity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Distance',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: light.distance,
+                callback: value => {
+                    light.distance = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Angle',
+                min: 0,
+                max: Math.PI / 2,
+                step: 0.01,
+                value: light.angle,
+                callback: value => {
+                    light.angle = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Penumbra',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: light.penumbra,
+                callback: value => {
+                    light.penumbra = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Decay',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: light.decay,
+                callback: value => {
+                    light.decay = value;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, light.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const lightPanel = new Panel();
+                        lightPanel.animateIn(true);
+
+                        lightItems.forEach(data => {
+                            lightPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(lightPanel);
+                    }
+
+                    light.visible = VisibleOptions[value];
+
+                    if (light.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+
+                    if (light.helper) {
+                        light.helper.visible = light.visible;
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialCommonPanel.js
new file mode 100644
index 0000000..5a4dad2
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialCommonPanel.js
@@ -0,0 +1,60 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { ToneMappedOptions, WireframeOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class BasicMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'list',
+                label: 'Wire',
+                list: WireframeOptions,
+                value: getKeyByValue(WireframeOptions, mesh.material.wireframe),
+                callback: value => {
+                    mesh.material.wireframe = WireframeOptions[value];
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialEnvPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialEnvPanel.js
new file mode 100644
index 0000000..5d564f1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialEnvPanel.js
@@ -0,0 +1,66 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { CombineOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class BasicMaterialEnvPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Combine',
+                list: CombineOptions,
+                value: getKeyByValue(CombineOptions, mesh.material.combine),
+                callback: value => {
+                    mesh.material.combine = CombineOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Reflect',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.reflectivity,
+                callback: value => {
+                    mesh.material.reflectivity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Refract',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.refractionRatio,
+                callback: value => {
+                    mesh.material.refractionRatio = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialPanel.js
new file mode 100644
index 0000000..e1d2e02
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/BasicMaterialPanel.js
@@ -0,0 +1,103 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+
+import { BasicMaterialCommonPanel } from './BasicMaterialCommonPanel.js';
+import { BasicMaterialEnvPanel } from './BasicMaterialEnvPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const BasicMaterialOptions = {
+    Common: BasicMaterialCommonPanel,
+    Map: MapPanel,
+    Env: BasicMaterialEnvPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class BasicMaterialPanel extends Panel {
+    static type = [
+        'common'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'wireframe',
+            'toneMapped',
+            'combine',
+            'reflectivity',
+            'refractionRatio'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete BasicMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete BasicMaterialOptions.Physics;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Basic',
+                list: BasicMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = BasicMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialCommonPanel.js
new file mode 100644
index 0000000..62b9411
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialCommonPanel.js
@@ -0,0 +1,78 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { FlatShadingOptions, ToneMappedOptions, WireframeOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class LambertMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'color',
+                label: 'Emissive',
+                value: mesh.material.emissive,
+                callback: value => {
+                    mesh.material.emissive.copy(value);
+                }
+            },
+            {
+                type: 'list',
+                label: 'Flat',
+                list: FlatShadingOptions,
+                value: getKeyByValue(FlatShadingOptions, mesh.material.flatShading),
+                callback: value => {
+                    mesh.material.flatShading = FlatShadingOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Wire',
+                list: WireframeOptions,
+                value: getKeyByValue(WireframeOptions, mesh.material.wireframe),
+                callback: value => {
+                    mesh.material.wireframe = WireframeOptions[value];
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialEnvPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialEnvPanel.js
new file mode 100644
index 0000000..478d9b1
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialEnvPanel.js
@@ -0,0 +1,66 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { CombineOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class LambertMaterialEnvPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Combine',
+                list: CombineOptions,
+                value: getKeyByValue(CombineOptions, mesh.material.combine),
+                callback: value => {
+                    mesh.material.combine = CombineOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Reflect',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.reflectivity,
+                callback: value => {
+                    mesh.material.reflectivity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Refract',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.refractionRatio,
+                callback: value => {
+                    mesh.material.refractionRatio = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialPanel.js
new file mode 100644
index 0000000..bff5cd6
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/LambertMaterialPanel.js
@@ -0,0 +1,105 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+
+import { LambertMaterialCommonPanel } from './LambertMaterialCommonPanel.js';
+import { LambertMaterialEnvPanel } from './LambertMaterialEnvPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const LambertMaterialOptions = {
+    Common: LambertMaterialCommonPanel,
+    Map: MapPanel,
+    Env: LambertMaterialEnvPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class LambertMaterialPanel extends Panel {
+    static type = [
+        'common'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'emissive',
+            'flatShading',
+            'wireframe',
+            'toneMapped',
+            'combine',
+            'reflectivity',
+            'refractionRatio'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete LambertMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete LambertMaterialOptions.Physics;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Lambert',
+                list: LambertMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = LambertMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/MatcapMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/MatcapMaterialCommonPanel.js
new file mode 100644
index 0000000..e4d2f5a
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/MatcapMaterialCommonPanel.js
@@ -0,0 +1,61 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { FlatShadingOptions, ToneMappedOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class MatcapMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'list',
+                label: 'Flat',
+                list: FlatShadingOptions,
+                value: getKeyByValue(FlatShadingOptions, mesh.material.flatShading),
+                callback: value => {
+                    mesh.material.flatShading = FlatShadingOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/MatcapMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/MatcapMaterialPanel.js
new file mode 100644
index 0000000..a300c02
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/MatcapMaterialPanel.js
@@ -0,0 +1,98 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+
+import { MatcapMaterialCommonPanel } from './MatcapMaterialCommonPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const MatcapMaterialOptions = {
+    Common: MatcapMaterialCommonPanel,
+    Map: MapPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class MatcapMaterialPanel extends Panel {
+    static type = [
+        'common'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'flatShading',
+            'toneMapped'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete MatcapMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete MatcapMaterialOptions.Physics;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Matcap',
+                list: MatcapMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = MatcapMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/MaterialPanelController.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/MaterialPanelController.js
new file mode 100644
index 0000000..980a954
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/MaterialPanelController.js
@@ -0,0 +1,261 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import {
+    MeshBasicMaterial,
+    MeshLambertMaterial,
+    MeshMatcapMaterial,
+    MeshNormalMaterial,
+    MeshPhongMaterial,
+    MeshPhysicalMaterial,
+    MeshStandardMaterial,
+    MeshToonMaterial
+} from 'three';
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPatches } from '../Custom.js';
+import { SideOptions, VisibleOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+import { BasicMaterialPanel } from './BasicMaterialPanel.js';
+import { LambertMaterialPanel } from './LambertMaterialPanel.js';
+import { MatcapMaterialPanel } from './MatcapMaterialPanel.js';
+import { PhongMaterialPanel } from './PhongMaterialPanel.js';
+import { ToonMaterialPanel } from './ToonMaterialPanel.js';
+import { StandardMaterialPanel } from './StandardMaterialPanel.js';
+import { PhysicalMaterialPanel } from './PhysicalMaterialPanel.js';
+import { NormalMaterialPanel } from './NormalMaterialPanel.js';
+
+// https://threejs.org/docs/scenes/material-browser.html
+export const MaterialOptions = {
+    Basic: [MeshBasicMaterial, BasicMaterialPanel],
+    Lambert: [MeshLambertMaterial, LambertMaterialPanel],
+    Matcap: [MeshMatcapMaterial, MatcapMaterialPanel],
+    Phong: [MeshPhongMaterial, PhongMaterialPanel],
+    Toon: [MeshToonMaterial, ToonMaterialPanel],
+    Standard: [MeshStandardMaterial, StandardMaterialPanel],
+    Physical: [MeshPhysicalMaterial, PhysicalMaterialPanel],
+    Normal: [MeshNormalMaterial, NormalMaterialPanel]
+};
+
+export function getKeyByMaterial(materialOptions, material) {
+    return Object.keys(materialOptions).reverse().find(key => material instanceof materialOptions[key][0]);
+}
+
+export class MaterialPanelController {
+    static init(mesh, ui, {
+        materialOptions = MaterialOptions
+    } = {}) {
+        this.mesh = mesh;
+        this.ui = ui;
+        this.materialOptions = materialOptions;
+
+        this.lastMaterialPanel = null;
+
+        this.initPanel();
+    }
+
+    static initPanel() {
+        const mesh = this.mesh;
+        const ui = this.ui;
+        const materialOptions = this.materialOptions;
+
+        const materialProperties = {};
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Opacity',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.opacity,
+                callback: value => {
+                    if (value < 1) {
+                        mesh.material.transparent = true;
+                        mesh.material.needsUpdate = true;
+                    }
+
+                    mesh.material.opacity = value;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Side',
+                list: SideOptions,
+                value: getKeyByValue(SideOptions, mesh.material.side),
+                callback: value => {
+                    mesh.material.side = SideOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Material',
+                list: materialOptions,
+                value: getKeyByMaterial(materialOptions, mesh.material),
+                callback: (value, panel) => {
+                    const [Material, MaterialPanel] = materialOptions[value];
+
+                    const currentMaterialPanel = this.lastMaterialPanel || MaterialPanel;
+
+                    materialProperties.transparent = mesh.material.transparent;
+                    materialProperties.opacity = mesh.material.opacity;
+                    materialProperties.side = mesh.material.side;
+
+                    currentMaterialPanel.type.forEach(type => {
+                        if (!materialProperties[type]) {
+                            materialProperties[type] = {};
+                        }
+
+                        currentMaterialPanel.properties[type].forEach(key => {
+                            if (key in mesh.material) {
+                                const value = mesh.material[key];
+
+                                if (value && (
+                                    value.isVector2 ||
+                                    value.isVector3 ||
+                                    value.isVector4 ||
+                                    value.isMatrix3 ||
+                                    value.isMatrix4 ||
+                                    value.isColor
+                                )) {
+                                    if (!materialProperties[type][key]) {
+                                        materialProperties[type][key] = value.clone();
+                                    } else {
+                                        materialProperties[type][key].copy(value);
+                                    }
+                                } else if (Array.isArray(value)) {
+                                    materialProperties[type][key] = value.slice();
+                                } else {
+                                    materialProperties[type][key] = value;
+                                }
+                            }
+                        });
+                    });
+
+                    materialProperties.map = mesh.material.map;
+
+                    mesh.material = new Material();
+                    mesh.material.userData.onBeforeCompile = {};
+
+                    mesh.material.onBeforeCompile = shader => {
+                        for (const key in mesh.material.userData.onBeforeCompile) {
+                            mesh.material.userData.onBeforeCompile[key](shader, mesh);
+                        }
+                    };
+
+                    mesh.material.transparent = materialProperties.transparent;
+                    mesh.material.opacity = materialProperties.opacity;
+                    mesh.material.side = materialProperties.side;
+
+                    MaterialPanel.type.forEach(type => {
+                        if (!materialProperties[type]) {
+                            materialProperties[type] = {};
+                        }
+
+                        MaterialPanel.properties[type].forEach(key => {
+                            if (key in mesh.material && key in materialProperties[type]) {
+                                const value = materialProperties[type][key];
+
+                                if (value && (
+                                    value.isVector2 ||
+                                    value.isVector3 ||
+                                    value.isVector4 ||
+                                    value.isMatrix3 ||
+                                    value.isMatrix4 ||
+                                    value.isColor
+                                )) {
+                                    mesh.material[key].copy(value);
+                                } else {
+                                    mesh.material[key] = value;
+                                }
+                            }
+                        });
+
+                        if (type in MaterialPatches) {
+                            for (const key in MaterialPatches[type]) {
+                                mesh.material.userData.onBeforeCompile[key] = MaterialPatches[type][key];
+                            }
+                        }
+                    });
+
+                    if (ui.uvTexture) {
+                        mesh.material.map = ui.uvTexture;
+                    } else {
+                        mesh.material.map = materialProperties.map;
+                    }
+
+                    mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+                    mesh.material.needsUpdate = true;
+
+                    if (ui.point && ui.isDefault) {
+                        ui.point.setData({
+                            name: mesh.geometry.type,
+                            type: mesh.material.type
+                        });
+                    }
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+
+                    this.lastMaterialPanel = MaterialPanel;
+                }
+            }
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Visible',
+                list: VisibleOptions,
+                value: getKeyByValue(VisibleOptions, mesh.visible),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const materialPanel = new Panel();
+                        materialPanel.animateIn(true);
+
+                        materialItems.forEach(data => {
+                            materialPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(materialPanel);
+                    }
+
+                    mesh.visible = VisibleOptions[value];
+
+                    if (mesh.visible) {
+                        panel.group.show();
+                    } else {
+                        panel.group.hide();
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            ui.addPanel(new PanelItem(data));
+        });
+    }
+
+    // Public methods
+
+    static destroy = () => {
+        for (const prop in this) {
+            this[prop] = null;
+        }
+
+        return null;
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/NormalMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/NormalMaterialCommonPanel.js
new file mode 100644
index 0000000..f87b41c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/NormalMaterialCommonPanel.js
@@ -0,0 +1,52 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { FlatShadingOptions, WireframeOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class NormalMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Flat',
+                list: FlatShadingOptions,
+                value: getKeyByValue(FlatShadingOptions, mesh.material.flatShading),
+                callback: value => {
+                    mesh.material.flatShading = FlatShadingOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Wire',
+                list: WireframeOptions,
+                value: getKeyByValue(WireframeOptions, mesh.material.wireframe),
+                callback: value => {
+                    mesh.material.wireframe = WireframeOptions[value];
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/NormalMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/NormalMaterialPanel.js
new file mode 100644
index 0000000..217b56c
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/NormalMaterialPanel.js
@@ -0,0 +1,95 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+
+import { NormalMaterialCommonPanel } from './NormalMaterialCommonPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+
+export const NormalMaterialOptions = {
+    Common: NormalMaterialCommonPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class NormalMaterialPanel extends Panel {
+    static type = [
+        'common'
+    ];
+
+    static properties = {
+        common: [
+            'flatShading',
+            'wireframe'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete NormalMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete NormalMaterialOptions.Physics;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Normal',
+                list: NormalMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = NormalMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialCommonPanel.js
new file mode 100644
index 0000000..66e903b
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialCommonPanel.js
@@ -0,0 +1,97 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { FlatShadingOptions, ToneMappedOptions, WireframeOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class PhongMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'color',
+                label: 'Emissive',
+                value: mesh.material.emissive,
+                callback: value => {
+                    mesh.material.emissive.copy(value);
+                }
+            },
+            {
+                type: 'color',
+                label: 'Specular',
+                value: mesh.material.specular,
+                callback: value => {
+                    mesh.material.specular.copy(value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Shiny',
+                min: 0,
+                max: 100,
+                step: 0.1,
+                value: mesh.material.shininess,
+                callback: value => {
+                    mesh.material.shininess = value;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Flat',
+                list: FlatShadingOptions,
+                value: getKeyByValue(FlatShadingOptions, mesh.material.flatShading),
+                callback: value => {
+                    mesh.material.flatShading = FlatShadingOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Wire',
+                list: WireframeOptions,
+                value: getKeyByValue(WireframeOptions, mesh.material.wireframe),
+                callback: value => {
+                    mesh.material.wireframe = WireframeOptions[value];
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialEnvPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialEnvPanel.js
new file mode 100644
index 0000000..b975655
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialEnvPanel.js
@@ -0,0 +1,66 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { CombineOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class PhongMaterialEnvPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Combine',
+                list: CombineOptions,
+                value: getKeyByValue(CombineOptions, mesh.material.combine),
+                callback: value => {
+                    mesh.material.combine = CombineOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Reflect',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.reflectivity,
+                callback: value => {
+                    mesh.material.reflectivity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Refract',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.refractionRatio,
+                callback: value => {
+                    mesh.material.refractionRatio = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialPanel.js
new file mode 100644
index 0000000..cab769a
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialPanel.js
@@ -0,0 +1,120 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+import { PhongMaterialPatches } from '../Patches.js';
+
+import { PhongMaterialCommonPanel } from './PhongMaterialCommonPanel.js';
+import { PhongMaterialSubsurfacePanel } from './PhongMaterialSubsurfacePanel.js';
+import { PhongMaterialEnvPanel } from './PhongMaterialEnvPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const PhongMaterialOptions = {
+    Common: PhongMaterialCommonPanel,
+    Map: MapPanel,
+    Subsurface: PhongMaterialSubsurfacePanel,
+    Env: PhongMaterialEnvPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class PhongMaterialPanel extends Panel {
+    static type = [
+        'common',
+        'phong'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'emissive',
+            'flatShading',
+            'wireframe',
+            'toneMapped',
+            'combine',
+            'reflectivity',
+            'refractionRatio'
+        ],
+        phong: [
+            'specular',
+            'shininess'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete PhongMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete PhongMaterialOptions.Physics;
+        }
+
+        if (mesh.userData.subsurface) {
+            mesh.material.userData.onBeforeCompile.subsurface = PhongMaterialPatches.subsurface;
+
+            mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+            mesh.material.needsUpdate = true;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Phong',
+                list: PhongMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = PhongMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialSubsurfacePanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialSubsurfacePanel.js
new file mode 100644
index 0000000..f786a94
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhongMaterialSubsurfacePanel.js
@@ -0,0 +1,146 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { PhongMaterialPatches } from '../Patches.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class PhongMaterialSubsurfacePanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        // Defaults
+        if (!mesh.userData.subsurface) {
+            mesh.userData.subsurface = false;
+
+            mesh.userData.subsurfaceUniforms = {
+                thicknessDistortion: { value: 0.1 },
+                thicknessAmbient: { value: 0 },
+                thicknessAttenuation: { value: 0.1 },
+                thicknessPower: { value: 2 },
+                thicknessScale: { value: 10 }
+            };
+        }
+
+        const subsurfaceOptions = {
+            Off: false,
+            On: true
+        };
+
+        const subsurfaceItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Distort',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.userData.subsurfaceUniforms.thicknessDistortion.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessDistortion.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Ambient',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: mesh.userData.subsurfaceUniforms.thicknessAmbient.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessAmbient.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Atten',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: mesh.userData.subsurfaceUniforms.thicknessAttenuation.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessAttenuation.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Power',
+                min: 1,
+                max: 32,
+                step: 0.1,
+                value: mesh.userData.subsurfaceUniforms.thicknessPower.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessPower.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Scale',
+                min: 0,
+                max: 64,
+                step: 0.1,
+                value: mesh.userData.subsurfaceUniforms.thicknessScale.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessScale.value = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Subsurface Scattering',
+                list: subsurfaceOptions,
+                value: getKeyByValue(subsurfaceOptions, mesh.userData.subsurface),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const subsurfacePanel = new Panel();
+                        subsurfacePanel.animateIn(true);
+
+                        subsurfaceItems.forEach(data => {
+                            subsurfacePanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(subsurfacePanel);
+                    }
+
+                    mesh.userData.subsurface = subsurfaceOptions[value];
+
+                    if (mesh.userData.subsurface) {
+                        mesh.material.userData.onBeforeCompile.subsurface = PhongMaterialPatches.subsurface;
+
+                        panel.group.show();
+                    } else {
+                        delete mesh.material.userData.onBeforeCompile.subsurface;
+
+                        panel.group.hide();
+                    }
+
+                    mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+                    mesh.material.needsUpdate = true;
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialAnisotropyPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialAnisotropyPanel.js
new file mode 100644
index 0000000..cea14f8
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialAnisotropyPanel.js
@@ -0,0 +1,53 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class PhysicalMaterialAnisotropyPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.anisotropy,
+                callback: value => {
+                    mesh.material.anisotropy = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Angle',
+                min: 0,
+                max: Math.PI / 2,
+                step: 0.01,
+                value: mesh.material.anisotropyRotation,
+                callback: value => {
+                    mesh.material.anisotropyRotation = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialClearcoatPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialClearcoatPanel.js
new file mode 100644
index 0000000..c04b6cb
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialClearcoatPanel.js
@@ -0,0 +1,53 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class PhysicalMaterialClearcoatPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.clearcoat,
+                callback: value => {
+                    mesh.material.clearcoat = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rough',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.clearcoatRoughness,
+                callback: value => {
+                    mesh.material.clearcoatRoughness = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialCommonPanel.js
new file mode 100644
index 0000000..ab097a9
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialCommonPanel.js
@@ -0,0 +1,119 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { FlatShadingOptions, ToneMappedOptions, WireframeOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class PhysicalMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'color',
+                label: 'Emissive',
+                value: mesh.material.emissive,
+                callback: value => {
+                    mesh.material.emissive.copy(value);
+                }
+            },
+            {
+                type: 'color',
+                label: 'Specular Color',
+                value: mesh.material.specularColor,
+                callback: value => {
+                    mesh.material.specularColor.copy(value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Specular',
+                min: 0,
+                max: 32,
+                step: 0.1,
+                value: mesh.material.specularIntensity,
+                callback: value => {
+                    mesh.material.specularIntensity = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rough',
+                min: 0,
+                max: 2,
+                step: 0.01,
+                value: mesh.material.roughness,
+                callback: value => {
+                    mesh.material.roughness = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Metal',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.metalness,
+                callback: value => {
+                    mesh.material.metalness = value;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Flat',
+                list: FlatShadingOptions,
+                value: getKeyByValue(FlatShadingOptions, mesh.material.flatShading),
+                callback: value => {
+                    mesh.material.flatShading = FlatShadingOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Wire',
+                list: WireframeOptions,
+                value: getKeyByValue(WireframeOptions, mesh.material.wireframe),
+                callback: value => {
+                    mesh.material.wireframe = WireframeOptions[value];
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialEnvPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialEnvPanel.js
new file mode 100644
index 0000000..c241aec
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialEnvPanel.js
@@ -0,0 +1,64 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class PhysicalMaterialEnvPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'IOR',
+                min: 1,
+                max: 2.333,
+                step: 0.01,
+                value: mesh.material.ior,
+                callback: value => {
+                    mesh.material.ior = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Reflect',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.reflectivity,
+                callback: value => {
+                    mesh.material.reflectivity = value;
+                }
+            },
+            // TODO: Texture thumbnails
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: mesh.material.envMapIntensity,
+                callback: value => {
+                    mesh.material.envMapIntensity = value;
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialIridescencePanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialIridescencePanel.js
new file mode 100644
index 0000000..bf3ba36
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialIridescencePanel.js
@@ -0,0 +1,75 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class PhysicalMaterialIridescencePanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.iridescence,
+                callback: value => {
+                    mesh.material.iridescence = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'IOR',
+                min: 1,
+                max: 2.333,
+                step: 0.01,
+                value: mesh.material.iridescenceIOR,
+                callback: value => {
+                    mesh.material.iridescenceIOR = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Thick Min',
+                min: 0,
+                max: 1400,
+                step: 100,
+                value: mesh.material.iridescenceThicknessRange[0],
+                callback: value => {
+                    mesh.material.iridescenceThicknessRange[0] = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Thick Max',
+                min: 0,
+                max: 1400,
+                step: 100,
+                value: mesh.material.iridescenceThicknessRange[1],
+                callback: value => {
+                    mesh.material.iridescenceThicknessRange[1] = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialPanel.js
new file mode 100644
index 0000000..68a492d
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialPanel.js
@@ -0,0 +1,149 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+import { StandardMaterialPatches } from '../Patches.js';
+
+import { PhysicalMaterialCommonPanel } from './PhysicalMaterialCommonPanel.js';
+import { PhysicalMaterialClearcoatPanel } from './PhysicalMaterialClearcoatPanel.js';
+import { PhysicalMaterialIridescencePanel } from './PhysicalMaterialIridescencePanel.js';
+import { PhysicalMaterialAnisotropyPanel } from './PhysicalMaterialAnisotropyPanel.js';
+import { PhysicalMaterialSheenPanel } from './PhysicalMaterialSheenPanel.js';
+import { PhysicalMaterialSubsurfacePanel } from './PhysicalMaterialSubsurfacePanel.js';
+import { PhysicalMaterialTransmissionPanel } from './PhysicalMaterialTransmissionPanel.js';
+import { PhysicalMaterialEnvPanel } from './PhysicalMaterialEnvPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const PhysicalMaterialOptions = {
+    Common: PhysicalMaterialCommonPanel,
+    Map: MapPanel,
+    Clearcoat: PhysicalMaterialClearcoatPanel,
+    Iridescence: PhysicalMaterialIridescencePanel,
+    Anisotropy: PhysicalMaterialAnisotropyPanel,
+    Sheen: PhysicalMaterialSheenPanel,
+    Subsurface: PhysicalMaterialSubsurfacePanel,
+    Transmission: PhysicalMaterialTransmissionPanel,
+    Env: PhysicalMaterialEnvPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class PhysicalMaterialPanel extends Panel {
+    static type = [
+        'common',
+        'standard',
+        'physical'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'emissive',
+            'flatShading',
+            'wireframe',
+            'toneMapped'
+        ],
+        standard: [
+            'roughness',
+            'metalness',
+            'envMapIntensity'
+        ],
+        physical: [
+            'specularColor',
+            'specularIntensity',
+            'ior',
+            'reflectivity',
+            'transmission',
+            'thickness',
+            'attenuationColor',
+            'attenuationDistance',
+            'clearcoat',
+            'clearcoatRoughness',
+            'iridescence',
+            'iridescenceIOR',
+            'iridescenceThicknessRange',
+            'anisotropy',
+            'anisotropyRotation',
+            'sheen',
+            'sheenRoughness',
+            'sheenColor'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete PhysicalMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete PhysicalMaterialOptions.Physics;
+        }
+
+        if (mesh.userData.subsurface) {
+            mesh.material.userData.onBeforeCompile.subsurface = StandardMaterialPatches.subsurface;
+
+            mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+            mesh.material.needsUpdate = true;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Physical',
+                list: PhysicalMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = PhysicalMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialSheenPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialSheenPanel.js
new file mode 100644
index 0000000..dcd3f42
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialSheenPanel.js
@@ -0,0 +1,61 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class PhysicalMaterialSheenPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.sheen,
+                callback: value => {
+                    mesh.material.sheen = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rough',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.sheenRoughness,
+                callback: value => {
+                    mesh.material.sheenRoughness = value;
+                }
+            },
+            {
+                type: 'color',
+                label: 'Sheen Color',
+                value: mesh.material.sheenColor,
+                callback: value => {
+                    mesh.material.sheenColor.copy(value);
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialSubsurfacePanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialSubsurfacePanel.js
new file mode 100644
index 0000000..11453f3
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialSubsurfacePanel.js
@@ -0,0 +1,146 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { StandardMaterialPatches } from '../Patches.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class PhysicalMaterialSubsurfacePanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        // Defaults
+        if (!mesh.userData.subsurface) {
+            mesh.userData.subsurface = false;
+
+            mesh.userData.subsurfaceUniforms = {
+                thicknessDistortion: { value: 0.1 },
+                thicknessAmbient: { value: 0 },
+                thicknessAttenuation: { value: 0.1 },
+                thicknessPower: { value: 2 },
+                thicknessScale: { value: 10 }
+            };
+        }
+
+        const subsurfaceOptions = {
+            Off: false,
+            On: true
+        };
+
+        const subsurfaceItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Distort',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.userData.subsurfaceUniforms.thicknessDistortion.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessDistortion.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Ambient',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: mesh.userData.subsurfaceUniforms.thicknessAmbient.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessAmbient.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Atten',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: mesh.userData.subsurfaceUniforms.thicknessAttenuation.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessAttenuation.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Power',
+                min: 1,
+                max: 32,
+                step: 0.1,
+                value: mesh.userData.subsurfaceUniforms.thicknessPower.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessPower.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Scale',
+                min: 0,
+                max: 64,
+                step: 0.1,
+                value: mesh.userData.subsurfaceUniforms.thicknessScale.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessScale.value = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Subsurface Scattering',
+                list: subsurfaceOptions,
+                value: getKeyByValue(subsurfaceOptions, mesh.userData.subsurface),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const subsurfacePanel = new Panel();
+                        subsurfacePanel.animateIn(true);
+
+                        subsurfaceItems.forEach(data => {
+                            subsurfacePanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(subsurfacePanel);
+                    }
+
+                    mesh.userData.subsurface = subsurfaceOptions[value];
+
+                    if (mesh.userData.subsurface) {
+                        mesh.material.userData.onBeforeCompile.subsurface = StandardMaterialPatches.subsurface;
+
+                        panel.group.show();
+                    } else {
+                        delete mesh.material.userData.onBeforeCompile.subsurface;
+
+                        panel.group.hide();
+                    }
+
+                    mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+                    mesh.material.needsUpdate = true;
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialTransmissionPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialTransmissionPanel.js
new file mode 100644
index 0000000..da118f5
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/PhysicalMaterialTransmissionPanel.js
@@ -0,0 +1,94 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class PhysicalMaterialTransmissionPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.transmission,
+                callback: value => {
+                    mesh.material.transmission = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Thick',
+                min: -10,
+                max: 10,
+                step: 0.1,
+                value: mesh.material.thickness,
+                callback: value => {
+                    mesh.material.thickness = value;
+                }
+            },
+            {
+                type: 'color',
+                label: 'Attenuation Color',
+                value: mesh.material.attenuationColor,
+                callback: value => {
+                    mesh.material.attenuationColor.copy(value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Distance',
+                min: -10,
+                max: 10,
+                step: 0.1,
+                value: mesh.material.attenuationDistance,
+                callback: value => {
+                    mesh.material.attenuationDistance = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'IOR',
+                min: 1,
+                max: 2.333,
+                step: 0.01,
+                value: mesh.material.ior,
+                callback: value => {
+                    mesh.material.ior = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Reflect',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.reflectivity,
+                callback: value => {
+                    mesh.material.reflectivity = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialCommonPanel.js
new file mode 100644
index 0000000..1eaac90
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialCommonPanel.js
@@ -0,0 +1,100 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { FlatShadingOptions, ToneMappedOptions, WireframeOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class StandardMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'color',
+                label: 'Emissive',
+                value: mesh.material.emissive,
+                callback: value => {
+                    mesh.material.emissive.copy(value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rough',
+                min: 0,
+                max: 2,
+                step: 0.01,
+                value: mesh.material.roughness,
+                callback: value => {
+                    mesh.material.roughness = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Metal',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.material.metalness,
+                callback: value => {
+                    mesh.material.metalness = value;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Flat',
+                list: FlatShadingOptions,
+                value: getKeyByValue(FlatShadingOptions, mesh.material.flatShading),
+                callback: value => {
+                    mesh.material.flatShading = FlatShadingOptions[value];
+                    mesh.material.needsUpdate = true;
+                }
+            },
+            {
+                type: 'list',
+                label: 'Wire',
+                list: WireframeOptions,
+                value: getKeyByValue(WireframeOptions, mesh.material.wireframe),
+                callback: value => {
+                    mesh.material.wireframe = WireframeOptions[value];
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialEnvPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialEnvPanel.js
new file mode 100644
index 0000000..90815e4
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialEnvPanel.js
@@ -0,0 +1,42 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class StandardMaterialEnvPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            // TODO: Texture thumbnails
+            {
+                type: 'slider',
+                label: 'Int',
+                min: 0,
+                max: 10,
+                step: 0.1,
+                value: mesh.material.envMapIntensity,
+                callback: value => {
+                    mesh.material.envMapIntensity = value;
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialPanel.js
new file mode 100644
index 0000000..6805385
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialPanel.js
@@ -0,0 +1,118 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+import { StandardMaterialPatches } from '../Patches.js';
+
+import { StandardMaterialCommonPanel } from './StandardMaterialCommonPanel.js';
+import { StandardMaterialSubsurfacePanel } from './StandardMaterialSubsurfacePanel.js';
+import { StandardMaterialEnvPanel } from './StandardMaterialEnvPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const StandardMaterialOptions = {
+    Common: StandardMaterialCommonPanel,
+    Map: MapPanel,
+    Subsurface: StandardMaterialSubsurfacePanel,
+    Env: StandardMaterialEnvPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class StandardMaterialPanel extends Panel {
+    static type = [
+        'common',
+        'standard'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'emissive',
+            'flatShading',
+            'wireframe',
+            'toneMapped'
+        ],
+        standard: [
+            'roughness',
+            'metalness',
+            'envMapIntensity'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete StandardMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete StandardMaterialOptions.Physics;
+        }
+
+        if (mesh.userData.subsurface) {
+            mesh.material.userData.onBeforeCompile.subsurface = StandardMaterialPatches.subsurface;
+
+            mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+            mesh.material.needsUpdate = true;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Standard',
+                list: StandardMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = StandardMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialSubsurfacePanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialSubsurfacePanel.js
new file mode 100644
index 0000000..6dfaed3
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/StandardMaterialSubsurfacePanel.js
@@ -0,0 +1,146 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { StandardMaterialPatches } from '../Patches.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class StandardMaterialSubsurfacePanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        // Defaults
+        if (!mesh.userData.subsurface) {
+            mesh.userData.subsurface = false;
+
+            mesh.userData.subsurfaceUniforms = {
+                thicknessDistortion: { value: 0.1 },
+                thicknessAmbient: { value: 0 },
+                thicknessAttenuation: { value: 0.1 },
+                thicknessPower: { value: 2 },
+                thicknessScale: { value: 10 }
+            };
+        }
+
+        const subsurfaceOptions = {
+            Off: false,
+            On: true
+        };
+
+        const subsurfaceItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Distort',
+                min: 0,
+                max: 1,
+                step: 0.01,
+                value: mesh.userData.subsurfaceUniforms.thicknessDistortion.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessDistortion.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Ambient',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: mesh.userData.subsurfaceUniforms.thicknessAmbient.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessAmbient.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Atten',
+                min: 0,
+                max: 5,
+                step: 0.05,
+                value: mesh.userData.subsurfaceUniforms.thicknessAttenuation.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessAttenuation.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Power',
+                min: 1,
+                max: 32,
+                step: 0.1,
+                value: mesh.userData.subsurfaceUniforms.thicknessPower.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessPower.value = value;
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Scale',
+                min: 0,
+                max: 64,
+                step: 0.1,
+                value: mesh.userData.subsurfaceUniforms.thicknessScale.value,
+                callback: value => {
+                    mesh.userData.subsurfaceUniforms.thicknessScale.value = value;
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Subsurface Scattering',
+                list: subsurfaceOptions,
+                value: getKeyByValue(subsurfaceOptions, mesh.userData.subsurface),
+                callback: (value, panel) => {
+                    if (!panel.group) {
+                        const subsurfacePanel = new Panel();
+                        subsurfacePanel.animateIn(true);
+
+                        subsurfaceItems.forEach(data => {
+                            subsurfacePanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(subsurfacePanel);
+                    }
+
+                    mesh.userData.subsurface = subsurfaceOptions[value];
+
+                    if (mesh.userData.subsurface) {
+                        mesh.material.userData.onBeforeCompile.subsurface = StandardMaterialPatches.subsurface;
+
+                        panel.group.show();
+                    } else {
+                        delete mesh.material.userData.onBeforeCompile.subsurface;
+
+                        panel.group.hide();
+                    }
+
+                    mesh.material.customProgramCacheKey = () => Object.keys(mesh.material.userData.onBeforeCompile).join('|');
+                    mesh.material.needsUpdate = true;
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/ToonMaterialCommonPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/ToonMaterialCommonPanel.js
new file mode 100644
index 0000000..9c8be93
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/ToonMaterialCommonPanel.js
@@ -0,0 +1,51 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { ToneMappedOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class ToonMaterialCommonPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'color',
+                label: 'Color',
+                value: mesh.material.color,
+                callback: value => {
+                    mesh.material.color.copy(value);
+                }
+            },
+            {
+                type: 'list',
+                label: 'Tone',
+                list: ToneMappedOptions,
+                value: getKeyByValue(ToneMappedOptions, mesh.material.toneMapped),
+                callback: value => {
+                    mesh.material.toneMapped = ToneMappedOptions[value];
+                }
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/materials/ToonMaterialPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/materials/ToonMaterialPanel.js
new file mode 100644
index 0000000..392cd00
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/materials/ToonMaterialPanel.js
@@ -0,0 +1,97 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { MaterialPanels } from '../Custom.js';
+
+import { ToonMaterialCommonPanel } from './ToonMaterialCommonPanel.js';
+import { MeshHelperPanel } from '../objects/MeshHelperPanel.js';
+import { OimoPhysicsPanel } from '../physics/OimoPhysicsPanel.js';
+import { MapPanel } from '../textures/MapPanel.js';
+
+export const ToonMaterialOptions = {
+    Common: ToonMaterialCommonPanel,
+    Map: MapPanel,
+    Helper: MeshHelperPanel,
+    Physics: OimoPhysicsPanel
+};
+
+export class ToonMaterialPanel extends Panel {
+    static type = [
+        'common'
+    ];
+
+    static properties = {
+        common: [
+            'color',
+            'toneMapped'
+        ]
+    };
+
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        if (!Point3D.points) {
+            delete ToonMaterialOptions.Helper;
+        }
+
+        if (!Point3D.physics) {
+            delete ToonMaterialOptions.Physics;
+        }
+
+        const materialItems = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Toon',
+                list: ToonMaterialOptions,
+                value: 'Common',
+                callback: (value, panel) => {
+                    const MaterialPanel = ToonMaterialOptions[value];
+
+                    const materialPanel = new MaterialPanel(mesh);
+                    materialPanel.animateIn(true);
+
+                    panel.setContent(materialPanel);
+                }
+            }
+        ];
+
+        const items = [];
+
+        if (mesh.isInstancedMesh) {
+            items.push(
+                {
+                    type: 'content',
+                    callback: (value, panel) => {
+                        const { InstancedMeshPanel } = MaterialPanels;
+
+                        const materialPanel = new InstancedMeshPanel(mesh, materialItems);
+                        materialPanel.animateIn(true);
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            );
+        } else {
+            items.push(...materialItems);
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/objects/InstancedMeshPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/objects/InstancedMeshPanel.js
new file mode 100644
index 0000000..3678a75
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/objects/InstancedMeshPanel.js
@@ -0,0 +1,85 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Color } from 'three';
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { InstanceOptions } from '../Options.js';
+
+export class InstancedMeshPanel extends Panel {
+    constructor(mesh, materialItems) {
+        super();
+
+        this.mesh = mesh;
+        this.materialItems = materialItems;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+        const point = Point3D.getPoint(mesh);
+        const materialItems = this.materialItems;
+
+        const color = new Color();
+
+        const items = [
+            {
+                type: 'list',
+                label: 'Instance',
+                list: InstanceOptions,
+                value: 'Mesh',
+                callback: (value, panel) => {
+                    if (InstanceOptions[value]) {
+                        mesh.getColorAt(point.instances[0].index, color);
+
+                        const instanceItems = [
+                            {
+                                type: 'divider'
+                            },
+                            {
+                                type: 'color',
+                                label: 'Color',
+                                value: color,
+                                callback: value => {
+                                    color.copy(value);
+
+                                    point.instances.forEach(instance => {
+                                        mesh.setColorAt(instance.index, color);
+                                    });
+
+                                    mesh.instanceColor.needsUpdate = true;
+                                }
+                            }
+                        ];
+
+                        const instancePanel = new Panel();
+                        instancePanel.animateIn(true);
+
+                        instanceItems.forEach(data => {
+                            instancePanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(instancePanel);
+                    } else {
+                        const materialPanel = new Panel();
+                        materialPanel.animateIn(true);
+
+                        materialItems.forEach(data => {
+                            materialPanel.add(new PanelItem(data));
+                        });
+
+                        panel.setContent(materialPanel);
+                    }
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/objects/MeshHelperPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/objects/MeshHelperPanel.js
new file mode 100644
index 0000000..93c1f07
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/objects/MeshHelperPanel.js
@@ -0,0 +1,89 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { NormalsHelperOptions, TangentsHelperOptions, UVHelperOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class MeshHelperPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+        const point = Point3D.getPoint(mesh);
+
+        // Defaults
+        if (!mesh.userData.normals) {
+            mesh.userData.normals = false;
+        }
+
+        if (!mesh.userData.tangents) {
+            mesh.userData.tangents = false;
+        }
+
+        if (!mesh.userData.uv) {
+            mesh.userData.uv = false;
+        }
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'list',
+                label: 'Normals',
+                list: NormalsHelperOptions,
+                value: getKeyByValue(NormalsHelperOptions, mesh.userData.normals),
+                callback: value => {
+                    mesh.userData.normals = NormalsHelperOptions[value];
+                    point.toggleNormalsHelper(mesh.userData.normals);
+                }
+            }
+        ];
+
+        if (mesh.geometry.index) {
+            items.push(
+                {
+                    type: 'list',
+                    label: 'Tangents',
+                    list: TangentsHelperOptions,
+                    value: getKeyByValue(TangentsHelperOptions, mesh.userData.tangents),
+                    callback: value => {
+                        mesh.userData.tangents = TangentsHelperOptions[value];
+                        point.toggleTangentsHelper(mesh.userData.tangents);
+                    }
+                }
+            );
+        }
+
+        if (Point3D.uvHelper) {
+            items.push(
+                {
+                    type: 'list',
+                    label: 'UV',
+                    list: UVHelperOptions,
+                    value: getKeyByValue(UVHelperOptions, mesh.userData.uv),
+                    callback: value => {
+                        mesh.userData.uv = UVHelperOptions[value];
+                        point.toggleUVHelper(mesh.userData.uv);
+                    }
+                }
+                // TODO: Texture thumbnails
+            );
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/physics/OimoPhysicsPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/physics/OimoPhysicsPanel.js
new file mode 100644
index 0000000..185549d
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/physics/OimoPhysicsPanel.js
@@ -0,0 +1,86 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Point3D } from '../../ui/Point3D.js';
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+
+export class OimoPhysicsPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        let object = this.mesh;
+
+        if (object.parent && object.parent.isGroup) {
+            object = object.parent;
+        }
+
+        const { physics } = Point3D;
+
+        const angularVelocity = physics.getAngularVelocity(object);
+
+        const items = [
+            {
+                type: 'divider'
+            },
+            {
+                type: 'slider',
+                label: 'Gravity',
+                min: -1,
+                max: 1,
+                step: 0.01,
+                value: physics.getGravityScale(object),
+                callback: value => {
+                    physics.setGravityScale(object, value);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rotate X',
+                min: 0,
+                max: 16,
+                step: 1,
+                value: angularVelocity.x,
+                callback: value => {
+                    angularVelocity.setX(value);
+                    physics.setAngularVelocity(object, angularVelocity);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rotate Y',
+                min: 0,
+                max: 16,
+                step: 1,
+                value: angularVelocity.y,
+                callback: value => {
+                    angularVelocity.setY(value);
+                    physics.setAngularVelocity(object, angularVelocity);
+                }
+            },
+            {
+                type: 'slider',
+                label: 'Rotate Z',
+                min: 0,
+                max: 16,
+                step: 1,
+                value: angularVelocity.z,
+                callback: value => {
+                    angularVelocity.setZ(value);
+                    physics.setAngularVelocity(object, angularVelocity);
+                }
+            }
+        ];
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/panels/textures/MapPanel.js b/node_modules/@alienkitty/space.js/src/three/panels/textures/MapPanel.js
new file mode 100644
index 0000000..cc33db0
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/panels/textures/MapPanel.js
@@ -0,0 +1,108 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Panel } from '../../../panels/Panel.js';
+import { PanelItem } from '../../../panels/PanelItem.js';
+import { WrapOptions } from '../Options.js';
+
+import { getKeyByValue } from '../../../utils/Utils.js';
+
+export class MapPanel extends Panel {
+    constructor(mesh) {
+        super();
+
+        this.mesh = mesh;
+
+        this.initPanel();
+    }
+
+    initPanel() {
+        const mesh = this.mesh;
+
+        const items = [
+            {
+                type: 'divider'
+            }
+            // TODO: Texture thumbnails
+        ];
+
+        if (mesh.material.map) {
+            const repeatItems = [
+                {
+                    type: 'slider',
+                    label: 'X',
+                    min: 1,
+                    max: 16,
+                    step: 1,
+                    value: mesh.material.map.repeat.x,
+                    callback: value => {
+                        mesh.material.map.repeat.setX(value);
+                    }
+                },
+                {
+                    type: 'slider',
+                    label: 'Y',
+                    min: 1,
+                    max: 16,
+                    step: 1,
+                    value: mesh.material.map.repeat.y,
+                    callback: value => {
+                        mesh.material.map.repeat.setY(value);
+                    }
+                }
+            ];
+
+            items.push(
+                {
+                    type: 'slider',
+                    label: 'Anisotropy',
+                    min: 1,
+                    max: 16,
+                    step: 1,
+                    value: mesh.material.map.anisotropy,
+                    callback: value => {
+                        mesh.material.map.anisotropy = value;
+                    }
+                },
+                {
+                    type: 'list',
+                    label: 'Wrap',
+                    list: WrapOptions,
+                    value: getKeyByValue(WrapOptions, mesh.material.map.wrapS),
+                    callback: (value, panel) => {
+                        if (!panel.group) {
+                            const repeatPanel = new Panel();
+                            repeatPanel.animateIn(true);
+
+                            repeatItems.forEach(data => {
+                                repeatPanel.add(new PanelItem(data));
+                            });
+
+                            panel.setContent(repeatPanel);
+                        }
+
+                        const wrapping = WrapOptions[value];
+
+                        mesh.material.map.wrapS = wrapping;
+                        mesh.material.map.wrapT = wrapping;
+
+                        if (mesh.material.map.image) {
+                            mesh.material.map.needsUpdate = true;
+                        }
+
+                        if (value === 'Repeat' || value === 'Mirror') {
+                            panel.group.show();
+                        } else {
+                            panel.group.hide();
+                        }
+                    }
+                }
+            );
+        }
+
+        items.forEach(data => {
+            this.add(new PanelItem(data));
+        });
+    }
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/ui/Point3D.js b/node_modules/@alienkitty/space.js/src/three/ui/Point3D.js
new file mode 100644
index 0000000..003adb4
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/ui/Point3D.js
@@ -0,0 +1,1078 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Group, Matrix4, Mesh, MeshBasicMaterial, Raycaster, SphereGeometry, TextureLoader, Vector2 } from 'three';
+
+import { VertexNormalsHelper } from 'three/addons/helpers/VertexNormalsHelper.js';
+import { VertexTangentsHelper } from 'three/addons/helpers/VertexTangentsHelper.js';
+
+import { EventEmitter } from '../../utils/EventEmitter.js';
+import { Interface } from '../../utils/Interface.js';
+import { Stage } from '../../utils/Stage.js';
+import { Line } from '../../ui/Line.js';
+import { Reticle } from '../../ui/Reticle.js';
+import { Tracker } from '../../ui/Tracker.js';
+import { Point } from '../../ui/Point.js';
+
+import { clearTween, delayedCall } from '../../tween/Tween.js';
+import { getScreenSpaceBox } from '../utils/Utils3D.js';
+
+export class Point3D extends Group {
+    static init(scene, camera, {
+        root = document.body,
+        container = document.body,
+        physics = null,
+        loader = new TextureLoader(),
+        uvTexturePath = 'assets/textures/uv.jpg',
+        uvHelper = false,
+        debug = false
+    } = {}) {
+        this.events = new EventEmitter();
+        this.scene = scene;
+        this.camera = camera;
+        this.physics = physics;
+        this.root = root instanceof Interface ? root : new Interface(root);
+        this.container = container instanceof Interface ? container : new Interface(container);
+        this.loader = loader;
+        this.uvTexturePath = uvTexturePath;
+        this.uvHelper = uvHelper;
+        this.debug = debug;
+
+        this.objects = [];
+        this.points = [];
+        this.multiple = [];
+        this.instanceId = null;
+        this.lastInstanceId = null;
+        this.raycaster = new Raycaster();
+        this.raycaster.layers.enable(31); // Last layer
+        this.mouse = new Vector2(-1, -1);
+        this.delta = new Vector2();
+        this.coords = new Vector2();
+        this.hover = null;
+        this.click = null;
+        this.lastTime = null;
+        this.lastMouse = new Vector2();
+        this.raycastInterval = 1 / 10; // 10 frames per second
+        this.lastRaycast = 0;
+        this.halfScreen = new Vector2();
+        this.openColor = null;
+        this.enabled = true;
+
+        this.initCanvas();
+        this.initLoaders();
+
+        this.addListeners();
+        this.onResize();
+    }
+
+    static initCanvas() {
+        this.canvas = new Interface(null, 'canvas');
+        this.canvas.css({
+            position: 'absolute',
+            left: 0,
+            top: 0,
+            pointerEvents: 'none'
+        });
+        this.context = this.canvas.element.getContext('2d');
+        this.container.add(this.canvas);
+    }
+
+    static initLoaders() {
+        if (this.uvHelper) {
+            this.uvTexture = this.loader.load(this.uvTexturePath);
+        }
+    }
+
+    static addListeners() {
+        Stage.events.on('color_picker', this.onColorPicker);
+        Stage.events.on('invert', this.onInvert);
+        window.addEventListener('resize', this.onResize);
+        window.addEventListener('pointerdown', this.onPointerDown);
+        window.addEventListener('pointermove', this.onPointerMove);
+        window.addEventListener('pointerup', this.onPointerUp);
+        window.addEventListener('keyup', this.onKeyUp);
+    }
+
+    static removeListeners() {
+        Stage.events.off('color_picker', this.onColorPicker);
+        Stage.events.off('invert', this.onInvert);
+        window.removeEventListener('resize', this.onResize);
+        window.removeEventListener('pointerdown', this.onPointerDown);
+        window.removeEventListener('pointermove', this.onPointerMove);
+        window.removeEventListener('pointerup', this.onPointerUp);
+        window.removeEventListener('keyup', this.onKeyUp);
+    }
+
+    // Event handlers
+
+    static onColorPicker = ({ open, target }) => {
+        if (open) {
+            this.openColor = target;
+        } else {
+            this.openColor = null;
+        }
+    };
+
+    static onInvert = () => {
+        this.invert();
+    };
+
+    static onResize = () => {
+        this.width = document.documentElement.clientWidth;
+        this.height = document.documentElement.clientHeight;
+        this.dpr = window.devicePixelRatio;
+
+        this.halfScreen.set(this.width / 2, this.height / 2);
+
+        this.canvas.element.width = Math.round(this.width * this.dpr);
+        this.canvas.element.height = Math.round(this.height * this.dpr);
+        this.canvas.element.style.width = this.width + 'px';
+        this.canvas.element.style.height = this.height + 'px';
+        this.context.scale(this.dpr, this.dpr);
+
+        this.points.forEach(point => point.resize());
+    };
+
+    static onPointerDown = e => {
+        if (!this.enabled) {
+            return;
+        }
+
+        this.lastTime = performance.now();
+        this.lastMouse.set(e.clientX, e.clientY);
+
+        this.onPointerMove(e);
+
+        if (this.hover) {
+            this.click = this.hover;
+        }
+    };
+
+    static onPointerMove = e => {
+        if (!this.enabled) {
+            return;
+        }
+
+        if (e) {
+            this.mouse.x = e.clientX;
+            this.mouse.y = e.clientY;
+            this.coords.x = (this.mouse.x / this.width) * 2 - 1;
+            this.coords.y = 1 - (this.mouse.y / this.height) * 2;
+        }
+
+        if (document.elementFromPoint(this.mouse.x, this.mouse.y) instanceof HTMLCanvasElement) {
+            this.raycaster.setFromCamera(this.coords, this.camera);
+
+            const intersection = this.raycaster.intersectObjects(this.objects);
+
+            if (intersection.length) {
+                this.instanceId = intersection[0].instanceId;
+
+                const point = this.points[this.objects.indexOf(intersection[0].object)];
+
+                if (!this.hover || this.instanceId !== this.lastInstanceId) {
+                    this.lastInstanceId = this.instanceId;
+                    this.hover = point;
+                    this.hover.onHover({ type: 'over' });
+                    this.root.css({ cursor: 'pointer' });
+                } else if (this.hover !== point) {
+                    this.hover.onHover({ type: 'out' });
+                    this.hover = point;
+                    this.hover.onHover({ type: 'over' });
+                    this.root.css({ cursor: 'pointer' });
+                }
+            } else if (this.hover) {
+                this.hover.onHover({ type: 'out' });
+                this.hover = null;
+                this.root.css({ cursor: '' });
+            }
+        } else if (this.hover) {
+            this.hover.onHover({ type: 'out' });
+            this.hover = null;
+            this.root.css({ cursor: '' });
+        }
+
+        this.delta.subVectors(this.mouse, this.lastMouse);
+    };
+
+    static onPointerUp = e => {
+        if (!this.enabled) {
+            return;
+        }
+
+        this.onPointerMove(e);
+
+        if (performance.now() - this.lastTime > 250 || this.delta.length() > 50) {
+            this.click = null;
+            return;
+        }
+
+        if (this.click && this.click === this.hover) {
+            if (!e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {
+                this.points.forEach(point => {
+                    if (point !== this.click && point.animatedIn) {
+                        point.animateOut(true);
+                        point.inactive();
+                    }
+                });
+            }
+
+            this.click.onClick(e.shiftKey);
+        } else if (this.openColor && !this.openColor.element.contains(e.target)) {
+            Stage.events.emit('color_picker', { open: false, target: this });
+        } else if (document.elementFromPoint(this.mouse.x, this.mouse.y) instanceof HTMLCanvasElement) {
+            this.animateOut();
+        }
+
+        this.click = null;
+    };
+
+    static onKeyUp = e => {
+        if (e.keyCode >= 48 && e.keyCode <= 57) { // 0-9
+            const select = this.points[e.keyCode - 49];
+
+            if (select) {
+                if (!e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {
+                    this.points.forEach(point => {
+                        if (point !== select && point.animatedIn) {
+                            point.animateOut(true);
+                            point.inactive();
+                        }
+                    });
+                }
+
+                select.onHover({ type: 'over' });
+                select.onClick(e.shiftKey);
+            } else {
+                this.animateOut();
+            }
+        } else if (e.keyCode === 27) { // Esc
+            this.animateOut();
+        }
+    };
+
+    // Public methods
+
+    static getPoint = mesh => {
+        return this.points.find(point => point.object === mesh);
+    };
+
+    static getSelected = () => {
+        return this.points.filter(point => point.selected);
+    };
+
+    static getMultipleName = () => {
+        return `${this.multiple.length}&nbsp;Objects`;
+    };
+
+    static getMultipleTypes = () => {
+        const types = this.multiple.map(point => point.type);
+        const counts = {};
+
+        types.forEach(type => {
+            counts[type] = counts[type] ? counts[type] + 1 : 1;
+        });
+
+        const unique = [...new Set(types)];
+
+        return unique.map(type => `${counts[type]}&nbsp;${type}`).join(', ');
+    };
+
+    static getMultipleTargetNumbers = () => {
+        return this.multiple.map(point => point.index + 1);
+    };
+
+    static setIndexes = () => {
+        this.points.forEach((point, i) => point.setIndex(i));
+    };
+
+    static invert = () => {
+        this.points.forEach(point => point.resize());
+    };
+
+    static update = time => {
+        this.context.clearRect(0, 0, this.canvas.element.width, this.canvas.element.height);
+
+        this.points.forEach(point => point.update());
+
+        if (!navigator.maxTouchPoints && time - this.lastRaycast > this.raycastInterval) {
+            this.onPointerMove();
+            this.lastRaycast = time;
+        }
+    };
+
+    static add = (...points) => {
+        points.forEach(point => {
+            this.objects.push(point.object);
+            this.points.push(point);
+        });
+
+        this.setIndexes();
+    };
+
+    static remove = (...points) => {
+        points.forEach(point => {
+            const index = this.points.indexOf(point);
+
+            if (~index) {
+                this.objects.splice(index, 1);
+                this.points.splice(index, 1);
+            }
+
+            if (point === this.hover) {
+                this.hover.onHover({ type: 'out' });
+                this.hover = null;
+                this.root.css({ cursor: '' });
+            }
+        });
+
+        this.setIndexes();
+    };
+
+    static animateOut = () => {
+        this.points.forEach(point => {
+            if (point.animatedIn) {
+                point.animateOut(true);
+                point.inactive();
+            }
+        });
+
+        if (this.hover) {
+            this.hover.onHover({ type: 'out' });
+            this.hover = null;
+            this.root.css({ cursor: '' });
+        }
+    };
+
+    static destroy = () => {
+        this.removeListeners();
+
+        if (this.uvTexture) {
+            this.uvTexture.dispose();
+        }
+
+        for (let i = this.points.length - 1; i >= 0; i--) {
+            if (this.points[i] && this.points[i].destroy) {
+                this.points[i].destroy();
+            }
+        }
+
+        for (const prop in this) {
+            this[prop] = null;
+        }
+
+        return null;
+    };
+
+    constructor(mesh, {
+        name = mesh.material.name || mesh.geometry.type,
+        type = mesh.material.type,
+        noTracker
+    } = {}) {
+        super();
+
+        this.object = mesh;
+        this.name = name;
+        this.type = type;
+        this.noTracker = noTracker;
+        this.isDefault = name === mesh.geometry.type && type === mesh.material.type;
+        this.isMultiple = false;
+        this.camera = Point3D.camera;
+        this.halfScreen = Point3D.halfScreen;
+
+        this.center = new Vector2();
+        this.size = new Vector2();
+        this.selected = false;
+        this.animatedIn = false;
+
+        this.instances = [];
+        this.matrix = new Matrix4();
+
+        this.initMesh();
+        this.initHTML();
+        this.initViews();
+
+        this.addListeners();
+
+        Point3D.add(this);
+    }
+
+    initMesh() {
+        this.object.geometry.computeBoundingSphere();
+
+        const { radius } = this.object.geometry.boundingSphere;
+
+        this.geometry = new SphereGeometry(radius);
+
+        if (Point3D.debug) {
+            this.material = new MeshBasicMaterial({
+                color: 0xff0000,
+                wireframe: true
+            });
+            this.camera.layers.enable(31); // Last layer
+        } else {
+            this.material = new MeshBasicMaterial({ visible: false });
+        }
+
+        this.mesh = this.createMesh();
+    }
+
+    initHTML() {
+        this.element = new Interface('.target');
+        this.element.css({
+            position: 'static',
+            fontFamily: 'var(--ui-font-family)',
+            fontWeight: 'var(--ui-font-weight)',
+            fontSize: 'var(--ui-font-size)',
+            lineHeight: 'var(--ui-line-height)',
+            letterSpacing: 'var(--ui-letter-spacing)'
+        });
+        Point3D.container.add(this.element);
+    }
+
+    initViews() {
+        const { context } = Point3D;
+
+        this.line = new Line(context);
+        this.element.add(this.line);
+
+        this.reticle = new Reticle();
+        this.element.add(this.reticle);
+
+        if (!this.noTracker) {
+            this.tracker = new Tracker();
+            this.element.add(this.tracker);
+        }
+
+        this.point = new Point(this, this.tracker);
+        this.point.setData({
+            name: this.name,
+            type: this.type
+        });
+        this.element.add(this.point);
+
+        this.panel = this.point.text.panel;
+    }
+
+    createMesh() {
+        const { center } = this.object.geometry.boundingSphere;
+
+        const mesh = new Mesh(this.geometry, this.material);
+        mesh.position.copy(this.object.position);
+        mesh.position.x += center.x;
+        mesh.position.y -= center.y; // Y flipped
+        mesh.position.z += center.z;
+        mesh.scale.copy(this.object.scale);
+        mesh.layers.set(31); // Last layer
+        this.add(mesh);
+
+        return mesh;
+    }
+
+    removeMesh(mesh) {
+        this.remove(mesh);
+        mesh.material.dispose();
+        mesh.geometry.dispose();
+
+        if (mesh.tracker) {
+            mesh.tracker.animateOut(() => {
+                mesh.tracker = mesh.tracker.destroy();
+            });
+        }
+    }
+
+    setInitialPosition() {
+        this.updateMatrixWorld();
+
+        this.reticle.position.copy(this.reticle.target);
+
+        if (this.tracker) {
+            this.tracker.position.copy(this.tracker.target);
+        }
+
+        this.point.position.copy(this.point.target);
+    }
+
+    addListeners() {
+        this.panel.events.on('update', this.onUpdate);
+    }
+
+    removeListeners() {
+        this.panel.events.off('update', this.onUpdate);
+    }
+
+    // Event handlers
+
+    onHover = ({ type, isPoint }) => {
+        clearTween(this.timeout);
+
+        if (this.tracker && this.selected) {
+            if (type === 'over') {
+                this.tracker.show();
+            } else {
+                this.tracker.hide();
+            }
+
+            if (isPoint && this.isMultiple) {
+                Point3D.multiple.forEach(point => {
+                    if (point !== this) {
+                        point.onHover({ type });
+                    }
+                });
+            }
+
+            return;
+        }
+
+        if (type === 'over') {
+            if (this.object.isInstancedMesh) {
+                const { instanceId } = Point3D;
+
+                const { position, quaternion, scale } = this.mesh;
+
+                this.object.getMatrixAt(instanceId, this.matrix);
+                this.matrix.decompose(position, quaternion, scale);
+            }
+
+            if (!this.animatedIn) {
+                this.setInitialPosition();
+                this.resize();
+                this.animateIn();
+            }
+        } else {
+            this.timeout = delayedCall(2000, () => {
+                this.animateOut();
+            });
+        }
+
+        Point3D.events.emit('hover', { type, target: this });
+    };
+
+    onClick = multiple => {
+        clearTween(this.timeout);
+
+        if (this.tracker) {
+            if (this.object.isInstancedMesh) {
+                const { instanceId } = Point3D;
+
+                if (!this.instances.some(instance => instance.index === instanceId)) {
+                    this.toggle(true, multiple);
+                } else {
+                    this.toggle(false, multiple);
+                }
+
+                this.selected = !!this.instances.length;
+            } else {
+                this.selected = !this.selected;
+
+                if (this.selected) {
+                    this.toggle(true, multiple);
+                } else {
+                    this.toggle(false, multiple);
+                }
+            }
+
+            const selected = Point3D.getSelected();
+
+            Point3D.events.emit('change', { selected, target: this });
+        }
+
+        Point3D.events.emit('click', { target: this });
+    };
+
+    onUpdate = ({ path, value, index, target }) => {
+        if (this.isMultiple) {
+            Point3D.multiple.forEach(point => {
+                if (point !== this) {
+                    path.forEach(([label, index]) => {
+                        point.setPanelIndex(label, index);
+                    });
+
+                    if (typeof index !== 'undefined') {
+                        point.setPanelIndex(target.label, index);
+                    } else if (typeof value !== 'undefined') {
+                        point.setPanelValue(target.label, value);
+                    }
+                }
+            });
+        }
+    };
+
+    // Public methods
+
+    setIndex = index => {
+        this.index = index;
+
+        if (this.tracker) {
+            const targetNumber = index + 1;
+
+            this.tracker.setData({ targetNumber });
+            this.point.setTargetNumbers([targetNumber]);
+        }
+    };
+
+    addPanel = item => {
+        this.panel.add(item);
+    };
+
+    setPanelValue = (label, value) => {
+        this.panel.setPanelValue(label, value);
+    };
+
+    setPanelIndex = (label, index) => {
+        this.panel.setPanelIndex(label, index);
+    };
+
+    toggleNormalsHelper = show => {
+        if (show) {
+            if (!this.normalsHelper) {
+                this.object.geometry.computeBoundingSphere();
+
+                const { radius } = this.object.geometry.boundingSphere;
+
+                this.normalsHelper = new VertexNormalsHelper(this.object, radius / 5);
+                Point3D.scene.add(this.normalsHelper);
+            }
+
+            this.normalsHelper.visible = true;
+        } else if (this.normalsHelper) {
+            this.normalsHelper.visible = false;
+        }
+    };
+
+    toggleTangentsHelper = show => {
+        if (show) {
+            if (!this.tangentsHelper) {
+                this.object.geometry.computeBoundingSphere();
+                this.object.geometry.computeTangents();
+
+                const { radius } = this.object.geometry.boundingSphere;
+
+                this.tangentsHelper = new VertexTangentsHelper(this.object, radius / 5);
+                Point3D.scene.add(this.tangentsHelper);
+            }
+
+            this.tangentsHelper.visible = true;
+        } else if (this.tangentsHelper) {
+            this.tangentsHelper.visible = false;
+        }
+    };
+
+    toggleUVHelper = show => {
+        const material = this.object.material;
+
+        if (show) {
+            if (Point3D.uvTexture && Point3D.uvTexture.image) {
+                if (!this.uvTexture) {
+                    this.uvTexture = Point3D.uvTexture.clone();
+                }
+
+                if (!this.currentMaterialMap && material.map !== this.uvTexture) {
+                    this.currentMaterialMap = material.map;
+
+                    material.map = this.uvTexture;
+                    material.needsUpdate = true;
+                }
+            }
+        } else {
+            material.map = this.currentMaterialMap;
+            material.needsUpdate = true;
+
+            if (this.uvTexture) {
+                this.uvTexture.dispose();
+            }
+
+            delete this.currentMaterialMap;
+            delete this.uvTexture;
+        }
+    };
+
+    resize = () => {
+        this.line.resize();
+    };
+
+    update = () => {
+        this.line.startPoint(this.reticle.position);
+        this.line.endPoint(this.point.originPosition);
+        this.line.update();
+        this.reticle.update();
+        this.point.update();
+    };
+
+    updateMatrixWorld = force => {
+        super.updateMatrixWorld(force);
+
+        this.camera.updateMatrixWorld();
+
+        const box = getScreenSpaceBox(this.mesh, this.camera);
+        const center = box.getCenter(this.center).multiply(this.halfScreen);
+        const size = box.getSize(this.size).multiply(this.halfScreen);
+        const centerX = this.halfScreen.x + center.x;
+        const centerY = this.halfScreen.y - center.y;
+        const width = Math.round(size.x);
+        const height = Math.round(size.y);
+        const halfWidth = Math.round(width / 2);
+        const halfHeight = Math.round(height / 2);
+
+        this.reticle.target.set(centerX, centerY);
+
+        if (this.tracker) {
+            this.tracker.target.set(centerX, centerY);
+            this.tracker.update();
+            this.tracker.css({
+                width,
+                height,
+                marginLeft: -halfWidth,
+                marginTop: -halfHeight
+            });
+        }
+
+        this.point.target.set(centerX + halfWidth, centerY - halfHeight);
+
+        if (this.object.isInstancedMesh) {
+            this.instances.forEach(instance => {
+                const { position, quaternion, scale } = instance;
+
+                this.object.getMatrixAt(instance.index, this.matrix);
+                this.matrix.decompose(position, quaternion, scale);
+
+                if (instance.tracker) {
+                    const box = getScreenSpaceBox(instance, this.camera);
+                    const center = box.getCenter(this.center).multiply(this.halfScreen);
+                    const size = box.getSize(this.size).multiply(this.halfScreen);
+                    const centerX = this.halfScreen.x + center.x;
+                    const centerY = this.halfScreen.y - center.y;
+                    const width = Math.round(size.x);
+                    const height = Math.round(size.y);
+                    const halfWidth = Math.round(width / 2);
+                    const halfHeight = Math.round(height / 2);
+
+                    instance.tracker.target.set(centerX, centerY);
+                    instance.tracker.update();
+                    instance.tracker.css({
+                        width,
+                        height,
+                        marginLeft: -halfWidth,
+                        marginTop: -halfHeight
+                    });
+                }
+            });
+        } else {
+            if (this.normalsHelper) {
+                this.normalsHelper.update();
+            }
+
+            if (this.tangentsHelper) {
+                this.tangentsHelper.update();
+            }
+        }
+    };
+
+    lock = () => {
+        this.point.lock();
+
+        if (this.tracker) {
+            this.tracker.lock();
+
+            if (this.isMultiple) {
+                Point3D.multiple.forEach(point => {
+                    if (point !== this) {
+                        point.lock();
+                    }
+                });
+            }
+        }
+    };
+
+    unlock = () => {
+        this.point.unlock();
+
+        if (this.tracker) {
+            this.tracker.unlock();
+
+            if (this.isMultiple) {
+                Point3D.multiple.forEach(point => {
+                    if (point !== this) {
+                        point.unlock();
+                    }
+                });
+            }
+        }
+    };
+
+    show = () => {
+        if (this.tracker) {
+            this.tracker.show();
+
+            if (this.isMultiple) {
+                Point3D.multiple.forEach(point => {
+                    if (point !== this) {
+                        point.show();
+                    }
+                });
+            }
+        }
+    };
+
+    hide = () => {
+        if (this.tracker) {
+            this.tracker.hide(true);
+
+            if (this.isMultiple) {
+                Point3D.multiple.forEach(point => {
+                    if (point !== this) {
+                        point.hide();
+                    }
+                });
+            }
+        }
+    };
+
+    animateIn = reverse => {
+        this.line.animateIn(reverse);
+        this.reticle.animateIn();
+        this.point.animateIn();
+
+        this.animatedIn = true;
+    };
+
+    animateOut = (fast, callback) => {
+        this.line.animateOut(fast, callback);
+        this.reticle.animateOut();
+
+        if (this.tracker) {
+            this.tracker.animateOut();
+        }
+
+        this.point.animateOut();
+
+        this.animatedIn = false;
+    };
+
+    toggle = (show, multiple) => {
+        if (this.object.isInstancedMesh) {
+            const { instanceId } = Point3D;
+
+            if (show) {
+                if (!this.instances.length) {
+                    this.togglePanel(true, multiple);
+                }
+
+                if (!multiple) {
+                    this.instances.forEach(instance => {
+                        this.removeMesh(instance);
+                    });
+
+                    this.instances.length = 0;
+                }
+
+                const mesh = this.createMesh();
+                mesh.index = instanceId;
+                this.instances.push(mesh);
+
+                mesh.tracker = new Tracker({ noTargetNumber: true });
+                this.element.add(mesh.tracker);
+
+                this.updateMatrixWorld();
+
+                mesh.tracker.position.copy(mesh.tracker.target);
+                mesh.tracker.animateIn();
+            } else {
+                if (!multiple) {
+                    this.instances.forEach(instance => {
+                        this.removeMesh(instance);
+                    });
+
+                    this.instances.length = 0;
+                } else {
+                    const index = this.instances.findIndex(instance => instance.index === instanceId);
+
+                    if (~index) {
+                        this.removeMesh(this.instances[index]);
+                        this.instances.splice(index, 1);
+                    }
+                }
+
+                if (!this.instances.length) {
+                    this.togglePanel(false, false);
+                }
+            }
+
+            if (this.instances.length > 1) {
+                this.point.setData({
+                    name: `${this.instances.length}&nbsp;Instances`
+                });
+            } else {
+                this.point.setData({
+                    name: this.name
+                });
+            }
+        } else {
+            this.togglePanel(show, multiple);
+        }
+
+        if (Point3D.multiple.length > 1) {
+            const panel = Point3D.multiple[0];
+
+            panel.point.setData({
+                name: Point3D.getMultipleName(),
+                type: Point3D.getMultipleTypes()
+            });
+
+            if (panel.tracker) {
+                panel.point.setTargetNumbers(Point3D.getMultipleTargetNumbers());
+            }
+
+            panel.isMultiple = true;
+        } else if (Point3D.multiple.length) {
+            const panel = Point3D.multiple[0];
+
+            Point3D.multiple.length = 0;
+
+            panel.point.setData({
+                name: panel.name,
+                type: panel.type
+            });
+
+            if (panel.tracker) {
+                panel.point.setTargetNumbers([panel.index + 1]);
+            }
+
+            panel.isMultiple = false;
+        }
+    };
+
+    togglePanel = (show, multiple) => {
+        if (show) {
+            this.line.animateOut(true);
+            this.reticle.animateOut();
+
+            if (this.tracker) {
+                this.tracker.animateIn();
+            }
+
+            const selected = Point3D.getSelected();
+
+            if (multiple && selected.length > 1) {
+                if (!Point3D.multiple.length) {
+                    const panel = selected.filter(point => point !== this)[0];
+
+                    Point3D.multiple.push(panel);
+                }
+
+                Point3D.multiple.push(this);
+
+                this.line.inactive();
+                this.point.inactive();
+            } else {
+                this.point.open();
+
+                Stage.events.emit('color_picker', { open: false, target: this.panel });
+            }
+        } else {
+            this.line.animateIn(true);
+            this.reticle.animateIn();
+
+            if (this.tracker) {
+                this.tracker.animateOut();
+            }
+
+            if (this.isMultiple) {
+                Point3D.multiple.length = 0;
+
+                this.point.setData({
+                    name: this.name,
+                    type: this.type
+                });
+
+                if (this.tracker) {
+                    this.point.setTargetNumbers([this.index + 1]);
+                }
+
+                this.isMultiple = false;
+            } else if (Point3D.multiple.length) {
+                const index = Point3D.multiple.indexOf(this);
+
+                if (~index) {
+                    Point3D.multiple.splice(index, 1);
+                }
+            }
+
+            this.point.enable();
+            this.point.close();
+        }
+    };
+
+    inactive = () => {
+        if (this.object.isInstancedMesh) {
+            this.instances.forEach(instance => {
+                this.removeMesh(instance);
+            });
+
+            this.instances.length = 0;
+
+            this.point.setData({
+                name: this.name
+            });
+        }
+
+        if (this.isMultiple) {
+            Point3D.multiple.length = 0;
+
+            this.point.setData({
+                name: this.name,
+                type: this.type
+            });
+
+            if (this.tracker) {
+                this.point.setTargetNumbers([this.index + 1]);
+            }
+
+            this.isMultiple = false;
+        }
+
+        this.selected = false;
+        this.line.inactive();
+        this.point.inactive();
+
+        const selected = Point3D.getSelected();
+
+        Point3D.events.emit('change', { selected, target: this });
+    };
+
+    destroy = () => {
+        this.removeListeners();
+
+        if (this.normalsHelper) {
+            this.toggleNormalsHelper(false);
+            Point3D.scene.remove(this.normalsHelper);
+            this.normalsHelper.dispose();
+        }
+
+        if (this.tangentsHelper) {
+            this.toggleTangentsHelper(false);
+            Point3D.scene.remove(this.tangentsHelper);
+            this.tangentsHelper.dispose();
+        }
+
+        if (this.currentMaterialMap) {
+            this.toggleUVHelper(false);
+        }
+
+        if (this.object.isInstancedMesh) {
+            this.instances.forEach(instance => {
+                this.removeMesh(instance);
+            });
+
+            this.instances.length = 0;
+        }
+
+        this.material.dispose();
+        this.geometry.dispose();
+
+        this.animateOut(false, () => {
+            this.element = this.element.destroy();
+        });
+    };
+}
diff --git a/node_modules/@alienkitty/space.js/src/three/utils/Utils3D.js b/node_modules/@alienkitty/space.js/src/three/utils/Utils3D.js
new file mode 100755
index 0000000..122a385
--- /dev/null
+++ b/node_modules/@alienkitty/space.js/src/three/utils/Utils3D.js
@@ -0,0 +1,79 @@
+/**
+ * @author pschroen / https://ufo.ai/
+ */
+
+import { Box2, BoxGeometry, BufferGeometry, Float32BufferAttribute, MathUtils, Vector3 } from 'three';
+
+export function getFullscreenTriangle() {
+    const geometry = new BufferGeometry();
+    geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
+    geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));
+
+    return geometry;
+}
+
+export function getSphericalCube(radius, segments) {
+    const geometry = new BoxGeometry(radius, radius, radius, segments, segments, segments);
+    const vertices = geometry.getAttribute('position');
+    const normals = geometry.getAttribute('normal');
+
+    for (let i = 0; i < vertices.count; i++) {
+        const v = new Vector3().fromArray(vertices.array, i * 3);
+        v.normalize();
+        normals.setXYZ(i, v.x, v.y, v.z);
+        v.setLength(radius);
+        vertices.setXYZ(i, v.x, v.y, v.z);
+    }
+
+    return geometry;
+}
+
+export function getScreenSpaceBox(mesh, camera) {
+    const vertices = mesh.geometry.getAttribute('position');
+    const worldPosition = new Vector3();
+    const screenSpacePosition = new Vector3();
+    const min = new Vector3(1, 1, 1);
+    const max = new Vector3(-1, -1, -1);
+
+    for (let i = 0; i < vertices.count; i++) {
+        worldPosition.fromArray(vertices.array, i * 3).applyMatrix4(mesh.matrixWorld);
+        screenSpacePosition.copy(worldPosition).project(camera);
+        min.min(screenSpacePosition);
+        max.max(screenSpacePosition);
+    }
+
+    return new Box2(min, max);
+}
+
+export function getFrustum(camera, offsetZ = 0) {
+    const distance = camera.position.z - offsetZ;
+    const fov = MathUtils.degToRad(camera.fov);
+    const height = 2 * Math.tan(fov / 2) * distance;
+    const width = height * camera.aspect;
+
+    return { width, height };
+}
+
+export function getFrustumFromHeight(camera, height, offsetZ = 0) {
+    const distance = camera.position.z - offsetZ;
+    const fov = MathUtils.radToDeg(2 * Math.atan(height / (2 * distance)));
+
+    return fov;
+}
+
+export function lerpCameras(camera1, camera2, alpha) {
+    if (camera1.fov !== camera2.fov || camera1.zoom !== camera2.zoom) {
+        if (camera1.fov !== camera2.fov) {
+            camera1.fov = MathUtils.lerp(camera1.fov, camera2.fov, alpha);
+        }
+
+        if (camera1.zoom !== camera2.zoom) {
+            camera1.zoom = MathUtils.lerp(camera1.zoom, camera2.zoom, alpha);
+        }
+
+        camera1.updateProjectionMatrix();
+    }
+
+    camera1.position.lerp(camera2.position, alpha);
+    camera1.quaternion.slerp(camera2.quaternion, alpha);
+}
diff --git a/node_modules/@alienkitty/space.js/src/ui/Header.js b/node_modules/@alienkitty/space.js/src/ui/Header.js
index e9ae498..d4eb5ec 100644
--- a/node_modules/@alienkitty/space.js/src/ui/Header.js
+++ b/node_modules/@alienkitty/space.js/src/ui/Header.js
@@ -31,9 +31,7 @@ export class Header extends Interface {
         this.add(this.info);
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     animateIn = () => {
         this.info.tween({ x: 0, opacity: 1 }, 1000, 'easeOutQuart', 200);
diff --git a/node_modules/@alienkitty/space.js/src/ui/HeaderInfo.js b/node_modules/@alienkitty/space.js/src/ui/HeaderInfo.js
index 5b4c566..095f27e 100644
--- a/node_modules/@alienkitty/space.js/src/ui/HeaderInfo.js
+++ b/node_modules/@alienkitty/space.js/src/ui/HeaderInfo.js
@@ -56,7 +56,7 @@ export class HeaderInfo extends Interface {
         this.panel.css({
             position: 'absolute',
             top: 0,
-            right: 0
+            right: 10
         });
         this.add(this.panel);
     }
@@ -66,7 +66,6 @@ export class HeaderInfo extends Interface {
         this.element.addEventListener('mouseenter', this.onHover);
         this.element.addEventListener('mouseleave', this.onHover);
         window.addEventListener('pointerdown', this.onPointerDown);
-        window.addEventListener('pointerup', this.onPointerUp);
     }
 
     removeListeners() {
@@ -74,23 +73,22 @@ export class HeaderInfo extends Interface {
         this.element.removeEventListener('mouseenter', this.onHover);
         this.element.removeEventListener('mouseleave', this.onHover);
         window.removeEventListener('pointerdown', this.onPointerDown);
-        window.removeEventListener('pointerup', this.onPointerUp);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onColorPicker = ({ open, target }) => {
-        if (!this.element.contains(target.element)) {
+        if (!this.openColor && !this.element.contains(target.element)) {
             return;
         }
 
         if (open) {
-            this.number.tween({ opacity: 0.35 }, 400, 'easeInOutSine');
+            this.disable();
+
             this.openColor = target;
         } else {
-            this.number.tween({ opacity: 1 }, 400, 'easeInOutSine');
+            this.enable();
+
             this.openColor = null;
         }
     };
@@ -112,9 +110,13 @@ export class HeaderInfo extends Interface {
             return;
         }
 
+        this.lastTime = performance.now();
+        this.lastMouse.set(e.clientX, e.clientY);
+
         this.onPointerMove(e);
 
         window.addEventListener('pointermove', this.onPointerMove);
+        window.addEventListener('pointerup', this.onPointerUp);
     };
 
     onPointerMove = ({ clientX, clientY }) => {
@@ -124,24 +126,20 @@ export class HeaderInfo extends Interface {
         };
 
         this.mouse.copy(event);
-
-        if (!this.lastTime) {
-            this.lastTime = performance.now();
-            this.lastMouse.copy(event);
-        }
+        this.delta.subVectors(this.mouse, this.lastMouse);
     };
 
     onPointerUp = e => {
-        if (!this.isOpen || !this.lastTime) {
+        window.removeEventListener('pointerup', this.onPointerUp);
+        window.removeEventListener('pointermove', this.onPointerMove);
+
+        if (!this.isOpen) {
             return;
         }
 
-        window.removeEventListener('pointermove', this.onPointerMove);
-
         this.onPointerMove(e);
 
-        if (performance.now() - this.lastTime > 750 || this.delta.subVectors(this.mouse, this.lastMouse).length() > 50) {
-            this.lastTime = null;
+        if (performance.now() - this.lastTime > 250 || this.delta.length() > 50) {
             return;
         }
 
@@ -153,13 +151,9 @@ export class HeaderInfo extends Interface {
                 this.css({ pointerEvents: 'auto' });
             });
         }
-
-        this.lastTime = null;
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     update = () => {
         this.time = performance.now();
@@ -175,6 +169,14 @@ export class HeaderInfo extends Interface {
         this.number.text(this.fps);
     };
 
+    enable = () => {
+        this.number.tween({ opacity: 1 }, 400, 'easeInOutSine');
+    };
+
+    disable = () => {
+        this.number.tween({ opacity: 0.35 }, 400, 'easeInOutSine');
+    };
+
     destroy = () => {
         this.removeListeners();
 
diff --git a/node_modules/@alienkitty/space.js/src/ui/Line.js b/node_modules/@alienkitty/space.js/src/ui/Line.js
index 5f2e726..e930221 100644
--- a/node_modules/@alienkitty/space.js/src/ui/Line.js
+++ b/node_modules/@alienkitty/space.js/src/ui/Line.js
@@ -24,9 +24,7 @@ export class Line extends Component {
         };
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     startPoint = ({ x, y }) => {
         this.start.set(x + 3, y - 3);
@@ -69,7 +67,7 @@ export class Line extends Component {
         this.context.stroke();
     };
 
-    animateIn = (reverse = false) => {
+    animateIn = reverse => {
         clearTween(this.props);
 
         tween(this.props, { alpha: 1 }, 500, 'easeOutSine');
@@ -89,7 +87,7 @@ export class Line extends Component {
         }
     };
 
-    animateOut = (fast = false, callback) => {
+    animateOut = (fast, callback) => {
         let time;
         let ease;
 
@@ -116,6 +114,7 @@ export class Line extends Component {
     };
 
     inactive = () => {
+        clearTween(this.props);
         tween(this.props, { alpha: 0 }, 300, 'easeOutSine');
     };
 }
diff --git a/node_modules/@alienkitty/space.js/src/ui/Point.js b/node_modules/@alienkitty/space.js/src/ui/Point.js
index 1418afb..0c0e046 100644
--- a/node_modules/@alienkitty/space.js/src/ui/Point.js
+++ b/node_modules/@alienkitty/space.js/src/ui/Point.js
@@ -7,7 +7,7 @@ import { Interface } from '../utils/Interface.js';
 import { Stage } from '../utils/Stage.js';
 import { PointText } from './PointText.js';
 
-import { tween } from '../tween/Tween.js';
+import { defer, tween } from '../tween/Tween.js';
 
 export class Point extends Interface {
     constructor(panel, tracker) {
@@ -28,7 +28,6 @@ export class Point extends Interface {
         this.lerpSpeed = 0.07;
         this.openColor = null;
         this.isOpen = false;
-        this.isDown = false;
         this.isMove = false;
 
         this.initHTML();
@@ -57,7 +56,6 @@ export class Point extends Interface {
         this.text.container.element.addEventListener('mouseenter', this.onHover);
         this.text.container.element.addEventListener('mouseleave', this.onHover);
         window.addEventListener('pointerdown', this.onPointerDown);
-        window.addEventListener('pointerup', this.onPointerUp);
     }
 
     removeListeners() {
@@ -65,32 +63,33 @@ export class Point extends Interface {
         this.text.container.element.removeEventListener('mouseenter', this.onHover);
         this.text.container.element.removeEventListener('mouseleave', this.onHover);
         window.removeEventListener('pointerdown', this.onPointerDown);
-        window.removeEventListener('pointerup', this.onPointerUp);
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     onColorPicker = ({ open, target }) => {
-        if (!this.element.contains(target.element)) {
+        if (!this.openColor && !this.element.contains(target.element)) {
             return;
         }
 
         if (open) {
-            this.text.container.tween({ opacity: 0.35 }, 400, 'easeInOutSine');
+            this.disable();
+
             this.openColor = target;
         } else {
-            this.text.container.tween({ opacity: 1 }, 400, 'easeInOutSine');
+            this.enable();
+
             this.openColor = null;
         }
     };
 
-    onHover = ({ type }) => {
+    onHover = async ({ type }) => {
+        await defer();
+
         if (type === 'mouseenter') {
-            this.panel.onHover({ type: 'over' });
+            this.panel.onHover({ type: 'over', isPoint: true });
         } else {
-            this.panel.onHover({ type: 'out' });
+            this.panel.onHover({ type: 'out', isPoint: true });
         }
     };
 
@@ -100,12 +99,15 @@ export class Point extends Interface {
         }
 
         if (this.text.container.element.contains(e.target)) {
-            this.isDown = true;
-        }
+            this.lastTime = performance.now();
+            this.lastMouse.set(e.clientX, e.clientY);
+            this.lastOrigin.copy(this.origin);
 
-        this.onPointerMove(e);
+            this.onPointerMove(e);
 
-        window.addEventListener('pointermove', this.onPointerMove);
+            window.addEventListener('pointermove', this.onPointerMove);
+            window.addEventListener('pointerup', this.onPointerUp);
+        }
     };
 
     onPointerMove = ({ clientX, clientY }) => {
@@ -115,34 +117,23 @@ export class Point extends Interface {
         };
 
         this.mouse.copy(event);
+        this.delta.subVectors(this.mouse, this.lastMouse);
+        this.origin.addVectors(this.lastOrigin, this.delta);
 
-        if (!this.lastTime) {
-            this.lastTime = performance.now();
-            this.lastMouse.copy(event);
-            this.lastOrigin.copy(this.origin);
-        }
-
-        if (this.isDown) {
-            this.delta.subVectors(this.mouse, this.lastMouse);
-            this.origin.addVectors(this.lastOrigin, this.delta);
-
-            this.isMove = true;
-        }
+        this.isMove = true;
     };
 
     onPointerUp = e => {
-        if (!this.isOpen || !this.lastTime) {
-            return;
-        }
-
+        window.removeEventListener('pointerup', this.onPointerUp);
         window.removeEventListener('pointermove', this.onPointerMove);
 
-        this.isDown = false;
+        if (!this.isOpen) {
+            return;
+        }
 
         this.onPointerMove(e);
 
-        if (performance.now() - this.lastTime > 750 || this.delta.subVectors(this.mouse, this.lastMouse).length() > 50) {
-            this.lastTime = null;
+        if (performance.now() - this.lastTime > 250 || this.delta.length() > 50) {
             return;
         }
 
@@ -152,48 +143,67 @@ export class Point extends Interface {
 
         if (this.tracker && this.tracker.isVisible && this.text.container.element.contains(e.target)) {
             if (!this.tracker.animatedIn) {
-                this.tracker.show();
+                this.panel.show();
             } else if (!this.tracker.locked) {
-                this.text.lock();
-                this.tracker.lock();
+                this.panel.lock();
             } else {
-                this.text.unlock();
-                this.tracker.unlock();
-                this.tracker.hide(true);
+                this.panel.unlock();
+                this.panel.hide();
             }
         }
-
-        this.lastTime = null;
     };
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setData = data => {
         this.text.setData(data);
     };
 
+    setTargetNumbers = targetNumbers => {
+        this.text.setTargetNumbers(targetNumbers);
+    };
+
     update = () => {
-        this.position.lerp(this.target, this.lerpSpeed);
+        if (!this.isMove) {
+            this.position.lerp(this.target, this.lerpSpeed);
+        }
+
         this.originPosition.addVectors(this.origin, this.position);
 
         this.css({ left: Math.round(this.originPosition.x), top: Math.round(this.originPosition.y) });
     };
 
+    lock = () => {
+        this.text.lock();
+    };
+
+    unlock = () => {
+        this.text.unlock();
+    };
+
     open = () => {
-        this.text.open(this.isMove);
+        this.text.open();
 
         this.isOpen = true;
     };
 
-    close = () => {
-        tween(this.origin, { x: 0, y: 0 }, 400, 'easeOutCubic');
+    close = fast => {
+        if (fast) {
+            this.clearTimeout(this.timeout);
+            this.timeout = this.delayedCall(300, () => {
+                this.origin.set(0, 0);
 
-        this.text.close();
+                this.isOpen = false;
+                this.isMove = false;
+            });
+        } else {
+            tween(this.origin, { x: 0, y: 0 }, 400, 'easeOutCubic');
 
-        this.isOpen = false;
-        this.isMove = false;
+            this.isOpen = false;
+            this.isMove = false;
+        }
+
+        this.text.close();
     };
 
     animateIn = () => {
@@ -208,9 +218,21 @@ export class Point extends Interface {
         });
     };
 
+    enable = () => {
+        this.text.container.tween({ opacity: 1 }, 400, 'easeInOutSine');
+    };
+
+    disable = () => {
+        this.text.container.tween({ opacity: 0.35 }, 400, 'easeInOutSine');
+    };
+
+    active = () => {
+        this.clearTween().tween({ opacity: 1 }, 300, 'easeOutSine');
+    };
+
     inactive = () => {
         this.clearTween().tween({ opacity: 0 }, 300, 'easeOutSine');
-        this.close();
+        this.close(true);
     };
 
     destroy = () => {
diff --git a/node_modules/@alienkitty/space.js/src/ui/PointText.js b/node_modules/@alienkitty/space.js/src/ui/PointText.js
index cbd61c6..28862fb 100644
--- a/node_modules/@alienkitty/space.js/src/ui/PointText.js
+++ b/node_modules/@alienkitty/space.js/src/ui/PointText.js
@@ -10,6 +10,7 @@ export class PointText extends Interface {
     constructor() {
         super('.text');
 
+        this.numbers = [];
         this.locked = false;
 
         this.initHTML();
@@ -20,12 +21,13 @@ export class PointText extends Interface {
         this.css({
             position: 'absolute',
             left: 10,
-            top: -15
+            top: -15,
+            pointerEvents: 'none'
         });
 
         this.container = new Interface('.container');
         this.container.css({
-            position: 'absolute',
+            position: 'relative',
             cursor: 'move',
             zIndex: 1
         });
@@ -40,90 +42,113 @@ export class PointText extends Interface {
 
         this.type = new Interface('.type');
         this.type.css({
-            height: 18,
             fontSize: 'var(--ui-secondary-font-size)',
             letterSpacing: 'var(--ui-secondary-letter-spacing)',
+            paddingBottom: 3,
             opacity: 0.7
         });
         this.container.add(this.type);
-    }
 
-    initViews() {
-        this.number = new TargetNumber();
-        this.number.css({
+        this.targetNumbers = new Interface('.numbers');
+        this.targetNumbers.css({
             position: 'absolute',
-            left: -(this.number.width + 10),
-            top: '50%',
-            marginTop: -Math.round(this.number.height / 2)
+            left: -28,
+            top: 0,
+            minHeight: '100%',
+            display: 'flex',
+            flexDirection: 'column',
+            justifyContent: 'center',
+            gap: 4,
+            paddingTop: 3
         });
-        this.container.add(this.number);
+        this.container.add(this.targetNumbers);
+    }
 
+    initViews() {
         this.panel = new Panel();
-        this.panel.css({
-            position: 'absolute',
-            left: -10,
-            top: 36
-        });
         this.add(this.panel);
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setData = data => {
         if (!data) {
             return;
         }
 
-        let height = 0;
-
         if (data.name) {
-            this.name.text(data.name);
-
-            height += 18;
+            this.name.html(data.name);
         }
 
         if (data.type) {
-            this.type.text(data.type);
-
-            height += 15;
+            this.type.html(data.type);
         }
+    };
+
+    setTargetNumbers = targetNumbers => {
+        this.targetNumbers.empty();
+        this.numbers.length = 0;
 
-        this.panel.css({ top: height + 3 });
+        targetNumbers.forEach(targetNumber => {
+            const number = new TargetNumber();
+            number.setData({ targetNumber });
+            this.targetNumbers.add(number);
+            this.numbers.push(number);
+        });
+
+        if (this.locked) {
+            this.numbers.forEach(number => {
+                number.visible();
+            });
+        }
     };
 
     lock = () => {
-        this.number.animateIn();
+        this.numbers.forEach(number => {
+            number.animateIn();
+        });
 
         this.locked = true;
     };
 
     unlock = () => {
-        this.number.animateOut();
+        this.numbers.forEach(number => {
+            number.animateOut();
+        });
 
         this.locked = false;
     };
 
-    open = moved => {
-        if (moved) {
-            return;
-        }
+    open = () => {
+        this.css({ pointerEvents: 'auto' });
+
+        this.clearTween().tween({ left: 48, opacity: 1 }, 400, 'easeOutCubic');
 
-        this.clearTween().tween({ left: this.number.width + 30, opacity: 1 }, 400, 'easeOutCubic');
+        if (this.locked) {
+            this.numbers.forEach(number => {
+                number.animateIn(100);
+            });
+        }
 
         this.panel.animateIn();
+        this.panel.active();
     };
 
     close = () => {
+        this.css({ pointerEvents: 'none' });
+
         this.clearTween().tween({ left: 10, opacity: 1 }, 400, 'easeInCubic', 200);
 
-        this.number.animateOut();
+        this.numbers.forEach(number => {
+            number.animateOut();
+        });
+
         this.panel.animateOut();
+        this.panel.inactive();
     };
 
     animateIn = () => {
-        this.clearTween().css({ opacity: 0 }).tween({ opacity: 1 }, 400, 'easeOutCubic', 200);
+        this.clearTween().css({ opacity: 0 }).tween({ left: 10, opacity: 1 }, 400, 'easeOutCubic', 200);
     };
 
     animateOut = callback => {
diff --git a/node_modules/@alienkitty/space.js/src/ui/Reticle.js b/node_modules/@alienkitty/space.js/src/ui/Reticle.js
index 3c5e94a..b1ff46f 100644
--- a/node_modules/@alienkitty/space.js/src/ui/Reticle.js
+++ b/node_modules/@alienkitty/space.js/src/ui/Reticle.js
@@ -65,9 +65,7 @@ export class Reticle extends Interface {
         }
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setData = data => {
         this.text.setData(data);
diff --git a/node_modules/@alienkitty/space.js/src/ui/ReticleText.js b/node_modules/@alienkitty/space.js/src/ui/ReticleText.js
index 4159dae..0fc2bcc 100644
--- a/node_modules/@alienkitty/space.js/src/ui/ReticleText.js
+++ b/node_modules/@alienkitty/space.js/src/ui/ReticleText.js
@@ -29,17 +29,15 @@ export class ReticleText extends Interface {
 
         this.secondary = new Interface('.secondary');
         this.secondary.css({
-            height: 18,
             fontSize: 'var(--ui-secondary-font-size)',
             letterSpacing: 'var(--ui-secondary-letter-spacing)',
+            paddingBottom: 3,
             opacity: 0.7
         });
         this.add(this.secondary);
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setData = data => {
         if (!data) {
@@ -47,11 +45,11 @@ export class ReticleText extends Interface {
         }
 
         if (data.primary) {
-            this.primary.text(data.primary);
+            this.primary.html(data.primary);
         }
 
         if (data.secondary) {
-            this.secondary.text(data.secondary);
+            this.secondary.html(data.secondary);
         }
     };
 }
diff --git a/node_modules/@alienkitty/space.js/src/ui/TargetNumber.js b/node_modules/@alienkitty/space.js/src/ui/TargetNumber.js
index 8503fe5..84dee4b 100644
--- a/node_modules/@alienkitty/space.js/src/ui/TargetNumber.js
+++ b/node_modules/@alienkitty/space.js/src/ui/TargetNumber.js
@@ -19,7 +19,7 @@ export class TargetNumber extends Interface {
     initHTML() {
         this.invisible();
         this.css({
-            position: 'absolute',
+            position: 'relative',
             boxSizing: 'border-box',
             width: this.width,
             height: this.height,
@@ -38,9 +38,7 @@ export class TargetNumber extends Interface {
         this.add(this.number);
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     setData = data => {
         if (!data) {
@@ -52,8 +50,8 @@ export class TargetNumber extends Interface {
         }
     };
 
-    animateIn = () => {
-        this.clearTween().visible().css({ opacity: 0 }).tween({ opacity: 1 }, 400, 'easeOutCubic');
+    animateIn = delay => {
+        this.clearTween().visible().css({ opacity: 0 }).tween({ opacity: 1 }, 400, 'easeOutCubic', delay);
     };
 
     animateOut = () => {
diff --git a/node_modules/@alienkitty/space.js/src/ui/Tracker.js b/node_modules/@alienkitty/space.js/src/ui/Tracker.js
index 556f58e..33286ef 100644
--- a/node_modules/@alienkitty/space.js/src/ui/Tracker.js
+++ b/node_modules/@alienkitty/space.js/src/ui/Tracker.js
@@ -7,9 +7,13 @@ import { Interface } from '../utils/Interface.js';
 import { TargetNumber } from './TargetNumber.js';
 
 export class Tracker extends Interface {
-    constructor() {
+    constructor({
+        noTargetNumber
+    } = {}) {
         super('.tracker');
 
+        this.noTargetNumber = noTargetNumber;
+
         this.position = new Vector2();
         this.target = new Vector2();
         this.lerpSpeed = 1;
@@ -88,18 +92,24 @@ export class Tracker extends Interface {
     }
 
     initViews() {
-        this.number = new TargetNumber();
-        this.number.css({
-            left: -(this.number.width + 15),
-            top: '50%',
-            marginTop: -Math.round(this.number.height / 2)
-        });
-        this.add(this.number);
+        if (!this.noTargetNumber) {
+            this.number = new TargetNumber();
+            this.number.css({
+                left: -(this.number.width + 15),
+                top: '50%',
+                marginTop: -Math.round(this.number.height / 2)
+            });
+            this.add(this.number);
+        }
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
+
+    setData = data => {
+        if (this.number) {
+            this.number.setData(data);
+        }
+    };
 
     update = () => {
         this.position.lerp(this.target, this.lerpSpeed);
@@ -107,25 +117,29 @@ export class Tracker extends Interface {
     };
 
     lock = () => {
-        this.number.animateIn();
+        if (this.number) {
+            this.number.animateIn();
+        }
 
         this.locked = true;
     };
 
     unlock = () => {
-        this.number.animateOut();
+        if (this.number) {
+            this.number.animateOut();
+        }
 
         this.locked = false;
     };
 
     show = () => {
         this.clearTimeout(this.timeout);
-        this.corners.clearTween().tween({ opacity: 1 }, 400, 'easeOutCubic');
+        this.corners.clearTween().tween({ scale: 1, opacity: 1 }, 400, 'easeOutCubic');
 
         this.animatedIn = true;
     };
 
-    hide = (fast = false) => {
+    hide = fast => {
         if (this.locked) {
             return;
         }
@@ -146,13 +160,17 @@ export class Tracker extends Interface {
         this.isVisible = true;
     };
 
-    animateOut = () => {
+    animateOut = callback => {
         this.clearTimeout(this.timeout);
         this.corners.clearTween().tween({ scale: 0, opacity: 0 }, 500, 'easeInCubic', () => {
             this.corners.invisible();
 
             this.animatedIn = false;
             this.isVisible = false;
+
+            if (callback) {
+                callback();
+            }
         });
     };
 }
diff --git a/node_modules/@alienkitty/space.js/src/ui/UI.js b/node_modules/@alienkitty/space.js/src/ui/UI.js
index 0c29fde..cee41f8 100644
--- a/node_modules/@alienkitty/space.js/src/ui/UI.js
+++ b/node_modules/@alienkitty/space.js/src/ui/UI.js
@@ -55,9 +55,7 @@ export class UI extends Interface {
         }
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     addPanel = item => {
         if (this.header) {
@@ -71,6 +69,12 @@ export class UI extends Interface {
         }
     };
 
+    setPanelIndex = (label, index) => {
+        if (this.header) {
+            this.header.info.panel.setPanelIndex(label, index);
+        }
+    };
+
     invert = isInverted => {
         Stage.root.style.setProperty('--ui-color', isInverted ? this.invertColors.light : this.invertColors.dark);
         Stage.root.style.setProperty('--ui-color-triplet', isInverted ? this.invertColors.lightTriplet : this.invertColors.darkTriplet);
diff --git a/node_modules/@alienkitty/space.js/src/utils/Stage.js b/node_modules/@alienkitty/space.js/src/utils/Stage.js
index bfd5565..2ef9c8f 100644
--- a/node_modules/@alienkitty/space.js/src/utils/Stage.js
+++ b/node_modules/@alienkitty/space.js/src/utils/Stage.js
@@ -17,9 +17,7 @@ if (typeof window !== 'undefined') {
         ticker.start();
     }
 
-    /**
-     * Event handlers
-     */
+    // Event handlers
 
     function onPopState(e) {
         Stage.path = location.pathname;
@@ -27,9 +25,7 @@ if (typeof window !== 'undefined') {
         Stage.events.emit('state_change', e);
     }
 
-    /**
-     * Public methods
-     */
+    // Public methods
 
     Stage.init = (element = document.body) => {
         Stage.element = element;
